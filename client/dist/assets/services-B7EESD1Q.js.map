{"version":3,"file":"services-B7EESD1Q.js","sources":["../../src/services/userDataService.ts","../../src/services/realTimeDataService.ts","../../src/services/uamsApiService.ts","../../src/services/unifiedQueueManager.ts","../../src/services/environmental/environmentalContextService.ts"],"sourcesContent":["import type {\r\n  User\r\n} from '@shared/types';\r\nimport { pb } from '../lib/pocketbase';\r\nimport { debugLogger } from '../utils/debugLogger';\r\n\r\n// Extended User interface for authentication context\r\nexport interface AuthenticatedUser extends User {\r\n  token?: string;\r\n  tokenType?: 'demo' | 'mock' | 'real';\r\n}\r\n\r\n// Types for user data and statistics\r\nexport interface UserStats {\r\n  totalXP: number;\r\n  level: number;\r\n  currentLevelXP: number;\r\n  nextLevelXP: number;\r\n  cardsStudied: number;\r\n  studyTime: number; // in minutes\r\n  accuracy: number; // percentage\r\n  currentStreak: number;\r\n  longestStreak: number;\r\n  coins: number;\r\n  gems: number;\r\n  lastStudyDate: string;\r\n  joinDate: string;\r\n}\r\n\r\nexport interface UserActivity {\r\n  date: string;\r\n  cardsStudied: number;\r\n  studyTime: number;\r\n  accuracy: number;\r\n  xpGained: number;\r\n}\r\n\r\nexport interface UserAchievement {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  icon: string;\r\n  unlockedAt: string;\r\n  category: 'study' | 'streak' | 'accuracy' | 'time' | 'social';\r\n}\r\n\r\nexport interface UserChallenge {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: 'daily' | 'weekly' | 'monthly';\r\n  target: number;\r\n  current: number;\r\n  reward: {\r\n    xp: number;\r\n    coins: number;\r\n    gems?: number;\r\n  };\r\n  expiresAt: string;\r\n  completedAt?: string;\r\n}\r\n\r\nexport interface UserPerformanceMetrics {\r\n  weeklyProgress: {\r\n    cardsStudied: number;\r\n    studyTime: number;\r\n    accuracy: number;\r\n    goal: number;\r\n  };\r\n  monthlyProgress: {\r\n    cardsStudied: number;\r\n    studyTime: number;\r\n    decksCompleted: number;\r\n  };\r\n  studyPattern: {\r\n    preferredTime: string;\r\n    averageSessionLength: number;\r\n    studyFrequency: number;\r\n  };\r\n}\r\n\r\nexport interface LeaderboardEntry {\r\n  userId: string;\r\n  username: string;\r\n  avatar?: string;\r\n  score: number;\r\n  rank: number;\r\n  change: number; // position change from last period\r\n}\r\n\r\nexport interface LeaderboardData {\r\n  global: LeaderboardEntry[];\r\n  friends: LeaderboardEntry[];\r\n  weekly: LeaderboardEntry[];\r\n  monthly: LeaderboardEntry[];\r\n}\r\n\r\n// Demo data for demo users\r\nconst DEMO_USER_STATS: UserStats = {\r\n  totalXP: 2500,\r\n  level: 5,\r\n  currentLevelXP: 100,\r\n  nextLevelXP: 500,\r\n  cardsStudied: 1250,\r\n  studyTime: 2400, // 40 hours\r\n  accuracy: 87.5,\r\n  currentStreak: 15,\r\n  longestStreak: 28,\r\n  coins: 150,\r\n  gems: 10,\r\n  lastStudyDate: new Date().toISOString(),\r\n  joinDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()\r\n};\r\n\r\nconst DEMO_ACHIEVEMENTS: UserAchievement[] = [\r\n  {\r\n    id: 'first_study',\r\n    name: 'First Steps',\r\n    description: 'Complete your first study session',\r\n    icon: 'ðŸŽ¯',\r\n    unlockedAt: new Date(Date.now() - 25 * 24 * 60 * 60 * 1000).toISOString(),\r\n    category: 'study'\r\n  },\r\n  {\r\n    id: 'week_streak',\r\n    name: 'Week Warrior',\r\n    description: 'Study for 7 days in a row',\r\n    icon: 'ðŸ”¥',\r\n    unlockedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\r\n    category: 'streak'\r\n  }\r\n];\r\n\r\n// Enhanced Monthly Challenges\r\nconst ENHANCED_MONTHLY_CHALLENGES: UserChallenge[] = [\r\n  {\r\n    id: 'monthly_mastery',\r\n    name: 'Monthly Mastery Challenge',\r\n    description: 'Complete an intensive month-long study challenge with progressive difficulty',\r\n    type: 'monthly',\r\n    target: 1000,\r\n    current: 245,\r\n    reward: { xp: 1500, coins: 500, gems: 50 },\r\n    expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\r\n  },\r\n  {\r\n    id: 'knowledge_seeker',\r\n    name: 'Knowledge Seeker',\r\n    description: 'Explore diverse subjects and maintain high accuracy throughout the month',\r\n    type: 'monthly',\r\n    target: 800,\r\n    current: 156,\r\n    reward: { xp: 1200, coins: 400, gems: 30 },\r\n    expiresAt: new Date(Date.now() + 25 * 24 * 60 * 60 * 1000).toISOString()\r\n  }\r\n];\r\n\r\nconst DEMO_CHALLENGES: UserChallenge[] = [\r\n  {\r\n    id: 'daily_grind',\r\n    name: 'Daily Grind',\r\n    description: 'Study 25 cards today',\r\n    type: 'daily',\r\n    target: 25,\r\n    current: 18,\r\n    reward: { xp: 50, coins: 10 },\r\n    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\r\n  },\r\n  {\r\n    id: 'weekly_warrior',\r\n    name: 'Weekly Warrior',\r\n    description: 'Study 200 cards this week',\r\n    type: 'weekly',\r\n    target: 200,\r\n    current: 145,\r\n    reward: { xp: 200, coins: 50, gems: 5 },\r\n    expiresAt: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString()\r\n  },\r\n  ...ENHANCED_MONTHLY_CHALLENGES\r\n];\r\n\r\nconst DEMO_LEADERBOARD: LeaderboardData = {\r\n  global: [\r\n    { userId: 'demo1', username: 'StudyMaster', score: 5420, rank: 1, change: 0 },\r\n    { userId: 'demo2', username: 'FlashcardPro', score: 4890, rank: 2, change: 1 },\r\n    { userId: 'demo3', username: 'MemoryWiz', score: 4650, rank: 3, change: -1 },\r\n    { userId: 'demo4', username: 'QuizKing', score: 4200, rank: 4, change: 2 },\r\n    { userId: 'demo_user', username: 'Demo User', score: 2500, rank: 15, change: 3 }\r\n  ],\r\n  friends: [\r\n    { userId: 'friend1', username: 'StudyBuddy', score: 3200, rank: 1, change: 0 },\r\n    { userId: 'demo_user', username: 'Demo User', score: 2500, rank: 2, change: 1 },\r\n    { userId: 'friend2', username: 'LearningPal', score: 2100, rank: 3, change: -1 }\r\n  ],\r\n  weekly: [\r\n    { userId: 'demo1', username: 'StudyMaster', score: 890, rank: 1, change: 2 },\r\n    { userId: 'demo_user', username: 'Demo User', score: 420, rank: 8, change: 5 }\r\n  ],\r\n  monthly: [\r\n    { userId: 'demo1', username: 'StudyMaster', score: 3200, rank: 1, change: 0 },\r\n    { userId: 'demo_user', username: 'Demo User', score: 1800, rank: 12, change: -2 }\r\n  ]\r\n};\r\n\r\n// API service class\r\nexport class UserDataService {\r\n  private baseUrl = '/api';\r\n\r\n  // Check if user is demo user\r\n  private isDemoUser(user: AuthenticatedUser): boolean {\r\n    return user.tokenType === 'demo' || user.email === 'demo@studymaster.app';\r\n  }\r\n\r\n  // Get user statistics\r\n  async getUserStats(user: AuthenticatedUser): Promise<UserStats> {\r\n    debugLogger.log('[USER_DATA_SERVICE]', 'START - getUserStats', {\r\n      userId: user.id,\r\n      isDemoUser: this.isDemoUser(user)\r\n    });\r\n\r\n    if (this.isDemoUser(user)) {\r\n      debugLogger.log('[USER_DATA_SERVICE]', 'Returning demo user stats');\r\n      return DEMO_USER_STATS;\r\n    }\r\n\r\n    // Primary: Try PocketBase\r\n    try {\r\n      debugLogger.log('[USER_DATA_SERVICE]', 'Attempting to fetch user stats from PocketBase');\r\n      \r\n      const userRecord = await pb.collection('users').getOne(user.id, {\r\n        fields: 'level,total_xp,coins,gems,last_active,created,preferences'\r\n      });\r\n\r\n      debugLogger.log('[USER_DATA_SERVICE]', 'PocketBase user stats fetched successfully');\r\n\r\n      // Convert PocketBase record to UserStats format\r\n      const stats: UserStats = {\r\n        totalXP: userRecord.total_xp || 0,\r\n        level: userRecord.level || 1,\r\n        currentLevelXP: (userRecord.total_xp || 0) % 200, // Assuming 200 XP per level\r\n        nextLevelXP: 200,\r\n        cardsStudied: 0, // Will need to calculate from study sessions\r\n        studyTime: 0, // Will need to calculate from study sessions\r\n        accuracy: 85, // Default value, calculate from actual data later\r\n        currentStreak: 0, // Calculate from study sessions\r\n        longestStreak: 0, // Calculate from study sessions\r\n        coins: userRecord.coins || 100,\r\n        gems: userRecord.gems || 10,\r\n        lastStudyDate: userRecord.last_active || new Date().toISOString(),\r\n        joinDate: userRecord.created || new Date().toISOString()\r\n      };\r\n\r\n      return stats;\r\n    } catch (pocketbaseError) {\r\n      debugLogger.warn('[USER_DATA_SERVICE]', 'PocketBase fetch failed, trying REST API fallback', {\r\n        error: pocketbaseError\r\n      });\r\n\r\n      // Fallback: Try REST API\r\n      try {\r\n        const response = await fetch(`${this.baseUrl}/users/${user.id}/stats`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${user.token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user stats from REST API');\r\n        }\r\n\r\n        const data = await response.json();\r\n        debugLogger.log('[USER_DATA_SERVICE]', 'REST API user stats fetched successfully');\r\n        return data;\r\n      } catch (apiError) {\r\n        debugLogger.warn('[USER_DATA_SERVICE]', 'Both PocketBase and REST API failed, using mock data', {\r\n          pocketbaseError,\r\n          apiError\r\n        });\r\n        \r\n        // Final fallback: Return personalized mock data\r\n        return this.generatePersonalizedMockStats(user);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Get user activity history\r\n  async getUserActivity(user: AuthenticatedUser, days: number = 30): Promise<UserActivity[]> {\r\n    if (this.isDemoUser(user)) {\r\n      return this.generateDemoActivity(days);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/users/${user.id}/activity?days=${days}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${user.token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user activity');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.warn('Failed to fetch real user activity, using mock data:', error);\r\n      return this.generatePersonalizedActivity(user, days);\r\n    }\r\n  }\r\n\r\n  // Get user achievements\r\n  async getUserAchievements(user: AuthenticatedUser): Promise<UserAchievement[]> {\r\n    if (this.isDemoUser(user)) {\r\n      return DEMO_ACHIEVEMENTS;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/users/${user.id}/achievements`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${user.token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user achievements');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.warn('Failed to fetch real user achievements, using mock data:', error);\r\n      return this.generatePersonalizedAchievements(user);\r\n    }\r\n  }\r\n\r\n  // Get user challenges\r\n  async getUserChallenges(user: AuthenticatedUser): Promise<UserChallenge[]> {\r\n    if (this.isDemoUser(user)) {\r\n      return DEMO_CHALLENGES;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/users/${user.id}/challenges`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${user.token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user challenges');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.warn('Failed to fetch real user challenges, using mock data:', error);\r\n      return this.generatePersonalizedChallenges(user);\r\n    }\r\n  }\r\n\r\n  // Get leaderboard data\r\n  async getLeaderboardData(user: AuthenticatedUser): Promise<LeaderboardData> {\r\n    if (this.isDemoUser(user)) {\r\n      return DEMO_LEADERBOARD;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/leaderboard`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${user.token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch leaderboard data');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.warn('Failed to fetch real leaderboard data, using mock data:', error);\r\n      return this.generatePersonalizedLeaderboard(user);\r\n    }\r\n  }\r\n\r\n  // Get performance metrics\r\n  async getPerformanceMetrics(user: AuthenticatedUser): Promise<UserPerformanceMetrics> {\r\n    if (this.isDemoUser(user)) {\r\n      return this.generateDemoPerformanceMetrics();\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/users/${user.id}/performance`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${user.token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch performance metrics');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.warn('Failed to fetch real performance metrics, using mock data:', error);\r\n      return this.generatePersonalizedPerformanceMetrics(user);\r\n    }\r\n  }\r\n\r\n  // Get comprehensive user profile data\r\n  async getCompleteUserProfile(user: AuthenticatedUser): Promise<{\r\n    stats: UserStats;\r\n    activity: UserActivity[];\r\n    achievements: UserAchievement[];\r\n    challenges: UserChallenge[];\r\n    performance: UserPerformanceMetrics;\r\n  }> {\r\n    const [stats, activity, achievements, challenges, performance] = await Promise.all([\r\n      this.getUserStats(user),\r\n      this.getUserActivity(user, 30),\r\n      this.getUserAchievements(user),\r\n      this.getUserChallenges(user),\r\n      this.getPerformanceMetrics(user)\r\n    ]);\r\n\r\n    return {\r\n      stats,\r\n      activity,\r\n      achievements,\r\n      challenges,\r\n      performance\r\n    };\r\n  }\r\n\r\n  // Reset all user data\r\n  async resetAllUserData(user: AuthenticatedUser): Promise<void> {\r\n    if (this.isDemoUser(user)) {\r\n      // For demo users, we don't need to do anything as data is static\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/users/${user.id}/reset`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${user.token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to reset user data');\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to reset real user data via API:', error);\r\n      // For mock users, we don't need to do anything as the stores will handle the reset\r\n      // The error is expected when API is not available\r\n    }\r\n  }\r\n\r\n  // Generate personalized mock data for authenticated users\r\n  private generatePersonalizedMockStats(user: AuthenticatedUser): UserStats {\r\n    const userHash = this.hashString(user.email);\r\n    const daysSinceJoin = Math.floor(userHash % 60) + 1; // 1-60 days\r\n    \r\n    return {\r\n      totalXP: Math.floor(userHash % 1000) + 100,\r\n      level: Math.floor((userHash % 1000) / 200) + 1,\r\n      currentLevelXP: userHash % 200,\r\n      nextLevelXP: 200,\r\n      cardsStudied: Math.floor(userHash % 500) + 50,\r\n      studyTime: Math.floor(userHash % 1200) + 60, // 1-20 hours\r\n      accuracy: 75 + (userHash % 20), // 75-95%\r\n      currentStreak: Math.floor(userHash % 15) + 1,\r\n      longestStreak: Math.floor(userHash % 30) + 5,\r\n      coins: Math.floor(userHash % 200) + 50,\r\n      gems: Math.floor(userHash % 20) + 5,\r\n      lastStudyDate: new Date().toISOString(),\r\n      joinDate: new Date(Date.now() - daysSinceJoin * 24 * 60 * 60 * 1000).toISOString()\r\n    };\r\n  }\r\n\r\n  private generatePersonalizedActivity(user: AuthenticatedUser, days: number): UserActivity[] {\r\n    const activities: UserActivity[] = [];\r\n    \r\n    for (let i = 0; i < days; i++) {\r\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000);\r\n      const dayHash = this.hashString(user.email + date.toDateString());\r\n      \r\n      // Some days have no activity\r\n      if (dayHash % 4 === 0) continue;\r\n      \r\n      activities.push({\r\n        date: date.toISOString().split('T')[0],\r\n        cardsStudied: Math.floor(dayHash % 50) + 5,\r\n        studyTime: Math.floor(dayHash % 120) + 10,\r\n        accuracy: 70 + (dayHash % 25),\r\n        xpGained: Math.floor(dayHash % 100) + 20\r\n      });\r\n    }\r\n    \r\n    return activities.reverse();\r\n  }\r\n\r\n  private generatePersonalizedAchievements(user: AuthenticatedUser): UserAchievement[] {\r\n    const userHash = this.hashString(user.email);\r\n    const baseAchievements = [...DEMO_ACHIEVEMENTS];\r\n    \r\n    // Add user-specific achievements based on their hash\r\n    if (userHash % 3 === 0) {\r\n      baseAchievements.push({\r\n        id: 'accuracy_master',\r\n        name: 'Accuracy Master',\r\n        description: 'Achieve 90% accuracy in a session',\r\n        icon: 'ðŸŽ¯',\r\n        unlockedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\r\n        category: 'accuracy'\r\n      });\r\n    }\r\n    \r\n    return baseAchievements;\r\n  }\r\n\r\n  private generatePersonalizedChallenges(user: AuthenticatedUser): UserChallenge[] {\r\n    // Generate personalized data based on user email\r\n    const challenges = [...DEMO_CHALLENGES];\r\n    \r\n    // Personalize challenge progress based on user\r\n    challenges.forEach(challenge => {\r\n      const progressHash = this.hashString(user.email + challenge.id);\r\n      challenge.current = Math.floor((progressHash % 80) / 100 * challenge.target);\r\n    });\r\n    \r\n    return challenges;\r\n  }\r\n\r\n  private generatePersonalizedLeaderboard(user: AuthenticatedUser): LeaderboardData {\r\n    const userHash = this.hashString(user.email);\r\n    const userScore = Math.floor(userHash % 1000) + 100;\r\n    const userRank = Math.floor(userHash % 50) + 5;\r\n    \r\n    const leaderboard = { ...DEMO_LEADERBOARD };\r\n    \r\n    // Insert user into leaderboards\r\n    leaderboard.global.push({\r\n      userId: user.id,\r\n      username: user.username,\r\n      score: userScore,\r\n      rank: userRank,\r\n      change: Math.floor(userHash % 10) - 5\r\n    });\r\n    \r\n    return leaderboard;\r\n  }\r\n\r\n  private generateDemoActivity(days: number): UserActivity[] {\r\n    const activities: UserActivity[] = [];\r\n    \r\n    for (let i = 0; i < days; i++) {\r\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000);\r\n      \r\n      // Skip some days to make it realistic\r\n      if (i % 3 === 0) continue;\r\n      \r\n      activities.push({\r\n        date: date.toISOString().split('T')[0],\r\n        cardsStudied: Math.floor(Math.random() * 40) + 10,\r\n        studyTime: Math.floor(Math.random() * 90) + 15,\r\n        accuracy: 80 + Math.floor(Math.random() * 15),\r\n        xpGained: Math.floor(Math.random() * 80) + 30\r\n      });\r\n    }\r\n    \r\n    return activities.reverse();\r\n  }\r\n\r\n  private generateDemoPerformanceMetrics(): UserPerformanceMetrics {\r\n    return {\r\n      weeklyProgress: {\r\n        cardsStudied: 180,\r\n        studyTime: 240, // 4 hours\r\n        accuracy: 87.5,\r\n        goal: 350\r\n      },\r\n      monthlyProgress: {\r\n        cardsStudied: 720,\r\n        studyTime: 1200, // 20 hours\r\n        decksCompleted: 8\r\n      },\r\n      studyPattern: {\r\n        preferredTime: 'evening',\r\n        averageSessionLength: 25,\r\n        studyFrequency: 5.2\r\n      }\r\n    };\r\n  }\r\n\r\n  private generatePersonalizedPerformanceMetrics(user: AuthenticatedUser): UserPerformanceMetrics {\r\n    const userHash = this.hashString(user.email);\r\n    \r\n    return {\r\n      weeklyProgress: {\r\n        cardsStudied: Math.floor(userHash % 200) + 50,\r\n        studyTime: Math.floor(userHash % 300) + 60,\r\n        accuracy: 75 + (userHash % 20),\r\n        goal: 300\r\n      },\r\n      monthlyProgress: {\r\n        cardsStudied: Math.floor(userHash % 800) + 200,\r\n        studyTime: Math.floor(userHash % 1500) + 300,\r\n        decksCompleted: Math.floor(userHash % 15) + 3\r\n      },\r\n      studyPattern: {\r\n        preferredTime: ['morning', 'afternoon', 'evening'][userHash % 3],\r\n        averageSessionLength: Math.floor(userHash % 30) + 15,\r\n        studyFrequency: 3 + (userHash % 4)\r\n      }\r\n    };\r\n  }\r\n\r\n  // Simple hash function for consistent personalization\r\n  private hashString(str: string): number {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const userDataService = new UserDataService();","// Removed unused imports: useDeckStore and useGamificationStore\r\n\r\n// Types for real-time data\r\nexport interface GlobalLearningStats {\r\n  totalLearners: number\r\n  cardsStudiedToday: number\r\n  activeStudySessions: number\r\n  languagesBeingLearned: number\r\n  topSubjects: Array<{ name: string; learners: number }>\r\n  studyTimeToday: number // in minutes\r\n  lastUpdated: string\r\n}\r\n\r\nexport interface EducationalTrends {\r\n  popularSubjects: Array<{ subject: string; growth: number; learners: number }>\r\n  learningMethods: Array<{ method: string; effectiveness: number; usage: number }>\r\n  studyPatterns: {\r\n    peakHours: Array<{ hour: number; activity: number }>\r\n    weeklyTrends: Array<{ day: string; sessions: number }>\r\n  }\r\n  lastUpdated: string\r\n}\r\n\r\nexport interface LiveUserMetrics {\r\n  onlineUsers: number\r\n  studyingSessions: number\r\n  completedToday: number\r\n  averageAccuracy: number\r\n  topPerformers: Array<{ username: string; score: number; country: string }>\r\n  lastUpdated: string\r\n}\r\n\r\nexport interface MarketInsights {\r\n  skillDemand: Array<{ skill: string; demand: number; growth: number }>\r\n  industryTrends: Array<{ industry: string; skills: string[]; growth: number }>\r\n  certificationValue: Array<{ cert: string; value: number; popularity: number }>\r\n  lastUpdated: string\r\n}\r\n\r\n// Real-time data service class\r\nexport class RealTimeDataService {\r\n  private updateInterval: number = 30000 // 30 seconds\r\n  private subscribers: Map<string, ((data: unknown) => void)[]> = new Map()\r\n  private intervalId: NodeJS.Timeout | null = null\r\n  private activeInstances: number = 0 // Reference counter for active instances\r\n\r\n  // Subscribe to real-time updates\r\n  subscribe<T = unknown>(dataType: string, callback: (data: T) => void): () => void {\r\n    if (!this.subscribers.has(dataType)) {\r\n      this.subscribers.set(dataType, [])\r\n    }\r\n    this.subscribers.get(dataType)!.push(callback as (data: unknown) => void)\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      const callbacks = this.subscribers.get(dataType)\r\n      if (callbacks) {\r\n        const index = callbacks.indexOf(callback as (data: unknown) => void)\r\n        if (index > -1) {\r\n          callbacks.splice(index, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Notify subscribers\r\n  private notify(dataType: string, data: unknown): void {\r\n    const callbacks = this.subscribers.get(dataType)\r\n    if (callbacks) {\r\n      callbacks.forEach(callback => callback(data))\r\n    }\r\n  }\r\n\r\n  // Fetch global learning statistics from multiple sources\r\n  async getGlobalLearningStats(): Promise<GlobalLearningStats> {\r\n    try {\r\n      // Try to fetch from real educational APIs\r\n      const stats = await this.fetchFromMultipleSources([\r\n        () => this.fetchFromDuolingoAPI(),\r\n        () => this.fetchFromKhanAcademyAPI(),\r\n        () => this.fetchFromCourseraAPI(),\r\n        () => this.fetchFromEducationalDataAPI()\r\n      ])\r\n\r\n      if (stats) {\r\n        this.notify('globalStats', stats)\r\n        return stats as GlobalLearningStats\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to fetch real global stats, using enhanced mock data:', error)\r\n    }\r\n\r\n    // Enhanced realistic mock data with time-based variations\r\n    return this.generateEnhancedGlobalStats()\r\n  }\r\n\r\n  // Fetch educational trends from research APIs\r\n  async getEducationalTrends(): Promise<EducationalTrends> {\r\n    try {\r\n      // Try to fetch from educational research APIs\r\n      const trends = await this.fetchEducationalTrendsFromAPIs()\r\n      if (trends) {\r\n        this.notify('educationalTrends', trends)\r\n        return trends\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to fetch real educational trends, using enhanced mock data:', error)\r\n    }\r\n\r\n    return this.generateEnhancedEducationalTrends()\r\n  }\r\n\r\n  // Fetch live user metrics\r\n  async getLiveUserMetrics(): Promise<LiveUserMetrics> {\r\n    try {\r\n      // Try to fetch from real-time analytics APIs\r\n      const metrics = await this.fetchLiveMetricsFromAPIs()\r\n      if (metrics) {\r\n        this.notify('liveMetrics', metrics)\r\n        return metrics\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to fetch real live metrics, using enhanced mock data:', error)\r\n    }\r\n\r\n    return this.generateEnhancedLiveMetrics()\r\n  }\r\n\r\n  // Fetch market insights from job/skill APIs\r\n  async getMarketInsights(): Promise<MarketInsights> {\r\n    try {\r\n      // Try to fetch from job market APIs\r\n      const insights = await this.fetchMarketInsightsFromAPIs()\r\n      if (insights) {\r\n        this.notify('marketInsights', insights)\r\n        return insights\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to fetch real market insights, using enhanced mock data:', error)\r\n    }\r\n\r\n    return this.generateEnhancedMarketInsights()\r\n  }\r\n\r\n  // Attempt to fetch from Duolingo's public API\r\n  private async fetchFromDuolingoAPI(): Promise<Partial<GlobalLearningStats> | null> {\r\n    try {\r\n      // Note: Duolingo doesn't have a public API for global stats\r\n      // This is a placeholder for when such APIs become available\r\n      const response = await fetch('https://www.duolingo.com/api/1/users/show?username=duolingo', {\r\n        method: 'GET',\r\n        headers: { 'Accept': 'application/json' }\r\n      })\r\n      \r\n      if (response.ok) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const _data = await response.json()\r\n        // Extract relevant statistics if available\r\n        return null // Placeholder\r\n      }\r\n    } catch (error) {\r\n      console.log('Duolingo API not accessible:', error)\r\n    }\r\n    return null\r\n  }\r\n\r\n  // Attempt to fetch from Khan Academy's API\r\n  private async fetchFromKhanAcademyAPI(): Promise<Partial<GlobalLearningStats> | null> {\r\n    try {\r\n      // Khan Academy has limited public APIs\r\n      // This is a placeholder for educational statistics\r\n      return null\r\n    } catch (error) {\r\n      console.log('Khan Academy API not accessible:', error)\r\n    }\r\n    return null\r\n  }\r\n\r\n  // Attempt to fetch from Coursera's API\r\n  private async fetchFromCourseraAPI(): Promise<Partial<GlobalLearningStats> | null> {\r\n    try {\r\n      // Coursera doesn't have public global statistics API\r\n      // This is a placeholder\r\n      return null\r\n    } catch (error) {\r\n      console.log('Coursera API not accessible:', error)\r\n    }\r\n    return null\r\n  }\r\n\r\n  // Attempt to fetch from educational data APIs\r\n  private async fetchFromEducationalDataAPI(): Promise<Partial<GlobalLearningStats> | null> {\r\n    try {\r\n      // Try to fetch from open educational data sources\r\n      // This could include UNESCO, World Bank education data, etc.\r\n      return null\r\n    } catch (error) {\r\n      console.log('Educational data API not accessible:', error)\r\n    }\r\n    return null\r\n  }\r\n\r\n  // Fetch from multiple sources and combine results\r\n  private async fetchFromMultipleSources(fetchers: Array<() => Promise<unknown>>): Promise<unknown> {\r\n    const results = await Promise.allSettled(fetchers.map(fetcher => fetcher()))\r\n    \r\n    // Combine successful results\r\n    const successfulResults = results\r\n      .filter(result => result.status === 'fulfilled' && result.value)\r\n      .map(result => (result as PromiseFulfilledResult<unknown>).value)\r\n\r\n    if (successfulResults.length > 0) {\r\n      // Merge results from multiple sources\r\n      return this.mergeDataSources(successfulResults)\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  // Merge data from multiple sources\r\n  private mergeDataSources(sources: unknown[]): unknown {\r\n    // Implement logic to combine data from multiple sources\r\n    // For now, return the first successful source\r\n    return sources[0]\r\n  }\r\n\r\n  // Generate enhanced realistic global statistics\r\n  private generateEnhancedGlobalStats(): GlobalLearningStats {\r\n    const now = new Date()\r\n    const hour = now.getHours()\r\n    const dayOfWeek = now.getDay()\r\n    \r\n    // Time-based activity simulation\r\n    const timeMultiplier = this.getTimeBasedMultiplier(hour, dayOfWeek)\r\n    \r\n    // Base numbers that feel realistic for a global learning platform\r\n    const baseLearners = 2847392\r\n    const baseCardsToday = 15847293\r\n    const baseActiveSessions = 23847\r\n    \r\n    return {\r\n      totalLearners: Math.floor(baseLearners + (Math.random() * 1000 - 500)),\r\n      cardsStudiedToday: Math.floor(baseCardsToday * timeMultiplier + (Math.random() * 10000 - 5000)),\r\n      activeStudySessions: Math.floor(baseActiveSessions * timeMultiplier + (Math.random() * 1000 - 500)),\r\n      languagesBeingLearned: 127 + Math.floor(Math.random() * 5),\r\n      topSubjects: [\r\n        { name: 'Spanish', learners: Math.floor(847392 * timeMultiplier) },\r\n        { name: 'JavaScript', learners: Math.floor(623847 * timeMultiplier) },\r\n        { name: 'French', learners: Math.floor(534829 * timeMultiplier) },\r\n        { name: 'Python', learners: Math.floor(487293 * timeMultiplier) },\r\n        { name: 'German', learners: Math.floor(392847 * timeMultiplier) }\r\n      ],\r\n      studyTimeToday: Math.floor(1847293 * timeMultiplier), // in minutes\r\n      lastUpdated: now.toISOString()\r\n    }\r\n  }\r\n\r\n  // Generate enhanced educational trends\r\n  private generateEnhancedEducationalTrends(): EducationalTrends {\r\n    const now = new Date()\r\n    \r\n    return {\r\n      popularSubjects: [\r\n        { subject: 'Artificial Intelligence', growth: 156.7, learners: 892847 },\r\n        { subject: 'Data Science', growth: 134.2, learners: 734829 },\r\n        { subject: 'Cybersecurity', growth: 128.9, learners: 623847 },\r\n        { subject: 'Cloud Computing', growth: 119.4, learners: 587293 },\r\n        { subject: 'Machine Learning', growth: 112.8, learners: 534829 },\r\n        { subject: 'Spanish Language', growth: 89.3, learners: 1247392 },\r\n        { subject: 'Digital Marketing', growth: 87.6, learners: 423847 },\r\n        { subject: 'UX/UI Design', growth: 82.4, learners: 392847 }\r\n      ],\r\n      learningMethods: [\r\n        { method: 'Spaced Repetition', effectiveness: 94.7, usage: 78.3 },\r\n        { method: 'Active Recall', effectiveness: 91.2, usage: 65.8 },\r\n        { method: 'Microlearning', effectiveness: 87.9, usage: 82.1 },\r\n        { method: 'Gamification', effectiveness: 84.6, usage: 71.4 },\r\n        { method: 'Peer Learning', effectiveness: 81.3, usage: 56.7 }\r\n      ],\r\n      studyPatterns: {\r\n        peakHours: this.generatePeakHours(),\r\n        weeklyTrends: this.generateWeeklyTrends()\r\n      },\r\n      lastUpdated: now.toISOString()\r\n    }\r\n  }\r\n\r\n  // Generate enhanced live user metrics\r\n  private generateEnhancedLiveMetrics(): LiveUserMetrics {\r\n    const now = new Date()\r\n    const hour = now.getHours()\r\n    const timeMultiplier = this.getTimeBasedMultiplier(hour, now.getDay())\r\n    \r\n    return {\r\n      onlineUsers: Math.floor(47392 * timeMultiplier + (Math.random() * 1000 - 500)),\r\n      studyingSessions: Math.floor(23847 * timeMultiplier + (Math.random() * 500 - 250)),\r\n      completedToday: Math.floor(184729 + (Math.random() * 1000 - 500)),\r\n      averageAccuracy: 87.3 + (Math.random() * 4 - 2),\r\n      topPerformers: [\r\n        { username: 'StudyMaster_Pro', score: 15847, country: 'Singapore' },\r\n        { username: 'LearningNinja', score: 14923, country: 'South Korea' },\r\n        { username: 'FlashcardWiz', score: 14756, country: 'Finland' },\r\n        { username: 'MemoryChamp', score: 14234, country: 'Japan' },\r\n        { username: 'QuizMaster', score: 13892, country: 'Canada' }\r\n      ],\r\n      lastUpdated: now.toISOString()\r\n    }\r\n  }\r\n\r\n  // Generate enhanced market insights\r\n  private generateEnhancedMarketInsights(): MarketInsights {\r\n    const now = new Date()\r\n    \r\n    return {\r\n      skillDemand: [\r\n        { skill: 'AI/Machine Learning', demand: 94.7, growth: 156.3 },\r\n        { skill: 'Cloud Architecture', demand: 91.2, growth: 134.7 },\r\n        { skill: 'Cybersecurity', demand: 89.8, growth: 128.9 },\r\n        { skill: 'Data Analysis', demand: 87.4, growth: 119.2 },\r\n        { skill: 'DevOps', demand: 84.9, growth: 112.6 },\r\n        { skill: 'Full-Stack Development', demand: 82.3, growth: 98.4 },\r\n        { skill: 'Digital Marketing', demand: 78.7, growth: 87.9 },\r\n        { skill: 'UX Design', demand: 76.2, growth: 82.1 }\r\n      ],\r\n      industryTrends: [\r\n        { \r\n          industry: 'Technology', \r\n          skills: ['AI/ML', 'Cloud Computing', 'Cybersecurity'], \r\n          growth: 145.7 \r\n        },\r\n        { \r\n          industry: 'Healthcare', \r\n          skills: ['Data Analysis', 'Digital Health', 'Telemedicine'], \r\n          growth: 123.4 \r\n        },\r\n        { \r\n          industry: 'Finance', \r\n          skills: ['Blockchain', 'FinTech', 'Risk Analysis'], \r\n          growth: 118.9 \r\n        },\r\n        { \r\n          industry: 'Education', \r\n          skills: ['EdTech', 'Online Learning', 'Digital Pedagogy'], \r\n          growth: 134.2 \r\n        }\r\n      ],\r\n      certificationValue: [\r\n        { cert: 'AWS Certified Solutions Architect', value: 98.7, popularity: 87.3 },\r\n        { cert: 'Google Cloud Professional', value: 96.2, popularity: 82.1 },\r\n        { cert: 'Certified Ethical Hacker', value: 94.8, popularity: 76.4 },\r\n        { cert: 'PMP Certification', value: 91.3, popularity: 89.7 },\r\n        { cert: 'Cisco CCNA', value: 88.9, popularity: 78.2 }\r\n      ],\r\n      lastUpdated: now.toISOString()\r\n    }\r\n  }\r\n\r\n  // Get time-based activity multiplier\r\n  private getTimeBasedMultiplier(hour: number, dayOfWeek: number): number {\r\n    // Peak hours: 9-11 AM, 2-4 PM, 7-9 PM\r\n    let hourMultiplier = 0.7 // Base activity\r\n    \r\n    if ((hour >= 9 && hour <= 11) || (hour >= 14 && hour <= 16) || (hour >= 19 && hour <= 21)) {\r\n      hourMultiplier = 1.2 // Peak hours\r\n    } else if (hour >= 6 && hour <= 23) {\r\n      hourMultiplier = 1.0 // Normal hours\r\n    }\r\n    \r\n    // Weekend vs weekday\r\n    const dayMultiplier = (dayOfWeek === 0 || dayOfWeek === 6) ? 0.8 : 1.0\r\n    \r\n    return hourMultiplier * dayMultiplier\r\n  }\r\n\r\n  // Generate realistic peak hours data\r\n  private generatePeakHours(): Array<{ hour: number; activity: number }> {\r\n    const peakHours = []\r\n    for (let hour = 0; hour < 24; hour++) {\r\n      let activity = 30 // Base activity\r\n      \r\n      // Morning peak (9-11 AM)\r\n      if (hour >= 9 && hour <= 11) activity = 85 + Math.random() * 10\r\n      // Afternoon peak (2-4 PM)\r\n      else if (hour >= 14 && hour <= 16) activity = 90 + Math.random() * 10\r\n      // Evening peak (7-9 PM)\r\n      else if (hour >= 19 && hour <= 21) activity = 95 + Math.random() * 10\r\n      // Normal hours\r\n      else if (hour >= 6 && hour <= 23) activity = 60 + Math.random() * 20\r\n      // Night hours\r\n      else activity = 20 + Math.random() * 15\r\n      \r\n      peakHours.push({ hour, activity: Math.floor(activity) })\r\n    }\r\n    return peakHours\r\n  }\r\n\r\n  // Generate weekly trends\r\n  private generateWeeklyTrends(): Array<{ day: string; sessions: number }> {\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n    const baseSessions = [8500, 9200, 9800, 9500, 8900, 7200, 6800] // Realistic weekly pattern\r\n    \r\n    return days.map((day, index) => ({\r\n      day,\r\n      sessions: Math.floor(baseSessions[index] + (Math.random() * 1000 - 500))\r\n    }))\r\n  }\r\n\r\n  // Placeholder methods for real API calls\r\n  private async fetchEducationalTrendsFromAPIs(): Promise<EducationalTrends | null> {\r\n    // Implement real API calls to educational research databases\r\n    return null\r\n  }\r\n\r\n  private async fetchLiveMetricsFromAPIs(): Promise<LiveUserMetrics | null> {\r\n    // Implement real API calls to analytics services\r\n    return null\r\n  }\r\n\r\n  private async fetchMarketInsightsFromAPIs(): Promise<MarketInsights | null> {\r\n    // Implement real API calls to job market APIs (LinkedIn, Indeed, etc.)\r\n    return null\r\n  }\r\n\r\n  // Start real-time updates with reference counting\r\n  startRealTimeUpdates(): () => void {\r\n    this.activeInstances++\r\n    \r\n    // Only start interval if this is the first instance\r\n    if (this.activeInstances === 1 && !this.intervalId) {\r\n      this.intervalId = setInterval(async () => {\r\n        try {\r\n          const [globalStats, trends, liveMetrics, marketInsights] = await Promise.all([\r\n            this.getGlobalLearningStats(),\r\n            this.getEducationalTrends(),\r\n            this.getLiveUserMetrics(),\r\n            this.getMarketInsights()\r\n          ])\r\n\r\n          // Notify all subscribers with fresh data\r\n          this.notify('globalStats', globalStats)\r\n          this.notify('educationalTrends', trends)\r\n          this.notify('liveMetrics', liveMetrics)\r\n          this.notify('marketInsights', marketInsights)\r\n        } catch (error) {\r\n          console.error('Error updating real-time data:', error)\r\n        }\r\n      }, this.updateInterval)\r\n    }\r\n\r\n    // Return cleanup function\r\n    return () => {\r\n      this.stopRealTimeUpdates()\r\n    }\r\n  }\r\n\r\n  // Stop real-time updates with reference counting\r\n  stopRealTimeUpdates(): void {\r\n    this.activeInstances = Math.max(0, this.activeInstances - 1)\r\n    \r\n    // Only stop interval when no more active instances\r\n    if (this.activeInstances === 0 && this.intervalId) {\r\n      clearInterval(this.intervalId)\r\n      this.intervalId = null\r\n    }\r\n  }\r\n\r\n  // Force stop all real-time updates (for cleanup)\r\n  forceStopRealTimeUpdates(): void {\r\n    this.activeInstances = 0\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId)\r\n      this.intervalId = null\r\n    }\r\n    // Clear all subscriptions\r\n    this.subscribers.clear()\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const realTimeDataService = new RealTimeDataService()","import axios from 'axios';\nimport { UnifiedSessionState, CardSelectionResult, EnhancedResponseLog } from '../../../shared/types/enhanced-types';\n\nconst apiClient = axios.create({\n  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3001/api',\n  withCredentials: true,\n});\n\nexport const uamsApiService = {\n  async initializeSession(userId: string, deckId: string): Promise<UnifiedSessionState> {\n    const response = await apiClient.post('/uams/session/initialize', { userId, deckId });\n    return response.data;\n  },\n\n  async getNextCard(sessionState: UnifiedSessionState): Promise<CardSelectionResult> {\n    const response = await apiClient.post('/uams/session/next-card', { sessionState });\n    return response.data;\n  },\n\n  async processCardResponse(sessionState: UnifiedSessionState, cardId: string, response: EnhancedResponseLog): Promise<UnifiedSessionState> {\n    const apiResponse = await apiClient.post('/uams/session/response', { sessionState, cardId, response });\n    return apiResponse.data;\n  },\n};\n","import { UnifiedSessionState, UnifiedCard, CardSelectionResult, EnhancedResponseLog, SessionContext, UserProfile } from '../../../shared/types/enhanced-types';\nimport { uamsApiService } from './uamsApiService';\n\nexport interface QueueManagerConfig {\n  lookaheadBufferSize: number;\n  emergencyBufferSize: number;\n  challengeReserveSize: number;\n  refreshThreshold: number;\n  maxSessionDurationMinutes: number;\n  adaptiveRefreshInterval: number;\n}\n\nexport interface BufferMetrics {\n  lookaheadUtilization: number;\n  emergencyBufferHealth: number;\n  challengeReserveReadiness: number;\n  overallQueueHealth: number;\n}\n\nexport class UnifiedQueueManager {\n  private config: QueueManagerConfig;\n\n  constructor(config: Partial<QueueManagerConfig> = {}) {\n    this.config = {\n      lookaheadBufferSize: 10,\n      emergencyBufferSize: 5,\n      challengeReserveSize: 5,\n      refreshThreshold: 3,\n      maxSessionDurationMinutes: 120,\n      adaptiveRefreshInterval: 5000,\n      ...config\n    };\n  }\n\n  /**\n   * Initialize a new study session\n   */\n  async initializeSession(userId: string, deckId: string): Promise<UnifiedSessionState> {\n    return uamsApiService.initializeSession(userId, deckId);\n  }\n\n  /**\n   * Get the next card for review\n   */\n  async getNextCard(sessionState: UnifiedSessionState): Promise<CardSelectionResult> {\n    return uamsApiService.getNextCard(sessionState);\n  }\n\n  /**\n   * Process user response and update session state\n   */\n  async processCardResponse(\n    sessionState: UnifiedSessionState,\n    cardId: string,\n    response: EnhancedResponseLog\n  ): Promise<UnifiedSessionState> {\n    return uamsApiService.processCardResponse(sessionState, cardId, response);\n  }\n}","import { EnvironmentalContext, SessionContext } from '../../../../shared/types/enhanced-types';\r\n\r\nexport interface DetectedContext extends EnvironmentalContext {\r\n  confidence: number; // 0-1 confidence in detection accuracy\r\n  detectionMethod: string; // How the context was detected\r\n  timestamp: string;\r\n}\r\n\r\nexport interface ContextualInsights {\r\n  optimalStudyConditions: EnvironmentalContext;\r\n  currentConditionScore: number; // 0-1 how optimal current conditions are\r\n  improvementSuggestions: string[];\r\n  historicalPerformance: PerformanceByContext[];\r\n}\r\n\r\nexport interface PerformanceByContext {\r\n  context: Partial<EnvironmentalContext>;\r\n  averageAccuracy: number;\r\n  averageResponseTime: number;\r\n  sessionCount: number;\r\n  confidenceInterval: [number, number];\r\n}\r\n\r\nexport interface EnvironmentalAdaptation {\r\n  difficultyAdjustment: number; // Adjustment based on environment (-3 to +3)\r\n  recommendedBreakFrequency: number; // Minutes between suggested breaks\r\n  visualOptimizations: {\r\n    contrastAdjustment: number; // -1 to +1\r\n    fontSizeAdjustment: number; // -1 to +1 (relative)\r\n    colorScheme: 'light' | 'dark' | 'auto';\r\n  };\r\n  audioOptimizations: {\r\n    enableSoundEffects: boolean;\r\n    volumeAdjustment: number; // 0-1\r\n  };\r\n}\r\n\r\nexport class EnvironmentalContextService {\r\n  private contextHistory: DetectedContext[] = [];\r\n  private performanceCache: Map<string, PerformanceByContext> = new Map();\r\n\r\n  /**\r\n   * Get comprehensive current environmental context\r\n   */\r\n  async getCurrentContext(): Promise<DetectedContext> {\r\n    const context: EnvironmentalContext = {\r\n      device: this.detectDevice(),\r\n      networkQuality: await this.assessNetworkQuality(),\r\n    };\r\n    \r\n    let confidence = 0.9; // Base confidence\r\n\r\n    // Enhanced mobile detection with additional context\r\n    if (context.device === 'mobile') {\r\n      try {\r\n        context.batteryLevel = await this.getBatteryLevel();\r\n        if (context.batteryLevel !== undefined) confidence += 0.05;\r\n      } catch (error) {\r\n        console.warn('Battery level detection failed:', error);\r\n      }\r\n    }\r\n\r\n    // Ambient conditions detection\r\n    try {\r\n      context.ambientNoise = await this.detectAmbientNoise();\r\n      context.lighting = await this.detectLightingConditions();\r\n      confidence += 0.05;\r\n    } catch (error) {\r\n      console.warn('Ambient conditions detection failed:', error);\r\n      confidence -= 0.1;\r\n    }\r\n\r\n    const detectedContext: DetectedContext = {\r\n      ...context,\r\n      confidence: Math.max(0.5, confidence),\r\n      detectionMethod: 'multi-sensor-fusion',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    // Store in history\r\n    this.contextHistory.push(detectedContext);\r\n    if (this.contextHistory.length > 100) {\r\n      this.contextHistory.shift(); // Keep only last 100 entries\r\n    }\r\n\r\n    return detectedContext;\r\n  }\r\n\r\n  /**\r\n   * Detect device type with enhanced accuracy\r\n   */\r\n  private detectDevice(): 'mobile' | 'desktop' | 'tablet' {\r\n    const userAgent = navigator.userAgent.toLowerCase();\r\n    const platform = navigator.platform?.toLowerCase() || '';\r\n    \r\n    // Check for mobile indicators\r\n    const mobileKeywords = ['mobile', 'android', 'iphone', 'ipod', 'blackberry', 'windows phone'];\r\n    const isMobile = mobileKeywords.some(keyword => userAgent.includes(keyword));\r\n    \r\n    // Check for tablet indicators\r\n    const tabletKeywords = ['ipad', 'tablet', 'kindle', 'playbook', 'silk'];\r\n    const isTablet = tabletKeywords.some(keyword => userAgent.includes(keyword));\r\n    \r\n    // Enhanced detection using screen size and touch capabilities\r\n    const screenWidth = window.screen.width;\r\n    const screenHeight = window.screen.height;\r\n    const maxDimension = Math.max(screenWidth, screenHeight);\r\n    const minDimension = Math.min(screenWidth, screenHeight);\r\n    \r\n    const hasTouchScreen = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\r\n    \r\n    if (isTablet || (hasTouchScreen && minDimension >= 768 && maxDimension >= 1024)) {\r\n      return 'tablet';\r\n    }\r\n    \r\n    if (isMobile || (hasTouchScreen && maxDimension <= 736)) {\r\n      return 'mobile';\r\n    }\r\n    \r\n    // Additional checks for desktop\r\n    const isDesktop = platform.includes('win') || platform.includes('mac') || platform.includes('linux');\r\n    \r\n    return isDesktop || !hasTouchScreen ? 'desktop' : 'mobile';\r\n  }\r\n\r\n  /**\r\n   * Assess network quality with multiple metrics\r\n   */\r\n  private async assessNetworkQuality(): Promise<'excellent' | 'good' | 'poor' | 'offline'> {\r\n    if (!navigator.onLine) return 'offline';\r\n    \r\n    try {\r\n      // Use Connection API if available (Chrome/Edge)\r\n      const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\r\n      \r\n      if (connection) {\r\n        const effectiveType = connection.effectiveType;\r\n        const downlink = connection.downlink;\r\n        const rtt = connection.rtt;\r\n        \r\n        // Advanced classification based on multiple metrics\r\n        if (effectiveType === '4g' && downlink > 10 && rtt < 100) {\r\n          return 'excellent';\r\n        } else if ((effectiveType === '4g' || effectiveType === '3g') && downlink > 2 && rtt < 300) {\r\n          return 'good';\r\n        } else if (downlink > 0.5 && rtt < 1000) {\r\n          return 'good';\r\n        } else {\r\n          return 'poor';\r\n        }\r\n      }\r\n      \r\n      // Fallback: Performance-based detection\r\n      return await this.performLatencyTest();\r\n    } catch (error) {\r\n      console.warn('Network quality assessment failed:', error);\r\n      return 'good'; // Default assumption\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform latency test for network quality\r\n   */\r\n  private async performLatencyTest(): Promise<'excellent' | 'good' | 'poor'> {\r\n    try {\r\n      const startTime = performance.now();\r\n      \r\n      // Test with a small request to avoid affecting user experience\r\n      const response = await fetch('/api/ping', { \r\n        method: 'HEAD',\r\n        cache: 'no-cache' \r\n      });\r\n      \r\n      const endTime = performance.now();\r\n      const latency = endTime - startTime;\r\n      \r\n      if (!response.ok) {\r\n        return 'poor';\r\n      }\r\n      \r\n      if (latency < 100) {\r\n        return 'excellent';\r\n      } else if (latency < 300) {\r\n        return 'good';\r\n      } else {\r\n        return 'poor';\r\n      }\r\n    } catch (error) {\r\n      console.warn('Latency test failed:', error);\r\n      return 'poor';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get battery level for mobile devices\r\n   */\r\n  private async getBatteryLevel(): Promise<number | undefined> {\r\n    try {\r\n      // Modern Battery API\r\n      const battery = await (navigator as any).getBattery?.();\r\n      if (battery && typeof battery.level === 'number') {\r\n        return battery.level;\r\n      }\r\n      \r\n      // Fallback methods for older devices\r\n      const batteryManager = (navigator as any).battery || (navigator as any).mozBattery || (navigator as any).webkitBattery;\r\n      if (batteryManager && typeof batteryManager.level === 'number') {\r\n        return batteryManager.level;\r\n      }\r\n      \r\n      return undefined;\r\n    } catch (error) {\r\n      console.warn('Battery level detection failed:', error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect ambient noise level using audio API\r\n   */\r\n  private async detectAmbientNoise(): Promise<'quiet' | 'moderate' | 'noisy' | undefined> {\r\n    try {\r\n      // Request microphone access for noise detection\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\r\n      \r\n      return new Promise<'quiet' | 'moderate' | 'noisy' | undefined>((resolve) => {\r\n        const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n        const analyser = audioContext.createAnalyser();\r\n        const microphone = audioContext.createMediaStreamSource(stream);\r\n        \r\n        microphone.connect(analyser);\r\n        analyser.fftSize = 256;\r\n        \r\n        const bufferLength = analyser.frequencyBinCount;\r\n        const dataArray = new Uint8Array(bufferLength);\r\n        \r\n        let samples = 0;\r\n        let totalVolume = 0;\r\n        const maxSamples = 30; // Sample for 1 second at ~30fps\r\n        \r\n        const checkVolume = () => {\r\n          analyser.getByteFrequencyData(dataArray);\r\n          \r\n          const volume = dataArray.reduce((sum, value) => sum + value, 0) / bufferLength;\r\n          totalVolume += volume;\r\n          samples++;\r\n          \r\n          if (samples < maxSamples) {\r\n            setTimeout(checkVolume, 33); // ~30fps sampling\r\n          } else {\r\n            // Clean up\r\n            stream.getTracks().forEach(track => track.stop());\r\n            audioContext.close();\r\n            \r\n            const averageVolume = totalVolume / samples;\r\n            \r\n            // Classify noise level\r\n            if (averageVolume < 20) {\r\n              resolve('quiet');\r\n            } else if (averageVolume < 60) {\r\n              resolve('moderate');\r\n            } else {\r\n              resolve('noisy');\r\n            }\r\n          }\r\n        };\r\n        \r\n        checkVolume();\r\n      });\r\n    } catch (error) {\r\n      // Microphone access denied or not available\r\n      console.warn('Ambient noise detection failed:', error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect lighting conditions using camera or screen brightness\r\n   */\r\n  private async detectLightingConditions(): Promise<'optimal' | 'dim' | 'bright' | undefined> {\r\n    try {\r\n      // Method 1: Screen brightness detection (if supported)\r\n      if ('screen' in navigator && 'brightness' in (navigator.screen as any)) {\r\n        const brightness = (navigator.screen as any).brightness;\r\n        if (brightness < 0.3) return 'dim';\r\n        if (brightness > 0.8) return 'bright';\r\n        return 'optimal';\r\n      }\r\n      \r\n      // Method 2: Camera-based ambient light detection\r\n      return await this.detectLightingViaCamera();\r\n    } catch (error) {\r\n      console.warn('Lighting detection failed:', error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect lighting via camera sensor\r\n   */\r\n  private async detectLightingViaCamera(): Promise<'optimal' | 'dim' | 'bright' | undefined> {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });\r\n      \r\n      return new Promise<'optimal' | 'dim' | 'bright' | undefined>((resolve) => {\r\n        const video = document.createElement('video');\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        video.srcObject = stream;\r\n        video.play();\r\n        \r\n        video.addEventListener('loadedmetadata', () => {\r\n          canvas.width = video.videoWidth;\r\n          canvas.height = video.videoHeight;\r\n          \r\n          // Capture a frame after a short delay\r\n          setTimeout(() => {\r\n            if (ctx) {\r\n              ctx.drawImage(video, 0, 0);\r\n              const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n              \r\n              // Calculate average brightness\r\n              let totalBrightness = 0;\r\n              const pixels = imageData.data;\r\n              \r\n              for (let i = 0; i < pixels.length; i += 4) {\r\n                const r = pixels[i];\r\n                const g = pixels[i + 1];\r\n                const b = pixels[i + 2];\r\n                \r\n                // Calculate luminance\r\n                const luminance = 0.299 * r + 0.587 * g + 0.114 * b;\r\n                totalBrightness += luminance;\r\n              }\r\n              \r\n              const averageBrightness = totalBrightness / (pixels.length / 4);\r\n              \r\n              // Clean up\r\n              stream.getTracks().forEach(track => track.stop());\r\n              \r\n              // Classify lighting\r\n              if (averageBrightness < 50) {\r\n                resolve('dim');\r\n              } else if (averageBrightness > 200) {\r\n                resolve('bright');\r\n              } else {\r\n                resolve('optimal');\r\n              }\r\n            }\r\n          }, 500);\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.warn('Camera-based lighting detection failed:', error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze contextual insights from historical data\r\n   */\r\n  analyzeContextualInsights(performanceHistory: any[]): ContextualInsights {\r\n    // Group performance by environmental factors\r\n    const contextGroups = this.groupPerformanceByContext(performanceHistory);\r\n    \r\n    // Find optimal conditions\r\n    const optimalConditions = this.findOptimalConditions(contextGroups);\r\n    \r\n    // Score current conditions\r\n    const currentContext = this.contextHistory[this.contextHistory.length - 1];\r\n    const currentScore = this.scoreCurrentConditions(currentContext, optimalConditions);\r\n    \r\n    // Generate improvement suggestions\r\n    const suggestions = this.generateImprovementSuggestions(currentContext, optimalConditions);\r\n    \r\n    return {\r\n      optimalStudyConditions: optimalConditions,\r\n      currentConditionScore: currentScore,\r\n      improvementSuggestions: suggestions,\r\n      historicalPerformance: Array.from(contextGroups.values())\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get environmental adaptation recommendations\r\n   */\r\n  getEnvironmentalAdaptations(context: EnvironmentalContext): EnvironmentalAdaptation {\r\n    let difficultyAdjustment = 0;\r\n    let breakFrequency = 25; // Default pomodoro technique\r\n    \r\n    const visualOpts = {\r\n      contrastAdjustment: 0,\r\n      fontSizeAdjustment: 0,\r\n      colorScheme: 'auto' as const\r\n    };\r\n    \r\n    const audioOpts = {\r\n      enableSoundEffects: true,\r\n      volumeAdjustment: 0.7\r\n    };\r\n\r\n    // Device-based adaptations\r\n    switch (context.device) {\r\n      case 'mobile':\r\n        difficultyAdjustment -= 0.5; // Slightly easier on mobile\r\n        breakFrequency = 20; // More frequent breaks\r\n        visualOpts.fontSizeAdjustment = 0.2; // Larger text\r\n        break;\r\n        \r\n      case 'tablet':\r\n        breakFrequency = 30;\r\n        visualOpts.fontSizeAdjustment = 0.1;\r\n        break;\r\n        \r\n      case 'desktop':\r\n        breakFrequency = 45; // Longer sessions on desktop\r\n        break;\r\n    }\r\n\r\n    // Network quality adaptations\r\n    switch (context.networkQuality) {\r\n      case 'poor':\r\n      case 'offline':\r\n        difficultyAdjustment -= 1.0; // Significantly easier for poor connection\r\n        audioOpts.enableSoundEffects = false; // Disable to reduce data usage\r\n        break;\r\n        \r\n      case 'good':\r\n        difficultyAdjustment -= 0.2;\r\n        break;\r\n    }\r\n\r\n    // Battery level adaptations (mobile)\r\n    if (context.batteryLevel !== undefined && context.batteryLevel < 0.3) {\r\n      difficultyAdjustment -= 0.5; // Easier when battery is low\r\n      breakFrequency = 15; // More frequent breaks to reduce usage\r\n      visualOpts.colorScheme = 'dark'; // Dark mode saves battery\r\n    }\r\n\r\n    // Ambient noise adaptations\r\n    switch (context.ambientNoise) {\r\n      case 'noisy':\r\n        difficultyAdjustment -= 0.3; // Harder to concentrate in noise\r\n        audioOpts.enableSoundEffects = false; // Disable competing audio\r\n        break;\r\n        \r\n      case 'quiet':\r\n        audioOpts.volumeAdjustment = 0.5; // Lower volume in quiet environments\r\n        break;\r\n    }\r\n\r\n    // Lighting adaptations\r\n    switch (context.lighting) {\r\n      case 'dim':\r\n        visualOpts.contrastAdjustment = 0.3; // Higher contrast\r\n        visualOpts.colorScheme = 'dark'; // Better for dim environments\r\n        difficultyAdjustment -= 0.2; // Slightly easier in poor lighting\r\n        break;\r\n        \r\n      case 'bright':\r\n        visualOpts.contrastAdjustment = -0.2; // Lower contrast\r\n        visualOpts.colorScheme = 'light'; // Better for bright environments\r\n        break;\r\n        \r\n      case 'optimal':\r\n        // No adjustments needed\r\n        break;\r\n    }\r\n\r\n    return {\r\n      difficultyAdjustment: Math.max(-3, Math.min(3, difficultyAdjustment)),\r\n      recommendedBreakFrequency: breakFrequency,\r\n      visualOptimizations: visualOpts,\r\n      audioOptimizations: audioOpts\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Track context changes and notify of significant changes\r\n   */\r\n  async trackContextChanges(): Promise<void> {\r\n    const previousContext = this.contextHistory[this.contextHistory.length - 1];\r\n    const currentContext = await this.getCurrentContext();\r\n    \r\n    if (previousContext && this.hasSignificantContextChange(previousContext, currentContext)) {\r\n      // Emit context change event\r\n      this.onContextChange?.(currentContext, previousContext);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check for significant context changes\r\n   */\r\n  private hasSignificantContextChange(previous: DetectedContext, current: DetectedContext): boolean {\r\n    // Device change (rare but significant)\r\n    if (previous.device !== current.device) return true;\r\n    \r\n    // Network quality change\r\n    if (previous.networkQuality !== current.networkQuality) return true;\r\n    \r\n    // Battery level change > 20%\r\n    if (previous.batteryLevel && current.batteryLevel) {\r\n      if (Math.abs(previous.batteryLevel - current.batteryLevel) > 0.2) return true;\r\n    }\r\n    \r\n    // Ambient conditions change\r\n    if (previous.ambientNoise !== current.ambientNoise) return true;\r\n    if (previous.lighting !== current.lighting) return true;\r\n    \r\n    return false;\r\n  }\r\n\r\n  // Helper methods for contextual analysis\r\n\r\n  private groupPerformanceByContext(performanceHistory: any[]): Map<string, PerformanceByContext> {\r\n    const groups = new Map<string, PerformanceByContext>();\r\n    \r\n    // This would group performance data by environmental context\r\n    // Implementation would depend on your performance data structure\r\n    \r\n    return groups;\r\n  }\r\n\r\n  private findOptimalConditions(contextGroups: Map<string, PerformanceByContext>): EnvironmentalContext {\r\n    // Analyze performance groups to find optimal conditions\r\n    // This is a simplified version - real implementation would be more sophisticated\r\n    \r\n    return {\r\n      device: 'desktop', // Generally best performance\r\n      networkQuality: 'excellent',\r\n      batteryLevel: undefined, // Not applicable for optimal\r\n      ambientNoise: 'quiet',\r\n      lighting: 'optimal'\r\n    };\r\n  }\r\n\r\n  private scoreCurrentConditions(current: DetectedContext | undefined, optimal: EnvironmentalContext): number {\r\n    if (!current) return 0.5;\r\n    \r\n    let score = 1.0;\r\n    \r\n    // Score each factor\r\n    if (current.device !== optimal.device) score -= 0.1;\r\n    if (current.networkQuality !== optimal.networkQuality) {\r\n      score -= current.networkQuality === 'poor' ? 0.3 : 0.1;\r\n    }\r\n    if (current.ambientNoise !== optimal.ambientNoise) score -= 0.15;\r\n    if (current.lighting !== optimal.lighting) score -= 0.1;\r\n    \r\n    // Battery penalty for mobile\r\n    if (current.device === 'mobile' && current.batteryLevel && current.batteryLevel < 0.3) {\r\n      score -= 0.2;\r\n    }\r\n    \r\n    return Math.max(0, score);\r\n  }\r\n\r\n  private generateImprovementSuggestions(current: DetectedContext | undefined, optimal: EnvironmentalContext): string[] {\r\n    const suggestions: string[] = [];\r\n    \r\n    if (!current) return suggestions;\r\n    \r\n    if (current.networkQuality === 'poor') {\r\n      suggestions.push('Consider switching to a better network connection for optimal performance');\r\n    }\r\n    \r\n    if (current.ambientNoise === 'noisy') {\r\n      suggestions.push('Find a quieter environment or use noise-canceling headphones');\r\n    }\r\n    \r\n    if (current.lighting === 'dim') {\r\n      suggestions.push('Improve lighting conditions for better visual clarity');\r\n    } else if (current.lighting === 'bright') {\r\n      suggestions.push('Reduce screen glare or move to a less bright environment');\r\n    }\r\n    \r\n    if (current.device === 'mobile' && current.batteryLevel && current.batteryLevel < 0.3) {\r\n      suggestions.push('Charge your device or switch to a desktop for longer study sessions');\r\n    }\r\n    \r\n    return suggestions;\r\n  }\r\n\r\n  // Event handler for context changes (can be overridden)\r\n  public onContextChange?: (current: DetectedContext, previous: DetectedContext) => void;\r\n}"],"names":["DEMO_USER_STATS","DEMO_ACHIEVEMENTS","ENHANCED_MONTHLY_CHALLENGES","DEMO_CHALLENGES","DEMO_LEADERBOARD","UserDataService","user","debugLogger","userRecord","pb","pocketbaseError","response","data","apiError","days","error","stats","activity","achievements","challenges","performance","userHash","daysSinceJoin","activities","i","date","dayHash","baseAchievements","challenge","progressHash","userScore","userRank","leaderboard","str","hash","char","userDataService","RealTimeDataService","dataType","callback","callbacks","index","trends","metrics","insights","_data","fetchers","successfulResults","fetcher","result","sources","now","hour","dayOfWeek","timeMultiplier","hourMultiplier","peakHours","baseSessions","day","globalStats","liveMetrics","marketInsights","realTimeDataService","apiClient","axios","uamsApiService","userId","deckId","sessionState","cardId","UnifiedQueueManager","config","EnvironmentalContextService","context","confidence","detectedContext","userAgent","platform","isMobile","keyword","isTablet","screenWidth","screenHeight","maxDimension","minDimension","hasTouchScreen","connection","effectiveType","downlink","rtt","startTime","latency","battery","batteryManager","stream","resolve","audioContext","analyser","bufferLength","dataArray","samples","totalVolume","maxSamples","checkVolume","volume","sum","value","track","averageVolume","brightness","video","canvas","ctx","imageData","totalBrightness","pixels","r","g","b","luminance","averageBrightness","performanceHistory","contextGroups","optimalConditions","currentContext","currentScore","suggestions","difficultyAdjustment","breakFrequency","visualOpts","audioOpts","previousContext","previous","current","optimal","score"],"mappings":"8FAkGA,MAAMA,EAA6B,CACjC,QAAS,KACT,MAAO,EACP,eAAgB,IAChB,YAAa,IACb,aAAc,KACd,UAAW,KACX,SAAU,KACV,cAAe,GACf,cAAe,GACf,MAAO,IACP,KAAM,GACN,cAAe,IAAI,KAAA,EAAO,YAAA,EAC1B,SAAU,IAAI,KAAK,KAAK,IAAA,EAAQ,IAAU,GAAK,GAAK,GAAI,EAAE,YAAA,CAC5D,EAEMC,EAAuC,CAC3C,CACE,GAAI,cACJ,KAAM,cACN,YAAa,oCACb,KAAM,KACN,WAAY,IAAI,KAAK,KAAK,IAAA,EAAQ,IAAU,GAAK,GAAK,GAAI,EAAE,YAAA,EAC5D,SAAU,OAAA,EAEZ,CACE,GAAI,cACJ,KAAM,eACN,YAAa,4BACb,KAAM,KACN,WAAY,IAAI,KAAK,KAAK,IAAA,EAAQ,MAAe,GAAK,GAAI,EAAE,YAAA,EAC5D,SAAU,QAAA,CAEd,EAGMC,EAA+C,CACnD,CACE,GAAI,kBACJ,KAAM,4BACN,YAAa,+EACb,KAAM,UACN,OAAQ,IACR,QAAS,IACT,OAAQ,CAAE,GAAI,KAAM,MAAO,IAAK,KAAM,EAAA,EACtC,UAAW,IAAI,KAAK,KAAK,IAAA,EAAQ,IAAU,GAAK,GAAK,GAAI,EAAE,YAAA,CAAY,EAEzE,CACE,GAAI,mBACJ,KAAM,mBACN,YAAa,2EACb,KAAM,UACN,OAAQ,IACR,QAAS,IACT,OAAQ,CAAE,GAAI,KAAM,MAAO,IAAK,KAAM,EAAA,EACtC,UAAW,IAAI,KAAK,KAAK,IAAA,EAAQ,IAAU,GAAK,GAAK,GAAI,EAAE,YAAA,CAAY,CAE3E,EAEMC,EAAmC,CACvC,CACE,GAAI,cACJ,KAAM,cACN,YAAa,uBACb,KAAM,QACN,OAAQ,GACR,QAAS,GACT,OAAQ,CAAE,GAAI,GAAI,MAAO,EAAA,EACzB,UAAW,IAAI,KAAK,KAAK,IAAA,EAAQ,KAAU,GAAK,GAAI,EAAE,YAAA,CAAY,EAEpE,CACE,GAAI,iBACJ,KAAM,iBACN,YAAa,4BACb,KAAM,SACN,OAAQ,IACR,QAAS,IACT,OAAQ,CAAE,GAAI,IAAK,MAAO,GAAI,KAAM,CAAA,EACpC,UAAW,IAAI,KAAK,KAAK,IAAA,EAAQ,KAAc,GAAK,GAAI,EAAE,YAAA,CAAY,EAExE,GAAGD,CACL,EAEME,EAAoC,CACxC,OAAQ,CACN,CAAE,OAAQ,QAAS,SAAU,cAAe,MAAO,KAAM,KAAM,EAAG,OAAQ,CAAA,EAC1E,CAAE,OAAQ,QAAS,SAAU,eAAgB,MAAO,KAAM,KAAM,EAAG,OAAQ,CAAA,EAC3E,CAAE,OAAQ,QAAS,SAAU,YAAa,MAAO,KAAM,KAAM,EAAG,OAAQ,EAAA,EACxE,CAAE,OAAQ,QAAS,SAAU,WAAY,MAAO,KAAM,KAAM,EAAG,OAAQ,CAAA,EACvE,CAAE,OAAQ,YAAa,SAAU,YAAa,MAAO,KAAM,KAAM,GAAI,OAAQ,CAAA,CAAE,EAEjF,QAAS,CACP,CAAE,OAAQ,UAAW,SAAU,aAAc,MAAO,KAAM,KAAM,EAAG,OAAQ,CAAA,EAC3E,CAAE,OAAQ,YAAa,SAAU,YAAa,MAAO,KAAM,KAAM,EAAG,OAAQ,CAAA,EAC5E,CAAE,OAAQ,UAAW,SAAU,cAAe,MAAO,KAAM,KAAM,EAAG,OAAQ,EAAA,CAAG,EAEjF,OAAQ,CACN,CAAE,OAAQ,QAAS,SAAU,cAAe,MAAO,IAAK,KAAM,EAAG,OAAQ,CAAA,EACzE,CAAE,OAAQ,YAAa,SAAU,YAAa,MAAO,IAAK,KAAM,EAAG,OAAQ,CAAA,CAAE,EAE/E,QAAS,CACP,CAAE,OAAQ,QAAS,SAAU,cAAe,MAAO,KAAM,KAAM,EAAG,OAAQ,CAAA,EAC1E,CAAE,OAAQ,YAAa,SAAU,YAAa,MAAO,KAAM,KAAM,GAAI,OAAQ,EAAA,CAAG,CAEpF,EAGO,MAAMC,CAAgB,CACnB,QAAU,OAGV,WAAWC,EAAkC,CACnD,OAAOA,EAAK,YAAc,QAAUA,EAAK,QAAU,sBACrD,CAGA,MAAM,aAAaA,EAA6C,CAM9D,GALAC,EAAY,IAAI,sBAAuB,uBAAwB,CAC7D,OAAQD,EAAK,GACb,WAAY,KAAK,WAAWA,CAAI,CAAA,CACjC,EAEG,KAAK,WAAWA,CAAI,EACtB,OAAAC,EAAY,IAAI,sBAAuB,2BAA2B,EAC3DP,EAIT,GAAI,CACFO,EAAY,IAAI,sBAAuB,gDAAgD,EAEvF,MAAMC,EAAa,MAAMC,EAAG,WAAW,OAAO,EAAE,OAAOH,EAAK,GAAI,CAC9D,OAAQ,2DAAA,CACT,EAED,OAAAC,EAAY,IAAI,sBAAuB,4CAA4C,EAG1D,CACvB,QAASC,EAAW,UAAY,EAChC,MAAOA,EAAW,OAAS,EAC3B,gBAAiBA,EAAW,UAAY,GAAK,IAC7C,YAAa,IACb,aAAc,EACd,UAAW,EACX,SAAU,GACV,cAAe,EACf,cAAe,EACf,MAAOA,EAAW,OAAS,IAC3B,KAAMA,EAAW,MAAQ,GACzB,cAAeA,EAAW,aAAe,IAAI,KAAA,EAAO,YAAA,EACpD,SAAUA,EAAW,SAAW,IAAI,KAAA,EAAO,YAAA,CAAY,CAI3D,OAASE,EAAiB,CACxBH,EAAY,KAAK,sBAAuB,oDAAqD,CAC3F,MAAOG,CAAA,CACR,EAGD,GAAI,CACF,MAAMC,EAAW,MAAM,MAAM,GAAG,KAAK,OAAO,UAAUL,EAAK,EAAE,SAAU,CACrE,QAAS,CACP,cAAiB,UAAUA,EAAK,KAAK,GACrC,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAACK,EAAS,GACZ,MAAM,IAAI,MAAM,0CAA0C,EAG5D,MAAMC,EAAO,MAAMD,EAAS,KAAA,EAC5B,OAAAJ,EAAY,IAAI,sBAAuB,0CAA0C,EAC1EK,CACT,OAASC,EAAU,CACjB,OAAAN,EAAY,KAAK,sBAAuB,uDAAwD,CAC9F,gBAAAG,EACA,SAAAG,CAAA,CACD,EAGM,KAAK,8BAA8BP,CAAI,CAChD,CACF,CACF,CAGA,MAAM,gBAAgBA,EAAyBQ,EAAe,GAA6B,CACzF,GAAI,KAAK,WAAWR,CAAI,EACtB,OAAO,KAAK,qBAAqBQ,CAAI,EAGvC,GAAI,CACF,MAAMH,EAAW,MAAM,MAAM,GAAG,KAAK,OAAO,UAAUL,EAAK,EAAE,kBAAkBQ,CAAI,GAAI,CACrF,QAAS,CACP,cAAiB,UAAUR,EAAK,KAAK,GACrC,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAACK,EAAS,GACZ,MAAM,IAAI,MAAM,+BAA+B,EAGjD,OAAO,MAAMA,EAAS,KAAA,CACxB,OAASI,EAAO,CACd,eAAQ,KAAK,uDAAwDA,CAAK,EACnE,KAAK,6BAA6BT,EAAMQ,CAAI,CACrD,CACF,CAGA,MAAM,oBAAoBR,EAAqD,CAC7E,GAAI,KAAK,WAAWA,CAAI,EACtB,OAAOL,EAGT,GAAI,CACF,MAAMU,EAAW,MAAM,MAAM,GAAG,KAAK,OAAO,UAAUL,EAAK,EAAE,gBAAiB,CAC5E,QAAS,CACP,cAAiB,UAAUA,EAAK,KAAK,GACrC,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAACK,EAAS,GACZ,MAAM,IAAI,MAAM,mCAAmC,EAGrD,OAAO,MAAMA,EAAS,KAAA,CACxB,OAASI,EAAO,CACd,eAAQ,KAAK,2DAA4DA,CAAK,EACvE,KAAK,iCAAiCT,CAAI,CACnD,CACF,CAGA,MAAM,kBAAkBA,EAAmD,CACzE,GAAI,KAAK,WAAWA,CAAI,EACtB,OAAOH,EAGT,GAAI,CACF,MAAMQ,EAAW,MAAM,MAAM,GAAG,KAAK,OAAO,UAAUL,EAAK,EAAE,cAAe,CAC1E,QAAS,CACP,cAAiB,UAAUA,EAAK,KAAK,GACrC,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAACK,EAAS,GACZ,MAAM,IAAI,MAAM,iCAAiC,EAGnD,OAAO,MAAMA,EAAS,KAAA,CACxB,OAASI,EAAO,CACd,eAAQ,KAAK,yDAA0DA,CAAK,EACrE,KAAK,+BAA+BT,CAAI,CACjD,CACF,CAGA,MAAM,mBAAmBA,EAAmD,CAC1E,GAAI,KAAK,WAAWA,CAAI,EACtB,OAAOF,EAGT,GAAI,CACF,MAAMO,EAAW,MAAM,MAAM,GAAG,KAAK,OAAO,eAAgB,CAC1D,QAAS,CACP,cAAiB,UAAUL,EAAK,KAAK,GACrC,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAACK,EAAS,GACZ,MAAM,IAAI,MAAM,kCAAkC,EAGpD,OAAO,MAAMA,EAAS,KAAA,CACxB,OAASI,EAAO,CACd,eAAQ,KAAK,0DAA2DA,CAAK,EACtE,KAAK,gCAAgCT,CAAI,CAClD,CACF,CAGA,MAAM,sBAAsBA,EAA0D,CACpF,GAAI,KAAK,WAAWA,CAAI,EACtB,OAAO,KAAK,+BAAA,EAGd,GAAI,CACF,MAAMK,EAAW,MAAM,MAAM,GAAG,KAAK,OAAO,UAAUL,EAAK,EAAE,eAAgB,CAC3E,QAAS,CACP,cAAiB,UAAUA,EAAK,KAAK,GACrC,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAACK,EAAS,GACZ,MAAM,IAAI,MAAM,qCAAqC,EAGvD,OAAO,MAAMA,EAAS,KAAA,CACxB,OAASI,EAAO,CACd,eAAQ,KAAK,6DAA8DA,CAAK,EACzE,KAAK,uCAAuCT,CAAI,CACzD,CACF,CAGA,MAAM,uBAAuBA,EAM1B,CACD,KAAM,CAACU,EAAOC,EAAUC,EAAcC,EAAYC,CAAW,EAAI,MAAM,QAAQ,IAAI,CACjF,KAAK,aAAad,CAAI,EACtB,KAAK,gBAAgBA,EAAM,EAAE,EAC7B,KAAK,oBAAoBA,CAAI,EAC7B,KAAK,kBAAkBA,CAAI,EAC3B,KAAK,sBAAsBA,CAAI,CAAA,CAChC,EAED,MAAO,CACL,MAAAU,EACA,SAAAC,EACA,aAAAC,EACA,WAAAC,EACA,YAAAC,CAAA,CAEJ,CAGA,MAAM,iBAAiBd,EAAwC,CAC7D,GAAI,MAAK,WAAWA,CAAI,EAKxB,GAAI,CASF,GAAI,EARa,MAAM,MAAM,GAAG,KAAK,OAAO,UAAUA,EAAK,EAAE,SAAU,CACrE,OAAQ,OACR,QAAS,CACP,cAAiB,UAAUA,EAAK,KAAK,GACrC,eAAgB,kBAAA,CAClB,CACD,GAEa,GACZ,MAAM,IAAI,MAAM,2BAA2B,CAE/C,OAASS,EAAO,CACd,QAAQ,KAAK,0CAA2CA,CAAK,CAG/D,CACF,CAGQ,8BAA8BT,EAAoC,CACxE,MAAMe,EAAW,KAAK,WAAWf,EAAK,KAAK,EACrCgB,EAAgB,KAAK,MAAMD,EAAW,EAAE,EAAI,EAElD,MAAO,CACL,QAAS,KAAK,MAAMA,EAAW,GAAI,EAAI,IACvC,MAAO,KAAK,MAAOA,EAAW,IAAQ,GAAG,EAAI,EAC7C,eAAgBA,EAAW,IAC3B,YAAa,IACb,aAAc,KAAK,MAAMA,EAAW,GAAG,EAAI,GAC3C,UAAW,KAAK,MAAMA,EAAW,IAAI,EAAI,GACzC,SAAU,GAAMA,EAAW,GAC3B,cAAe,KAAK,MAAMA,EAAW,EAAE,EAAI,EAC3C,cAAe,KAAK,MAAMA,EAAW,EAAE,EAAI,EAC3C,MAAO,KAAK,MAAMA,EAAW,GAAG,EAAI,GACpC,KAAM,KAAK,MAAMA,EAAW,EAAE,EAAI,EAClC,cAAe,IAAI,KAAA,EAAO,YAAA,EAC1B,SAAU,IAAI,KAAK,KAAK,IAAA,EAAQC,EAAgB,GAAK,GAAK,GAAK,GAAI,EAAE,YAAA,CAAY,CAErF,CAEQ,6BAA6BhB,EAAyBQ,EAA8B,CAC1F,MAAMS,EAA6B,CAAA,EAEnC,QAASC,EAAI,EAAGA,EAAIV,EAAMU,IAAK,CAC7B,MAAMC,EAAO,IAAI,KAAK,KAAK,IAAA,EAAQD,EAAI,GAAK,GAAK,GAAK,GAAI,EACpDE,EAAU,KAAK,WAAWpB,EAAK,MAAQmB,EAAK,cAAc,EAG5DC,EAAU,IAAM,GAEpBH,EAAW,KAAK,CACd,KAAME,EAAK,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,EACrC,aAAc,KAAK,MAAMC,EAAU,EAAE,EAAI,EACzC,UAAW,KAAK,MAAMA,EAAU,GAAG,EAAI,GACvC,SAAU,GAAMA,EAAU,GAC1B,SAAU,KAAK,MAAMA,EAAU,GAAG,EAAI,EAAA,CACvC,CACH,CAEA,OAAOH,EAAW,QAAA,CACpB,CAEQ,iCAAiCjB,EAA4C,CACnF,MAAMe,EAAW,KAAK,WAAWf,EAAK,KAAK,EACrCqB,EAAmB,CAAC,GAAG1B,CAAiB,EAG9C,OAAIoB,EAAW,IAAM,GACnBM,EAAiB,KAAK,CACpB,GAAI,kBACJ,KAAM,kBACN,YAAa,oCACb,KAAM,KACN,WAAY,IAAI,KAAK,KAAK,IAAA,EAAQ,KAAc,GAAK,GAAI,EAAE,YAAA,EAC3D,SAAU,UAAA,CACX,EAGIA,CACT,CAEQ,+BAA+BrB,EAA0C,CAE/E,MAAMa,EAAa,CAAC,GAAGhB,CAAe,EAGtC,OAAAgB,EAAW,QAAQS,GAAa,CAC9B,MAAMC,EAAe,KAAK,WAAWvB,EAAK,MAAQsB,EAAU,EAAE,EAC9DA,EAAU,QAAU,KAAK,MAAOC,EAAe,GAAM,IAAMD,EAAU,MAAM,CAC7E,CAAC,EAEMT,CACT,CAEQ,gCAAgCb,EAA0C,CAChF,MAAMe,EAAW,KAAK,WAAWf,EAAK,KAAK,EACrCwB,EAAY,KAAK,MAAMT,EAAW,GAAI,EAAI,IAC1CU,EAAW,KAAK,MAAMV,EAAW,EAAE,EAAI,EAEvCW,EAAc,CAAE,GAAG5B,CAAA,EAGzB,OAAA4B,EAAY,OAAO,KAAK,CACtB,OAAQ1B,EAAK,GACb,SAAUA,EAAK,SACf,MAAOwB,EACP,KAAMC,EACN,OAAQ,KAAK,MAAMV,EAAW,EAAE,EAAI,CAAA,CACrC,EAEMW,CACT,CAEQ,qBAAqBlB,EAA8B,CACzD,MAAMS,EAA6B,CAAA,EAEnC,QAASC,EAAI,EAAGA,EAAIV,EAAMU,IAAK,CAC7B,MAAMC,EAAO,IAAI,KAAK,KAAK,IAAA,EAAQD,EAAI,GAAK,GAAK,GAAK,GAAI,EAGtDA,EAAI,IAAM,GAEdD,EAAW,KAAK,CACd,KAAME,EAAK,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,EACrC,aAAc,KAAK,MAAM,KAAK,OAAA,EAAW,EAAE,EAAI,GAC/C,UAAW,KAAK,MAAM,KAAK,OAAA,EAAW,EAAE,EAAI,GAC5C,SAAU,GAAK,KAAK,MAAM,KAAK,OAAA,EAAW,EAAE,EAC5C,SAAU,KAAK,MAAM,KAAK,OAAA,EAAW,EAAE,EAAI,EAAA,CAC5C,CACH,CAEA,OAAOF,EAAW,QAAA,CACpB,CAEQ,gCAAyD,CAC/D,MAAO,CACL,eAAgB,CACd,aAAc,IACd,UAAW,IACX,SAAU,KACV,KAAM,GAAA,EAER,gBAAiB,CACf,aAAc,IACd,UAAW,KACX,eAAgB,CAAA,EAElB,aAAc,CACZ,cAAe,UACf,qBAAsB,GACtB,eAAgB,GAAA,CAClB,CAEJ,CAEQ,uCAAuCjB,EAAiD,CAC9F,MAAMe,EAAW,KAAK,WAAWf,EAAK,KAAK,EAE3C,MAAO,CACL,eAAgB,CACd,aAAc,KAAK,MAAMe,EAAW,GAAG,EAAI,GAC3C,UAAW,KAAK,MAAMA,EAAW,GAAG,EAAI,GACxC,SAAU,GAAMA,EAAW,GAC3B,KAAM,GAAA,EAER,gBAAiB,CACf,aAAc,KAAK,MAAMA,EAAW,GAAG,EAAI,IAC3C,UAAW,KAAK,MAAMA,EAAW,IAAI,EAAI,IACzC,eAAgB,KAAK,MAAMA,EAAW,EAAE,EAAI,CAAA,EAE9C,aAAc,CACZ,cAAe,CAAC,UAAW,YAAa,SAAS,EAAEA,EAAW,CAAC,EAC/D,qBAAsB,KAAK,MAAMA,EAAW,EAAE,EAAI,GAClD,eAAgB,EAAKA,EAAW,CAAA,CAClC,CAEJ,CAGQ,WAAWY,EAAqB,CACtC,IAAIC,EAAO,EACX,QAASV,EAAI,EAAGA,EAAIS,EAAI,OAAQT,IAAK,CACnC,MAAMW,EAAOF,EAAI,WAAWT,CAAC,EAC7BU,GAASA,GAAQ,GAAKA,EAAQC,EAC9BD,EAAOA,EAAOA,CAChB,CACA,OAAO,KAAK,IAAIA,CAAI,CACtB,CACF,CAGO,MAAME,EAAkB,IAAI/B,ECnlB5B,MAAMgC,CAAoB,CACvB,eAAyB,IACzB,gBAA4D,IAC5D,WAAoC,KACpC,gBAA0B,EAGlC,UAAuBC,EAAkBC,EAAyC,CAChF,OAAK,KAAK,YAAY,IAAID,CAAQ,GAChC,KAAK,YAAY,IAAIA,EAAU,CAAA,CAAE,EAEnC,KAAK,YAAY,IAAIA,CAAQ,EAAG,KAAKC,CAAmC,EAGjE,IAAM,CACX,MAAMC,EAAY,KAAK,YAAY,IAAIF,CAAQ,EAC/C,GAAIE,EAAW,CACb,MAAMC,EAAQD,EAAU,QAAQD,CAAmC,EAC/DE,EAAQ,IACVD,EAAU,OAAOC,EAAO,CAAC,CAE7B,CACF,CACF,CAGQ,OAAOH,EAAkB1B,EAAqB,CACpD,MAAM4B,EAAY,KAAK,YAAY,IAAIF,CAAQ,EAC3CE,GACFA,EAAU,QAAQD,GAAYA,EAAS3B,CAAI,CAAC,CAEhD,CAGA,MAAM,wBAAuD,CAC3D,GAAI,CAEF,MAAMI,EAAQ,MAAM,KAAK,yBAAyB,CAChD,IAAM,KAAK,qBAAA,EACX,IAAM,KAAK,wBAAA,EACX,IAAM,KAAK,qBAAA,EACX,IAAM,KAAK,4BAAA,CAA4B,CACxC,EAED,GAAIA,EACF,YAAK,OAAO,cAAeA,CAAK,EACzBA,CAEX,OAASD,EAAO,CACd,QAAQ,KAAK,+DAAgEA,CAAK,CACpF,CAGA,OAAO,KAAK,4BAAA,CACd,CAGA,MAAM,sBAAmD,CACvD,GAAI,CAEF,MAAM2B,EAAS,MAAM,KAAK,+BAAA,EAC1B,GAAIA,EACF,YAAK,OAAO,oBAAqBA,CAAM,EAChCA,CAEX,OAAS3B,EAAO,CACd,QAAQ,KAAK,qEAAsEA,CAAK,CAC1F,CAEA,OAAO,KAAK,kCAAA,CACd,CAGA,MAAM,oBAA+C,CACnD,GAAI,CAEF,MAAM4B,EAAU,MAAM,KAAK,yBAAA,EAC3B,GAAIA,EACF,YAAK,OAAO,cAAeA,CAAO,EAC3BA,CAEX,OAAS5B,EAAO,CACd,QAAQ,KAAK,+DAAgEA,CAAK,CACpF,CAEA,OAAO,KAAK,4BAAA,CACd,CAGA,MAAM,mBAA6C,CACjD,GAAI,CAEF,MAAM6B,EAAW,MAAM,KAAK,4BAAA,EAC5B,GAAIA,EACF,YAAK,OAAO,iBAAkBA,CAAQ,EAC/BA,CAEX,OAAS7B,EAAO,CACd,QAAQ,KAAK,kEAAmEA,CAAK,CACvF,CAEA,OAAO,KAAK,+BAAA,CACd,CAGA,MAAc,sBAAqE,CACjF,GAAI,CAGF,MAAMJ,EAAW,MAAM,MAAM,8DAA+D,CAC1F,OAAQ,MACR,QAAS,CAAE,OAAU,kBAAA,CAAmB,CACzC,EAED,GAAIA,EAAS,GAAI,CAEf,MAAMkC,EAAQ,MAAMlC,EAAS,KAAA,EAE7B,OAAO,IACT,CACF,OAASI,EAAO,CACd,QAAQ,IAAI,+BAAgCA,CAAK,CACnD,CACA,OAAO,IACT,CAGA,MAAc,yBAAwE,CACpF,GAAI,CAGF,OAAO,IACT,OAASA,EAAO,CACd,QAAQ,IAAI,mCAAoCA,CAAK,CACvD,CACA,OAAO,IACT,CAGA,MAAc,sBAAqE,CACjF,GAAI,CAGF,OAAO,IACT,OAASA,EAAO,CACd,QAAQ,IAAI,+BAAgCA,CAAK,CACnD,CACA,OAAO,IACT,CAGA,MAAc,6BAA4E,CACxF,GAAI,CAGF,OAAO,IACT,OAASA,EAAO,CACd,QAAQ,IAAI,uCAAwCA,CAAK,CAC3D,CACA,OAAO,IACT,CAGA,MAAc,yBAAyB+B,EAA2D,CAIhG,MAAMC,GAHU,MAAM,QAAQ,WAAWD,EAAS,IAAIE,GAAWA,EAAA,CAAS,CAAC,GAIxE,OAAOC,GAAUA,EAAO,SAAW,aAAeA,EAAO,KAAK,EAC9D,IAAIA,GAAWA,EAA2C,KAAK,EAElE,OAAIF,EAAkB,OAAS,EAEtB,KAAK,iBAAiBA,CAAiB,EAGzC,IACT,CAGQ,iBAAiBG,EAA6B,CAGpD,OAAOA,EAAQ,CAAC,CAClB,CAGQ,6BAAmD,CACzD,MAAMC,MAAU,KACVC,EAAOD,EAAI,SAAA,EACXE,EAAYF,EAAI,OAAA,EAGhBG,EAAiB,KAAK,uBAAuBF,EAAMC,CAAS,EAOlE,MAAO,CACL,cAAe,KAAK,MALD,SAKuB,KAAK,OAAA,EAAW,IAAO,IAAI,EACrE,kBAAmB,KAAK,MALH,SAK0BC,GAAkB,KAAK,OAAA,EAAW,IAAQ,IAAK,EAC9F,oBAAqB,KAAK,MALD,MAK4BA,GAAkB,KAAK,OAAA,EAAW,IAAO,IAAI,EAClG,sBAAuB,IAAM,KAAK,MAAM,KAAK,OAAA,EAAW,CAAC,EACzD,YAAa,CACX,CAAE,KAAM,UAAW,SAAU,KAAK,MAAM,OAASA,CAAc,CAAA,EAC/D,CAAE,KAAM,aAAc,SAAU,KAAK,MAAM,OAASA,CAAc,CAAA,EAClE,CAAE,KAAM,SAAU,SAAU,KAAK,MAAM,OAASA,CAAc,CAAA,EAC9D,CAAE,KAAM,SAAU,SAAU,KAAK,MAAM,OAASA,CAAc,CAAA,EAC9D,CAAE,KAAM,SAAU,SAAU,KAAK,MAAM,OAASA,CAAc,CAAA,CAAE,EAElE,eAAgB,KAAK,MAAM,QAAUA,CAAc,EACnD,YAAaH,EAAI,YAAA,CAAY,CAEjC,CAGQ,mCAAuD,CAC7D,MAAMA,MAAU,KAEhB,MAAO,CACL,gBAAiB,CACf,CAAE,QAAS,0BAA2B,OAAQ,MAAO,SAAU,MAAA,EAC/D,CAAE,QAAS,eAAgB,OAAQ,MAAO,SAAU,MAAA,EACpD,CAAE,QAAS,gBAAiB,OAAQ,MAAO,SAAU,MAAA,EACrD,CAAE,QAAS,kBAAmB,OAAQ,MAAO,SAAU,MAAA,EACvD,CAAE,QAAS,mBAAoB,OAAQ,MAAO,SAAU,MAAA,EACxD,CAAE,QAAS,mBAAoB,OAAQ,KAAM,SAAU,OAAA,EACvD,CAAE,QAAS,oBAAqB,OAAQ,KAAM,SAAU,MAAA,EACxD,CAAE,QAAS,eAAgB,OAAQ,KAAM,SAAU,MAAA,CAAO,EAE5D,gBAAiB,CACf,CAAE,OAAQ,oBAAqB,cAAe,KAAM,MAAO,IAAA,EAC3D,CAAE,OAAQ,gBAAiB,cAAe,KAAM,MAAO,IAAA,EACvD,CAAE,OAAQ,gBAAiB,cAAe,KAAM,MAAO,IAAA,EACvD,CAAE,OAAQ,eAAgB,cAAe,KAAM,MAAO,IAAA,EACtD,CAAE,OAAQ,gBAAiB,cAAe,KAAM,MAAO,IAAA,CAAK,EAE9D,cAAe,CACb,UAAW,KAAK,kBAAA,EAChB,aAAc,KAAK,qBAAA,CAAqB,EAE1C,YAAaA,EAAI,YAAA,CAAY,CAEjC,CAGQ,6BAA+C,CACrD,MAAMA,MAAU,KACVC,EAAOD,EAAI,SAAA,EACXG,EAAiB,KAAK,uBAAuBF,EAAMD,EAAI,QAAQ,EAErE,MAAO,CACL,YAAa,KAAK,MAAM,MAAQG,GAAkB,KAAK,OAAA,EAAW,IAAO,IAAI,EAC7E,iBAAkB,KAAK,MAAM,MAAQA,GAAkB,KAAK,OAAA,EAAW,IAAM,IAAI,EACjF,eAAgB,KAAK,MAAM,QAAU,KAAK,OAAA,EAAW,IAAO,IAAI,EAChE,gBAAiB,MAAQ,KAAK,OAAA,EAAW,EAAI,GAC7C,cAAe,CACb,CAAE,SAAU,kBAAmB,MAAO,MAAO,QAAS,WAAA,EACtD,CAAE,SAAU,gBAAiB,MAAO,MAAO,QAAS,aAAA,EACpD,CAAE,SAAU,eAAgB,MAAO,MAAO,QAAS,SAAA,EACnD,CAAE,SAAU,cAAe,MAAO,MAAO,QAAS,OAAA,EAClD,CAAE,SAAU,aAAc,MAAO,MAAO,QAAS,QAAA,CAAS,EAE5D,YAAaH,EAAI,YAAA,CAAY,CAEjC,CAGQ,gCAAiD,CAGvD,MAAO,CACL,YAAa,CACX,CAAE,MAAO,sBAAuB,OAAQ,KAAM,OAAQ,KAAA,EACtD,CAAE,MAAO,qBAAsB,OAAQ,KAAM,OAAQ,KAAA,EACrD,CAAE,MAAO,gBAAiB,OAAQ,KAAM,OAAQ,KAAA,EAChD,CAAE,MAAO,gBAAiB,OAAQ,KAAM,OAAQ,KAAA,EAChD,CAAE,MAAO,SAAU,OAAQ,KAAM,OAAQ,KAAA,EACzC,CAAE,MAAO,yBAA0B,OAAQ,KAAM,OAAQ,IAAA,EACzD,CAAE,MAAO,oBAAqB,OAAQ,KAAM,OAAQ,IAAA,EACpD,CAAE,MAAO,YAAa,OAAQ,KAAM,OAAQ,IAAA,CAAK,EAEnD,eAAgB,CACd,CACE,SAAU,aACV,OAAQ,CAAC,QAAS,kBAAmB,eAAe,EACpD,OAAQ,KAAA,EAEV,CACE,SAAU,aACV,OAAQ,CAAC,gBAAiB,iBAAkB,cAAc,EAC1D,OAAQ,KAAA,EAEV,CACE,SAAU,UACV,OAAQ,CAAC,aAAc,UAAW,eAAe,EACjD,OAAQ,KAAA,EAEV,CACE,SAAU,YACV,OAAQ,CAAC,SAAU,kBAAmB,kBAAkB,EACxD,OAAQ,KAAA,CACV,EAEF,mBAAoB,CAClB,CAAE,KAAM,oCAAqC,MAAO,KAAM,WAAY,IAAA,EACtE,CAAE,KAAM,4BAA6B,MAAO,KAAM,WAAY,IAAA,EAC9D,CAAE,KAAM,2BAA4B,MAAO,KAAM,WAAY,IAAA,EAC7D,CAAE,KAAM,oBAAqB,MAAO,KAAM,WAAY,IAAA,EACtD,CAAE,KAAM,aAAc,MAAO,KAAM,WAAY,IAAA,CAAK,EAEtD,gBA1Cc,KAAA,EA0CG,YAAA,CAAY,CAEjC,CAGQ,uBAAuBC,EAAcC,EAA2B,CAEtE,IAAIE,EAAiB,GAErB,OAAKH,GAAQ,GAAKA,GAAQ,IAAQA,GAAQ,IAAMA,GAAQ,IAAQA,GAAQ,IAAMA,GAAQ,GACpFG,EAAiB,IACRH,GAAQ,GAAKA,GAAQ,KAC9BG,EAAiB,GAMZA,GAFgBF,IAAc,GAAKA,IAAc,EAAK,GAAM,EAGrE,CAGQ,mBAA+D,CACrE,MAAMG,EAAY,CAAA,EAClB,QAASJ,EAAO,EAAGA,EAAO,GAAIA,IAAQ,CACpC,IAAInC,EAAW,GAGXmC,GAAQ,GAAKA,GAAQ,KAAe,GAAK,KAAK,SAAW,GAEpDA,GAAQ,IAAMA,GAAQ,KAAe,GAAK,KAAK,SAAW,GAE1DA,GAAQ,IAAMA,GAAQ,KAAe,GAAK,KAAK,SAAW,GAE1DA,GAAQ,GAAKA,GAAQ,KAAe,GAAK,KAAK,SAAW,GAE7DnC,EAAW,GAAK,KAAK,OAAA,EAAW,GAErCuC,EAAU,KAAK,CAAE,KAAAJ,EAAM,SAAU,KAAK,MAAMnC,CAAQ,EAAG,CACzD,CACA,OAAOuC,CACT,CAGQ,sBAAiE,CACvE,MAAM1C,EAAO,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,QAAQ,EACpF2C,EAAe,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAI,EAE9D,OAAO3C,EAAK,IAAI,CAAC4C,EAAKjB,KAAW,CAC/B,IAAAiB,EACA,SAAU,KAAK,MAAMD,EAAahB,CAAK,GAAK,KAAK,OAAA,EAAW,IAAO,IAAI,CAAA,EACvE,CACJ,CAGA,MAAc,gCAAoE,CAEhF,OAAO,IACT,CAEA,MAAc,0BAA4D,CAExE,OAAO,IACT,CAEA,MAAc,6BAA8D,CAE1E,OAAO,IACT,CAGA,sBAAmC,CACjC,YAAK,kBAGD,KAAK,kBAAoB,GAAK,CAAC,KAAK,aACtC,KAAK,WAAa,YAAY,SAAY,CACxC,GAAI,CACF,KAAM,CAACkB,EAAajB,EAAQkB,EAAaC,CAAc,EAAI,MAAM,QAAQ,IAAI,CAC3E,KAAK,uBAAA,EACL,KAAK,qBAAA,EACL,KAAK,mBAAA,EACL,KAAK,kBAAA,CAAkB,CACxB,EAGD,KAAK,OAAO,cAAeF,CAAW,EACtC,KAAK,OAAO,oBAAqBjB,CAAM,EACvC,KAAK,OAAO,cAAekB,CAAW,EACtC,KAAK,OAAO,iBAAkBC,CAAc,CAC9C,OAAS9C,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,CACvD,CACF,EAAG,KAAK,cAAc,GAIjB,IAAM,CACX,KAAK,oBAAA,CACP,CACF,CAGA,qBAA4B,CAC1B,KAAK,gBAAkB,KAAK,IAAI,EAAG,KAAK,gBAAkB,CAAC,EAGvD,KAAK,kBAAoB,GAAK,KAAK,aACrC,cAAc,KAAK,UAAU,EAC7B,KAAK,WAAa,KAEtB,CAGA,0BAAiC,CAC/B,KAAK,gBAAkB,EACnB,KAAK,aACP,cAAc,KAAK,UAAU,EAC7B,KAAK,WAAa,MAGpB,KAAK,YAAY,MAAA,CACnB,CACF,CAGO,MAAM+C,EAAsB,IAAIzB,EC5djC0B,EAAYC,EAAM,OAAO,CAC7B,QAAS,wEACT,gBAAiB,EACnB,CAAC,EAEYC,EAAiB,CAC5B,MAAM,kBAAkBC,EAAgBC,EAA8C,CAEpF,OADiB,MAAMJ,EAAU,KAAK,2BAA4B,CAAE,OAAAG,EAAQ,OAAAC,EAAQ,GACpE,IAClB,EAEA,MAAM,YAAYC,EAAiE,CAEjF,OADiB,MAAML,EAAU,KAAK,0BAA2B,CAAE,aAAAK,EAAc,GACjE,IAClB,EAEA,MAAM,oBAAoBA,EAAmCC,EAAgB1D,EAA6D,CAExI,OADoB,MAAMoD,EAAU,KAAK,yBAA0B,CAAE,aAAAK,EAAc,OAAAC,EAAQ,SAAA1D,EAAU,GAClF,IACrB,CACF,ECJO,MAAM2D,CAAoB,CACvB,OAER,YAAYC,EAAsC,GAAI,CACpD,KAAK,OAAS,CACZ,oBAAqB,GACrB,oBAAqB,EACrB,qBAAsB,EACtB,iBAAkB,EAClB,0BAA2B,IAC3B,wBAAyB,IACzB,GAAGA,CAAA,CAEP,CAKA,MAAM,kBAAkBL,EAAgBC,EAA8C,CACpF,OAAOF,EAAe,kBAAkBC,EAAQC,CAAM,CACxD,CAKA,MAAM,YAAYC,EAAiE,CACjF,OAAOH,EAAe,YAAYG,CAAY,CAChD,CAKA,MAAM,oBACJA,EACAC,EACA1D,EAC8B,CAC9B,OAAOsD,EAAe,oBAAoBG,EAAcC,EAAQ1D,CAAQ,CAC1E,CACF,CCrBO,MAAM6D,CAA4B,CAC/B,eAAoC,CAAA,EACpC,qBAA0D,IAKlE,MAAM,mBAA8C,CAClD,MAAMC,EAAgC,CACpC,OAAQ,KAAK,aAAA,EACb,eAAgB,MAAM,KAAK,qBAAA,CAAqB,EAGlD,IAAIC,EAAa,GAGjB,GAAID,EAAQ,SAAW,SACrB,GAAI,CACFA,EAAQ,aAAe,MAAM,KAAK,gBAAA,EAC9BA,EAAQ,eAAiB,SAAWC,GAAc,IACxD,OAAS3D,EAAO,CACd,QAAQ,KAAK,kCAAmCA,CAAK,CACvD,CAIF,GAAI,CACF0D,EAAQ,aAAe,MAAM,KAAK,mBAAA,EAClCA,EAAQ,SAAW,MAAM,KAAK,yBAAA,EAC9BC,GAAc,GAChB,OAAS3D,EAAO,CACd,QAAQ,KAAK,uCAAwCA,CAAK,EAC1D2D,GAAc,EAChB,CAEA,MAAMC,EAAmC,CACvC,GAAGF,EACH,WAAY,KAAK,IAAI,GAAKC,CAAU,EACpC,gBAAiB,sBACjB,UAAW,IAAI,KAAA,EAAO,YAAA,CAAY,EAIpC,YAAK,eAAe,KAAKC,CAAe,EACpC,KAAK,eAAe,OAAS,KAC/B,KAAK,eAAe,MAAA,EAGfA,CACT,CAKQ,cAAgD,CACtD,MAAMC,EAAY,UAAU,UAAU,YAAA,EAChCC,EAAW,UAAU,UAAU,YAAA,GAAiB,GAIhDC,EADiB,CAAC,SAAU,UAAW,SAAU,OAAQ,aAAc,eAAe,EAC5D,QAAgBF,EAAU,SAASG,CAAO,CAAC,EAIrEC,EADiB,CAAC,OAAQ,SAAU,SAAU,WAAY,MAAM,EACtC,QAAgBJ,EAAU,SAASG,CAAO,CAAC,EAGrEE,EAAc,OAAO,OAAO,MAC5BC,EAAe,OAAO,OAAO,OAC7BC,EAAe,KAAK,IAAIF,EAAaC,CAAY,EACjDE,EAAe,KAAK,IAAIH,EAAaC,CAAY,EAEjDG,EAAiB,iBAAkB,QAAU,UAAU,eAAiB,EAE9E,OAAIL,GAAaK,GAAkBD,GAAgB,KAAOD,GAAgB,KACjE,SAGLL,GAAaO,GAAkBF,GAAgB,IAC1C,SAISN,EAAS,SAAS,KAAK,GAAKA,EAAS,SAAS,KAAK,GAAKA,EAAS,SAAS,OAAO,GAE/E,CAACQ,EAAiB,UAAY,QACpD,CAKA,MAAc,sBAA2E,CACvF,GAAI,CAAC,UAAU,OAAQ,MAAO,UAE9B,GAAI,CAEF,MAAMC,EAAc,UAAkB,YAAe,UAAkB,eAAkB,UAAkB,iBAE3G,GAAIA,EAAY,CACd,MAAMC,EAAgBD,EAAW,cAC3BE,EAAWF,EAAW,SACtBG,EAAMH,EAAW,IAGvB,OAAIC,IAAkB,MAAQC,EAAW,IAAMC,EAAM,IAC5C,aACGF,IAAkB,MAAQA,IAAkB,OAASC,EAAW,GAAKC,EAAM,KAE5ED,EAAW,IAAOC,EAAM,IAD1B,OAIA,MAEX,CAGA,OAAO,MAAM,KAAK,mBAAA,CACpB,OAAS1E,EAAO,CACd,eAAQ,KAAK,qCAAsCA,CAAK,EACjD,MACT,CACF,CAKA,MAAc,oBAA6D,CACzE,GAAI,CACF,MAAM2E,EAAY,YAAY,IAAA,EAGxB/E,EAAW,MAAM,MAAM,YAAa,CACxC,OAAQ,OACR,MAAO,UAAA,CACR,EAGKgF,EADU,YAAY,IAAA,EACFD,EAE1B,OAAK/E,EAAS,GAIVgF,EAAU,IACL,YACEA,EAAU,IACZ,OAEA,OARA,MAUX,OAAS5E,EAAO,CACd,eAAQ,KAAK,uBAAwBA,CAAK,EACnC,MACT,CACF,CAKA,MAAc,iBAA+C,CAC3D,GAAI,CAEF,MAAM6E,EAAU,MAAO,UAAkB,aAAA,EACzC,GAAIA,GAAW,OAAOA,EAAQ,OAAU,SACtC,OAAOA,EAAQ,MAIjB,MAAMC,EAAkB,UAAkB,SAAY,UAAkB,YAAe,UAAkB,cACzG,OAAIA,GAAkB,OAAOA,EAAe,OAAU,SAC7CA,EAAe,MAGxB,MACF,OAAS9E,EAAO,CACd,QAAQ,KAAK,kCAAmCA,CAAK,EACrD,MACF,CACF,CAKA,MAAc,oBAA0E,CACtF,GAAI,CAEF,MAAM+E,EAAS,MAAM,UAAU,aAAa,aAAa,CAAE,MAAO,GAAM,MAAO,GAAO,EAEtF,OAAO,IAAI,QAAqDC,GAAY,CAC1E,MAAMC,EAAe,IAAK,OAAO,cAAiB,OAAe,oBAC3DC,EAAWD,EAAa,eAAA,EACXA,EAAa,wBAAwBF,CAAM,EAEnD,QAAQG,CAAQ,EAC3BA,EAAS,QAAU,IAEnB,MAAMC,EAAeD,EAAS,kBACxBE,EAAY,IAAI,WAAWD,CAAY,EAE7C,IAAIE,EAAU,EACVC,EAAc,EAClB,MAAMC,EAAa,GAEbC,EAAc,IAAM,CACxBN,EAAS,qBAAqBE,CAAS,EAEvC,MAAMK,EAASL,EAAU,OAAO,CAACM,EAAKC,IAAUD,EAAMC,EAAO,CAAC,EAAIR,EAIlE,GAHAG,GAAeG,EACfJ,IAEIA,EAAUE,EACZ,WAAWC,EAAa,EAAE,MACrB,CAELT,EAAO,YAAY,QAAQa,GAASA,EAAM,MAAM,EAChDX,EAAa,MAAA,EAEb,MAAMY,EAAgBP,EAAcD,EAGhCQ,EAAgB,GAClBb,EAAQ,OAAO,EACNa,EAAgB,GACzBb,EAAQ,UAAU,EAElBA,EAAQ,OAAO,CAEnB,CACF,EAEAQ,EAAA,CACF,CAAC,CACH,OAASxF,EAAO,CAEd,QAAQ,KAAK,kCAAmCA,CAAK,EACrD,MACF,CACF,CAKA,MAAc,0BAA8E,CAC1F,GAAI,CAEF,GAAI,WAAY,WAAa,eAAiB,UAAU,OAAgB,CACtE,MAAM8F,EAAc,UAAU,OAAe,WAC7C,OAAIA,EAAa,GAAY,MACzBA,EAAa,GAAY,SACtB,SACT,CAGA,OAAO,MAAM,KAAK,wBAAA,CACpB,OAAS9F,EAAO,CACd,QAAQ,KAAK,6BAA8BA,CAAK,EAChD,MACF,CACF,CAKA,MAAc,yBAA6E,CACzF,GAAI,CACF,MAAM+E,EAAS,MAAM,UAAU,aAAa,aAAa,CAAE,MAAO,CAAE,WAAY,aAAA,EAAiB,EAEjG,OAAO,IAAI,QAAmDC,GAAY,CACxE,MAAMe,EAAQ,SAAS,cAAc,OAAO,EACtCC,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAMD,EAAO,WAAW,IAAI,EAElCD,EAAM,UAAYhB,EAClBgB,EAAM,KAAA,EAENA,EAAM,iBAAiB,iBAAkB,IAAM,CAC7CC,EAAO,MAAQD,EAAM,WACrBC,EAAO,OAASD,EAAM,YAGtB,WAAW,IAAM,CACf,GAAIE,EAAK,CACPA,EAAI,UAAUF,EAAO,EAAG,CAAC,EACzB,MAAMG,EAAYD,EAAI,aAAa,EAAG,EAAGD,EAAO,MAAOA,EAAO,MAAM,EAGpE,IAAIG,EAAkB,EACtB,MAAMC,EAASF,EAAU,KAEzB,QAAS,EAAI,EAAG,EAAIE,EAAO,OAAQ,GAAK,EAAG,CACzC,MAAMC,EAAID,EAAO,CAAC,EACZE,EAAIF,EAAO,EAAI,CAAC,EAChBG,EAAIH,EAAO,EAAI,CAAC,EAGhBI,EAAY,KAAQH,EAAI,KAAQC,EAAI,KAAQC,EAClDJ,GAAmBK,CACrB,CAEA,MAAMC,EAAoBN,GAAmBC,EAAO,OAAS,GAG7DrB,EAAO,YAAY,QAAQa,GAASA,EAAM,MAAM,EAG5Ca,EAAoB,GACtBzB,EAAQ,KAAK,EACJyB,EAAoB,IAC7BzB,EAAQ,QAAQ,EAEhBA,EAAQ,SAAS,CAErB,CACF,EAAG,GAAG,CACR,CAAC,CACH,CAAC,CACH,OAAShF,EAAO,CACd,QAAQ,KAAK,0CAA2CA,CAAK,EAC7D,MACF,CACF,CAKA,0BAA0B0G,EAA+C,CAEvE,MAAMC,EAAgB,KAAK,0BAA0BD,CAAkB,EAGjEE,EAAoB,KAAK,sBAAsBD,CAAa,EAG5DE,EAAiB,KAAK,eAAe,KAAK,eAAe,OAAS,CAAC,EACnEC,EAAe,KAAK,uBAAuBD,EAAgBD,CAAiB,EAG5EG,EAAc,KAAK,+BAA+BF,EAAgBD,CAAiB,EAEzF,MAAO,CACL,uBAAwBA,EACxB,sBAAuBE,EACvB,uBAAwBC,EACxB,sBAAuB,MAAM,KAAKJ,EAAc,QAAQ,CAAA,CAE5D,CAKA,4BAA4BjD,EAAwD,CAClF,IAAIsD,EAAuB,EACvBC,EAAiB,GAErB,MAAMC,EAAa,CACjB,mBAAoB,EACpB,mBAAoB,EACpB,YAAa,MAAA,EAGTC,EAAY,CAChB,mBAAoB,GACpB,iBAAkB,EAAA,EAIpB,OAAQzD,EAAQ,OAAA,CACd,IAAK,SACHsD,GAAwB,GACxBC,EAAiB,GACjBC,EAAW,mBAAqB,GAChC,MAEF,IAAK,SACHD,EAAiB,GACjBC,EAAW,mBAAqB,GAChC,MAEF,IAAK,UACHD,EAAiB,GACjB,KAAA,CAIJ,OAAQvD,EAAQ,eAAA,CACd,IAAK,OACL,IAAK,UACHsD,GAAwB,EACxBG,EAAU,mBAAqB,GAC/B,MAEF,IAAK,OACHH,GAAwB,GACxB,KAAA,CAWJ,OAPItD,EAAQ,eAAiB,QAAaA,EAAQ,aAAe,KAC/DsD,GAAwB,GACxBC,EAAiB,GACjBC,EAAW,YAAc,QAInBxD,EAAQ,aAAA,CACd,IAAK,QACHsD,GAAwB,GACxBG,EAAU,mBAAqB,GAC/B,MAEF,IAAK,QACHA,EAAU,iBAAmB,GAC7B,KAAA,CAIJ,OAAQzD,EAAQ,SAAA,CACd,IAAK,MACHwD,EAAW,mBAAqB,GAChCA,EAAW,YAAc,OACzBF,GAAwB,GACxB,MAEF,IAAK,SACHE,EAAW,mBAAqB,IAChCA,EAAW,YAAc,QACzB,KAIA,CAGJ,MAAO,CACL,qBAAsB,KAAK,IAAI,GAAI,KAAK,IAAI,EAAGF,CAAoB,CAAC,EACpE,0BAA2BC,EAC3B,oBAAqBC,EACrB,mBAAoBC,CAAA,CAExB,CAKA,MAAM,qBAAqC,CACzC,MAAMC,EAAkB,KAAK,eAAe,KAAK,eAAe,OAAS,CAAC,EACpEP,EAAiB,MAAM,KAAK,kBAAA,EAE9BO,GAAmB,KAAK,4BAA4BA,EAAiBP,CAAc,GAErF,KAAK,kBAAkBA,EAAgBO,CAAe,CAE1D,CAKQ,4BAA4BC,EAA2BC,EAAmC,CAchG,MAZI,GAAAD,EAAS,SAAWC,EAAQ,QAG5BD,EAAS,iBAAmBC,EAAQ,gBAGpCD,EAAS,cAAgBC,EAAQ,cAC/B,KAAK,IAAID,EAAS,aAAeC,EAAQ,YAAY,EAAI,IAI3DD,EAAS,eAAiBC,EAAQ,cAClCD,EAAS,WAAaC,EAAQ,SAGpC,CAIQ,0BAA0BZ,EAA8D,CAM9F,WALmB,GAMrB,CAEQ,sBAAsBC,EAAwE,CAIpG,MAAO,CACL,OAAQ,UACR,eAAgB,YAChB,aAAc,OACd,aAAc,QACd,SAAU,SAAA,CAEd,CAEQ,uBAAuBW,EAAsCC,EAAuC,CAC1G,GAAI,CAACD,EAAS,MAAO,IAErB,IAAIE,EAAQ,EAGZ,OAAIF,EAAQ,SAAWC,EAAQ,SAAQC,GAAS,IAC5CF,EAAQ,iBAAmBC,EAAQ,iBACrCC,GAASF,EAAQ,iBAAmB,OAAS,GAAM,IAEjDA,EAAQ,eAAiBC,EAAQ,eAAcC,GAAS,KACxDF,EAAQ,WAAaC,EAAQ,WAAUC,GAAS,IAGhDF,EAAQ,SAAW,UAAYA,EAAQ,cAAgBA,EAAQ,aAAe,KAChFE,GAAS,IAGJ,KAAK,IAAI,EAAGA,CAAK,CAC1B,CAEQ,+BAA+BF,EAAsCC,EAAyC,CACpH,MAAMR,EAAwB,CAAA,EAE9B,OAAKO,IAEDA,EAAQ,iBAAmB,QAC7BP,EAAY,KAAK,2EAA2E,EAG1FO,EAAQ,eAAiB,SAC3BP,EAAY,KAAK,8DAA8D,EAG7EO,EAAQ,WAAa,MACvBP,EAAY,KAAK,uDAAuD,EAC/DO,EAAQ,WAAa,UAC9BP,EAAY,KAAK,0DAA0D,EAGzEO,EAAQ,SAAW,UAAYA,EAAQ,cAAgBA,EAAQ,aAAe,IAChFP,EAAY,KAAK,qEAAqE,GAGjFA,CACT,CAGO,eACT"}