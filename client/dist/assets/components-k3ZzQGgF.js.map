{"version":3,"file":"components-k3ZzQGgF.js","sources":["../../src/components/gamification/XPBar.tsx","../../src/components/gamification/StreakCounter.tsx","../../src/components/gamification/MonthlyChallenge.tsx","../../src/components/gamification/CommunityLeaderboard.tsx","../../src/hooks/useRealTimeData.ts","../../src/components/dashboard/RealTimeStatsCard.tsx","../../src/components/dashboard/TrendingTopics.tsx","../../src/components/dashboard/MarketInsights.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ninterface XPBarProps {\r\n  currentXP: number\r\n  level: number\r\n  className?: string\r\n}\r\n\r\nconst XPBar: React.FC<XPBarProps> = ({ currentXP, level, className = '' }) => {\r\n  // Calculate XP needed for current level and next level using the same formula as gamification store\r\n  const getXPForLevel = (lvl: number) => Math.pow(lvl - 1, 2) * 100\r\n  const getXPForNextLevel = (lvl: number) => Math.pow(lvl, 2) * 100\r\n  \r\n  const currentLevelXP = getXPForLevel(level)\r\n  const nextLevelXP = getXPForNextLevel(level)\r\n  const xpInCurrentLevel = currentXP - currentLevelXP\r\n  const xpNeededForNextLevel = nextLevelXP - currentLevelXP\r\n  \r\n  const progressPercentage = Math.max(0, Math.min((xpInCurrentLevel / xpNeededForNextLevel) * 100, 100))\r\n\r\n  return (\r\n    <div className={`space-y-2 ${className}`}>\r\n      <div className=\"flex items-center justify-between text-sm\">\r\n        <span className=\"font-medium text-gray-700 dark:text-gray-300\">\r\n          Level {level}\r\n        </span>\r\n        <span className=\"text-gray-500 dark:text-gray-400\">\r\n          {xpInCurrentLevel.toLocaleString()} / {xpNeededForNextLevel.toLocaleString()} XP\r\n        </span>\r\n      </div>\r\n      \r\n      <div className=\"relative\">\r\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden\">\r\n          <div \r\n            className=\"h-full bg-gradient-to-r from-blue-500 to-purple-600 rounded-full transition-all duration-500 ease-out relative\"\r\n            style={{ width: `${progressPercentage}%` }}\r\n          >\r\n            <div className=\"absolute inset-0 bg-white/20 animate-pulse rounded-full\"></div>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Level indicator */}\r\n        <div className=\"absolute -top-1 -left-1 w-5 h-5 bg-blue-600 rounded-full flex items-center justify-center text-xs font-bold text-white border-2 border-white dark:border-gray-800\">\r\n          {level}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\r\n        {nextLevelXP - currentXP > 0 ? (\r\n          <>\r\n            {(nextLevelXP - currentXP).toLocaleString()} XP to level {level + 1}\r\n          </>\r\n        ) : (\r\n          'Max level reached!'\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default XPBar","import React from 'react'\r\n\r\ninterface StreakCounterProps {\r\n  currentStreak: number\r\n  longestStreak: number\r\n  lastStudyDate?: string\r\n  className?: string\r\n}\r\n\r\nconst StreakCounter: React.FC<StreakCounterProps> = ({ \r\n  currentStreak, \r\n  longestStreak, \r\n  lastStudyDate,\r\n  className = '' \r\n}) => {\r\n  const isStreakActive = () => {\r\n    if (!lastStudyDate) return false\r\n    const lastStudy = new Date(lastStudyDate)\r\n    const today = new Date()\r\n    const diffTime = Math.abs(today.getTime() - lastStudy.getTime())\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\r\n    return diffDays <= 1\r\n  }\r\n\r\n  const getStreakStatus = () => {\r\n    if (currentStreak === 0) return 'inactive'\r\n    if (isStreakActive()) return 'active'\r\n    return 'broken'\r\n  }\r\n\r\n  const status = getStreakStatus()\r\n\r\n  const getStreakColor = () => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'text-green-600 dark:text-green-400'\r\n      case 'broken':\r\n        return 'text-orange-600 dark:text-orange-400'\r\n      default:\r\n        return 'text-gray-600 dark:text-gray-400'\r\n    }\r\n  }\r\n\r\n  const getStreakIcon = () => {\r\n    switch (status) {\r\n      case 'active':\r\n        return '🔥'\r\n      case 'broken':\r\n        return '💔'\r\n      default:\r\n        return '⭐'\r\n    }\r\n  }\r\n\r\n  const getStreakMessage = () => {\r\n    switch (status) {\r\n      case 'active':\r\n        return currentStreak === 1 ? 'Great start!' : 'Keep it up!'\r\n      case 'broken':\r\n        return 'Start a new streak today!'\r\n      default:\r\n        return 'Begin your streak!'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 ${className}`}>\r\n      <div className=\"flex items-center justify-between mb-3\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          Study Streak\r\n        </h3>\r\n        <span className=\"text-2xl\">{getStreakIcon()}</span>\r\n      </div>\r\n      \r\n      <div className=\"space-y-3\">\r\n        <div className=\"text-center\">\r\n          <div className={`text-3xl font-bold ${getStreakColor()}`}>\r\n            {currentStreak}\r\n          </div>\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n            {currentStreak === 1 ? 'day' : 'days'}\r\n          </div>\r\n          <div className={`text-sm font-medium ${getStreakColor()}`}>\r\n            {getStreakMessage()}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"border-t border-gray-200 dark:border-gray-600 pt-3\">\r\n          <div className=\"flex justify-between items-center text-sm\">\r\n            <span className=\"text-gray-600 dark:text-gray-400\">\r\n              Longest streak:\r\n            </span>\r\n            <span className=\"font-semibold text-gray-900 dark:text-white\">\r\n              {longestStreak} {longestStreak === 1 ? 'day' : 'days'}\r\n            </span>\r\n          </div>\r\n          \r\n          {lastStudyDate && (\r\n            <div className=\"flex justify-between items-center text-sm mt-1\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">\r\n                Last study:\r\n              </span>\r\n              <span className=\"font-medium text-gray-700 dark:text-gray-300\">\r\n                {new Date(lastStudyDate).toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Streak visualization */}\r\n        <div className=\"flex justify-center space-x-1 pt-2\">\r\n          {Array.from({ length: Math.min(currentStreak, 7) }, (_, i) => (\r\n            <div\r\n              key={i}\r\n              className={`w-3 h-3 rounded-full ${\r\n                status === 'active' \r\n                  ? 'bg-green-500' \r\n                  : status === 'broken'\r\n                  ? 'bg-orange-500'\r\n                  : 'bg-gray-300 dark:bg-gray-600'\r\n              }`}\r\n            />\r\n          ))}\r\n          {currentStreak > 7 && (\r\n            <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-2\">\r\n              +{currentStreak - 7}\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StreakCounter","import React from 'react'\r\nimport type { Challenge, ChallengeParticipation } from '@shared/types'\r\nimport { useGamificationStore } from '../../stores/gamificationStore'\r\n\r\ninterface MonthlyChallengeProps {\r\n  challenge: Challenge\r\n  participation?: ChallengeParticipation\r\n}\r\n\r\nexport const MonthlyChallenge: React.FC<MonthlyChallengeProps> = ({\r\n  challenge,\r\n  participation\r\n}) => {\r\n  const {\r\n    claimMilestoneReward\r\n  } = useGamificationStore()\r\n\r\n  const progress = participation?.progress || {}\r\n  const milestoneProgress = participation?.milestoneProgress || {}\r\n  const weeklyProgress = participation?.weeklyProgress || []\r\n  const currentStreak = participation?.currentStreak || 0\r\n  const bestWeek = participation?.bestWeek || 0\r\n\r\n  // Calculate overall progress percentage\r\n  const totalTarget = challenge.requirements.reduce((sum, req) => sum + req.target, 0)\r\n  const totalCurrent = challenge.requirements.reduce((sum, req) => {\r\n    const key = req.type\r\n    return sum + (progress[key] || 0)\r\n  }, 0)\r\n  const progressPercentage = Math.min((totalCurrent / totalTarget) * 100, 100)\r\n\r\n  // Mock milestone data (would come from challenge definition in real implementation)\r\n  const milestones = [\r\n    { id: 'milestone_1', name: 'First Week', target: 25, reward: '100 XP + 20 Gold' },\r\n    { id: 'milestone_2', name: 'Consistency', target: 50, reward: '200 XP + 50 Gold' },\r\n    { id: 'milestone_3', name: 'Dedication', target: 75, reward: '300 XP + 100 Gold + 5 Gems' },\r\n    { id: 'milestone_4', name: 'Mastery', target: 100, reward: '500 XP + 200 Gold + 10 Gems + Badge' }\r\n  ]\r\n\r\n  // Mock story chapters (would come from challenge definition)\r\n  const storyChapters = [\r\n    { week: 1, title: 'The Journey Begins', unlocked: weeklyProgress.some(w => w.week === 1 && w.storyUnlocked) },\r\n    { week: 2, title: 'Building Momentum', unlocked: weeklyProgress.some(w => w.week === 2 && w.storyUnlocked) },\r\n    { week: 3, title: 'Overcoming Challenges', unlocked: weeklyProgress.some(w => w.week === 3 && w.storyUnlocked) },\r\n    { week: 4, title: 'The Final Push', unlocked: weeklyProgress.some(w => w.week === 4 && w.storyUnlocked) }\r\n  ]\r\n\r\n  const handleClaimMilestone = (milestoneId: string) => {\r\n    claimMilestoneReward(challenge.id, milestoneId)\r\n  }\r\n\r\n  const getWeekProgress = (week: number) => {\r\n    return weeklyProgress.find(w => w.week === week)\r\n  }\r\n\r\n  const getDifficultyColor = (week: number) => {\r\n    const colors = ['bg-green-500', 'bg-yellow-500', 'bg-orange-500', 'bg-red-500']\r\n    return colors[Math.min(week - 1, 3)]\r\n  }\r\n\r\n  const getDifficultyLabel = (week: number) => {\r\n    const labels = ['Beginner', 'Intermediate', 'Advanced', 'Expert']\r\n    return labels[Math.min(week - 1, 3)]\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border-l-4 border-purple-500\">\r\n      {/* Header */}\r\n      <div className=\"flex items-start justify-between mb-6\">\r\n        <div>\r\n          <div className=\"flex items-center gap-2 mb-2\">\r\n            <span className=\"text-2xl\">🏆</span>\r\n            <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n              {challenge.title}\r\n            </h3>\r\n            <span className=\"px-2 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 text-xs font-medium rounded-full\">\r\n              Monthly Epic\r\n            </span>\r\n          </div>\r\n          <p className=\"text-gray-600 dark:text-gray-300 mb-2\">\r\n            {challenge.description}\r\n          </p>\r\n          <div className=\"flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\r\n            <span>🔥 Streak: {currentStreak} days</span>\r\n            <span>⭐ Best Week: {bestWeek}</span>\r\n            <span>📅 {Math.ceil((new Date(challenge.endDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24))} days left</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\r\n            {progressPercentage.toFixed(0)}%\r\n          </div>\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">Complete</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Overall Progress Bar */}\r\n      <div className=\"mb-6\">\r\n        <div className=\"flex justify-between text-sm text-gray-600 dark:text-gray-300 mb-2\">\r\n          <span>Overall Progress</span>\r\n          <span>{totalCurrent} / {totalTarget}</span>\r\n        </div>\r\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\r\n          <div \r\n            className=\"bg-gradient-to-r from-purple-500 to-pink-500 h-3 rounded-full transition-all duration-300\"\r\n            style={{ width: `${progressPercentage}%` }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Weekly Progress with Difficulty Scaling */}\r\n      <div className=\"mb-6\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          Weekly Progress & Difficulty Scaling\r\n        </h4>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3\">\r\n          {[1, 2, 3, 4].map(week => {\r\n            const weekData = getWeekProgress(week)\r\n            const isCompleted = weekData?.completed || false\r\n            const isCurrentWeek = Math.ceil((Date.now() - new Date(challenge.startDate).getTime()) / (1000 * 60 * 60 * 24 * 7)) === week\r\n            \r\n            return (\r\n              <div \r\n                key={week}\r\n                className={`p-3 rounded-lg border-2 ${\r\n                  isCompleted \r\n                    ? 'border-green-500 bg-green-50 dark:bg-green-900/20' \r\n                    : isCurrentWeek\r\n                    ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/20'\r\n                    : 'border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800'\r\n                }`}\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <span className=\"font-medium text-gray-900 dark:text-white\">Week {week}</span>\r\n                  {isCompleted && <span className=\"text-green-500\">✓</span>}\r\n                  {isCurrentWeek && !isCompleted && <span className=\"text-purple-500\">📍</span>}\r\n                </div>\r\n                <div className={`text-xs px-2 py-1 rounded-full text-white ${getDifficultyColor(week)} mb-2`}>\r\n                  {getDifficultyLabel(week)}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n                  Target: {25 * week} cards\r\n                </div>\r\n                {weekData && (\r\n                  <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                    Progress: {Object.values(weekData.progress).reduce((a, b) => a + b, 0)}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Story Arc Progress */}\r\n      <div className=\"mb-6\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          📖 Story Arc: \"The Path to Mastery\"\r\n        </h4>\r\n        <div className=\"space-y-2\">\r\n          {storyChapters.map(chapter => (\r\n            <div \r\n              key={chapter.week}\r\n              className={`flex items-center gap-3 p-3 rounded-lg ${\r\n                chapter.unlocked \r\n                  ? 'bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800' \r\n                  : 'bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700'\r\n              }`}\r\n            >\r\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\r\n                chapter.unlocked ? 'bg-blue-500 text-white' : 'bg-gray-300 dark:bg-gray-600 text-gray-500'\r\n              }`}>\r\n                {chapter.unlocked ? '📖' : '🔒'}\r\n              </div>\r\n              <div className=\"flex-1\">\r\n                <div className={`font-medium ${\r\n                  chapter.unlocked ? 'text-blue-900 dark:text-blue-100' : 'text-gray-500 dark:text-gray-400'\r\n                }`}>\r\n                  Chapter {chapter.week}: {chapter.title}\r\n                </div>\r\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                  {chapter.unlocked ? 'Unlocked! Click to read' : `Complete Week ${chapter.week} to unlock`}\r\n                </div>\r\n              </div>\r\n              {chapter.unlocked && (\r\n                <button className=\"px-3 py-1 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600 transition-colors\">\r\n                  Read\r\n                </button>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Milestones */}\r\n      <div className=\"mb-6\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          🎯 Milestones & Rewards\r\n        </h4>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n          {milestones.map(milestone => {\r\n            const isCompleted = milestoneProgress[milestone.id] === true\r\n            const isClaimed = milestoneProgress[`${milestone.id}_claimed`] === true\r\n            const canClaim = isCompleted && !isClaimed\r\n            \r\n            return (\r\n              <div \r\n                key={milestone.id}\r\n                className={`p-4 rounded-lg border-2 ${\r\n                  isClaimed \r\n                    ? 'border-green-500 bg-green-50 dark:bg-green-900/20' \r\n                    : isCompleted\r\n                    ? 'border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20'\r\n                    : 'border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800'\r\n                }`}\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                    {milestone.name}\r\n                  </span>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {isClaimed && <span className=\"text-green-500\">✅</span>}\r\n                    {isCompleted && !isClaimed && <span className=\"text-yellow-500\">🎁</span>}\r\n                    {!isCompleted && <span className=\"text-gray-400\">⏳</span>}\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\">\r\n                  Target: {milestone.target}% completion\r\n                </div>\r\n                <div className=\"text-sm text-purple-600 dark:text-purple-400 mb-3\">\r\n                  Reward: {milestone.reward}\r\n                </div>\r\n                {canClaim && (\r\n                  <button \r\n                    onClick={() => handleClaimMilestone(milestone.id)}\r\n                    className=\"w-full px-3 py-2 bg-yellow-500 text-white text-sm font-medium rounded-lg hover:bg-yellow-600 transition-colors\"\r\n                  >\r\n                    Claim Reward\r\n                  </button>\r\n                )}\r\n                {isClaimed && (\r\n                  <div className=\"w-full px-3 py-2 bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 text-sm font-medium rounded-lg text-center\">\r\n                    Claimed\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Community Goals */}\r\n      <div className=\"mb-6\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          🌍 Community Goals\r\n        </h4>\r\n        <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\r\n          <div className=\"flex items-center justify-between mb-3\">\r\n            <span className=\"font-medium text-gray-900 dark:text-white\">\r\n              Global Study Challenge\r\n            </span>\r\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n              12,847 / 50,000 participants\r\n            </span>\r\n          </div>\r\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-3\">\r\n            <div \r\n              className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full\"\r\n              style={{ width: '25.7%' }}\r\n            />\r\n          </div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\r\n            Help the community reach 50,000 participants to unlock exclusive rewards for everyone!\r\n          </div>\r\n          <div className=\"text-sm text-purple-600 dark:text-purple-400\">\r\n            Community Reward: Exclusive \"Unity\" badge + 100 bonus gems for all participants\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Exclusive Rewards Preview */}\r\n      <div className=\"border-t border-gray-200 dark:border-gray-700 pt-4\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          💎 Exclusive Monthly Rewards\r\n        </h4>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\r\n          <div className=\"p-3 bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl mb-2\">🏅</div>\r\n              <div className=\"font-medium text-gray-900 dark:text-white\">Monthly Master</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">Exclusive Badge</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"p-3 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg border border-purple-200 dark:border-purple-800\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl mb-2\">👑</div>\r\n              <div className=\"font-medium text-gray-900 dark:text-white\">Royal Title</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">Profile Enhancement</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"p-3 bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl mb-2\">🎨</div>\r\n              <div className=\"font-medium text-gray-900 dark:text-white\">Custom Theme</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">UI Customization</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport type { LeaderboardEntry } from '@shared/types'\r\n\r\ninterface ExtendedLeaderboardEntry extends LeaderboardEntry {\r\n  seasonalRewards?: Record<string, number>\r\n}\r\n\r\ninterface CommunityLeaderboardProps {\r\n  challengeId: string\r\n  challengeName: string\r\n}\r\n\r\nexport const CommunityLeaderboard: React.FC<CommunityLeaderboardProps> = ({\r\n  challengeName\r\n}) => {\r\n  const [selectedTier, setSelectedTier] = useState<'bronze' | 'silver' | 'gold' | 'diamond'>('gold')\r\n  const [timeFilter, setTimeFilter] = useState<'daily' | 'weekly' | 'monthly'>('weekly')\r\n\r\n  // Mock leaderboard data with tiers\r\n  const mockLeaderboardData: Record<string, ExtendedLeaderboardEntry[]> = {\r\n    bronze: [\r\n      { userId: '101', username: 'NewLearner', score: 150, rank: 1, change: 0, seasonalRewards: { bronze: 1 } },\r\n      { userId: '102', username: 'StudyBuddy', score: 140, rank: 2, change: 1, seasonalRewards: { bronze: 1 } },\r\n      { userId: '103', username: 'FlashFan', score: 135, rank: 3, change: -1, seasonalRewards: { bronze: 1 } },\r\n      { userId: '104', username: 'CardMaster', score: 130, rank: 4, change: 2, seasonalRewards: { bronze: 1 } },\r\n      { userId: '105', username: 'QuickStudy', score: 125, rank: 5, change: 0, seasonalRewards: { bronze: 1 } }\r\n    ],\r\n    silver: [\r\n      { userId: '201', username: 'SilverStar', score: 450, rank: 1, change: 0, seasonalRewards: { silver: 1 } },\r\n      { userId: '202', username: 'StudyPro', score: 420, rank: 2, change: 1, seasonalRewards: { silver: 1 } },\r\n      { userId: '203', username: 'FlashExpert', score: 400, rank: 3, change: -1, seasonalRewards: { silver: 1 } },\r\n      { userId: '204', username: 'MemoryMaster', score: 380, rank: 4, change: 2, seasonalRewards: { silver: 1 } },\r\n      { userId: '205', username: 'StudyElite', score: 360, rank: 5, change: -1, seasonalRewards: { silver: 1 } }\r\n    ],\r\n    gold: [\r\n      { userId: '301', username: 'GoldChampion', score: 850, rank: 1, change: 0, seasonalRewards: { gold: 1 } },\r\n      { userId: '302', username: 'StudyLegend', score: 820, rank: 2, change: 1, seasonalRewards: { gold: 1 } },\r\n      { userId: '303', username: 'FlashMaster', score: 800, rank: 3, change: -1, seasonalRewards: { gold: 1 } },\r\n      { userId: '304', username: 'MemoryGuru', score: 780, rank: 4, change: 2, seasonalRewards: { gold: 1 } },\r\n      { userId: '305', username: 'StudyKing', score: 760, rank: 5, change: -1, seasonalRewards: { gold: 1 } }\r\n    ],\r\n    diamond: [\r\n      { userId: '401', username: 'DiamondElite', score: 1500, rank: 1, change: 0, seasonalRewards: { diamond: 1 } },\r\n      { userId: '402', username: 'StudyGod', score: 1450, rank: 2, change: 0, seasonalRewards: { diamond: 1 } },\r\n      { userId: '403', username: 'FlashLegend', score: 1400, rank: 3, change: 1, seasonalRewards: { diamond: 1 } },\r\n      { userId: '404', username: 'MemoryTitan', score: 1350, rank: 4, change: -1, seasonalRewards: { diamond: 1 } },\r\n      { userId: '405', username: 'StudyEmperor', score: 1300, rank: 5, change: 0, seasonalRewards: { diamond: 1 } }\r\n    ]\r\n  }\r\n\r\n  const currentLeaderboard = mockLeaderboardData[selectedTier] || []\r\n\r\n  const getTierColor = (tier: string) => {\r\n    const colors = {\r\n      bronze: 'from-orange-400 to-orange-600',\r\n      silver: 'from-gray-400 to-gray-600',\r\n      gold: 'from-yellow-400 to-yellow-600',\r\n      diamond: 'from-blue-400 to-purple-600'\r\n    }\r\n    return colors[tier as keyof typeof colors] || colors.gold\r\n  }\r\n\r\n  const getTierIcon = (tier: string) => {\r\n    const icons = {\r\n      bronze: '🥉',\r\n      silver: '🥈',\r\n      gold: '🥇',\r\n      diamond: '💎'\r\n    }\r\n    return icons[tier as keyof typeof icons] || icons.gold\r\n  }\r\n\r\n  const getRankIcon = (rank: number) => {\r\n    if (rank === 1) return '👑'\r\n    if (rank === 2) return '🥈'\r\n    if (rank === 3) return '🥉'\r\n    return `#${rank}`\r\n  }\r\n\r\n  const getChangeIcon = (change: number) => {\r\n    if (change > 0) return <span className=\"text-green-500\">↗️ +{change}</span>\r\n    if (change < 0) return <span className=\"text-red-500\">↘️ {change}</span>\r\n    return <span className=\"text-gray-500\">➡️ 0</span>\r\n  }\r\n\r\n  const getTierRequirement = (tier: string) => {\r\n    const requirements = {\r\n      bronze: '0-200 points',\r\n      silver: '201-500 points',\r\n      gold: '501-1000 points',\r\n      diamond: '1000+ points'\r\n    }\r\n    return requirements[tier as keyof typeof requirements]\r\n  }\r\n\r\n  const getTierRewards = (tier: string) => {\r\n    const rewards = {\r\n      bronze: '50 XP, 10 Gold',\r\n      silver: '150 XP, 50 Gold, 5 Gems',\r\n      gold: '300 XP, 150 Gold, 15 Gems, Badge',\r\n      diamond: '500 XP, 300 Gold, 30 Gems, Exclusive Badge, Custom Theme'\r\n    }\r\n    return rewards[tier as keyof typeof rewards]\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div>\r\n          <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">\r\n            🌍 Community Leaderboard\r\n          </h3>\r\n          <p className=\"text-gray-600 dark:text-gray-300\">\r\n            {challengeName} - Compete with players worldwide\r\n          </p>\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">Updated</div>\r\n          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">2 min ago</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Time Filter */}\r\n      <div className=\"flex gap-2 mb-6\">\r\n        {(['daily', 'weekly', 'monthly'] as const).map(filter => (\r\n          <button\r\n            key={filter}\r\n            onClick={() => setTimeFilter(filter)}\r\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n              timeFilter === filter\r\n                ? 'bg-purple-500 text-white'\r\n                : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'\r\n            }`}\r\n          >\r\n            {filter.charAt(0).toUpperCase() + filter.slice(1)}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Tier Selection */}\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mb-6\">\r\n        {(['bronze', 'silver', 'gold', 'diamond'] as const).map(tier => (\r\n          <button\r\n            key={tier}\r\n            onClick={() => setSelectedTier(tier)}\r\n            className={`p-4 rounded-lg border-2 transition-all ${\r\n              selectedTier === tier\r\n                ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/20'\r\n                : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\r\n            }`}\r\n          >\r\n            <div className={`text-2xl mb-2 bg-gradient-to-r ${getTierColor(tier)} bg-clip-text text-transparent`}>\r\n              {getTierIcon(tier)}\r\n            </div>\r\n            <div className=\"font-medium text-gray-900 dark:text-white capitalize\">\r\n              {tier} Tier\r\n            </div>\r\n            <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n              {getTierRequirement(tier)}\r\n            </div>\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Tier Info */}\r\n      <div className={`p-4 rounded-lg bg-gradient-to-r ${getTierColor(selectedTier)} bg-opacity-10 border border-opacity-20 mb-6`}>\r\n        <div className=\"flex items-center gap-3 mb-2\">\r\n          <span className=\"text-2xl\">{getTierIcon(selectedTier)}</span>\r\n          <div>\r\n            <h4 className=\"font-bold text-gray-900 dark:text-white capitalize\">\r\n              {selectedTier} Tier Rewards\r\n            </h4>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n              {getTierRewards(selectedTier)}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n          Requirement: {getTierRequirement(selectedTier)}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Leaderboard */}\r\n      <div className=\"space-y-3\">\r\n        {currentLeaderboard.map((entry) => (\r\n          <div\r\n            key={entry.userId}\r\n            className={`flex items-center gap-4 p-4 rounded-lg border transition-all hover:shadow-md ${\r\n              entry.rank <= 3\r\n                ? 'bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-200 dark:border-yellow-800'\r\n                : 'bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600'\r\n            }`}\r\n          >\r\n            {/* Rank */}\r\n            <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-white dark:bg-gray-800 shadow-sm\">\r\n              <span className=\"text-lg font-bold\">\r\n                {typeof getRankIcon(entry.rank) === 'string' && getRankIcon(entry.rank).includes('#') \r\n                  ? getRankIcon(entry.rank) \r\n                  : getRankIcon(entry.rank)\r\n                }\r\n              </span>\r\n            </div>\r\n\r\n            {/* User Info */}\r\n            <div className=\"flex-1\">\r\n              <div className=\"flex items-center gap-2 mb-1\">\r\n                <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                  {entry.username}\r\n                </span>\r\n                <span className={`text-xs px-2 py-1 rounded-full bg-gradient-to-r ${getTierColor(selectedTier)} text-white`}>\r\n                  {selectedTier.toUpperCase()}\r\n                </span>\r\n                {entry.seasonalRewards && Object.keys(entry.seasonalRewards).length > 0 && (\r\n                  <span className=\"text-xs px-2 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 rounded-full\">\r\n                    🏆 Seasonal Winner\r\n                  </span>\r\n                )}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                {entry.score.toLocaleString()} points this {timeFilter}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Change Indicator */}\r\n            <div className=\"text-sm\">\r\n              {getChangeIcon(entry.change)}\r\n            </div>\r\n\r\n            {/* Score */}\r\n            <div className=\"text-right\">\r\n              <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\r\n                {entry.score.toLocaleString()}\r\n              </div>\r\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                points\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Promotion/Demotion Info */}\r\n      <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\r\n        <div className=\"flex items-center gap-2 mb-2\">\r\n          <span className=\"text-blue-500\">ℹ️</span>\r\n          <span className=\"font-medium text-blue-900 dark:text-blue-100\">\r\n            Tier Progression\r\n          </span>\r\n        </div>\r\n        <div className=\"text-sm text-blue-800 dark:text-blue-200\">\r\n          • Reach the next tier's point threshold to get promoted\r\n          • Fall below your current tier's minimum to get demoted\r\n          • Tier changes happen at the end of each weekly period\r\n          • Higher tiers unlock better rewards and exclusive features\r\n        </div>\r\n      </div>\r\n\r\n      {/* Global Stats */}\r\n      <div className=\"mt-6 grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n        <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n          <div className=\"text-lg font-bold text-gray-900 dark:text-white\">47,892</div>\r\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">Total Players</div>\r\n        </div>\r\n        <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n          <div className=\"text-lg font-bold text-gray-900 dark:text-white\">2.4M</div>\r\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">Cards Studied</div>\r\n        </div>\r\n        <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n          <div className=\"text-lg font-bold text-gray-900 dark:text-white\">89.2%</div>\r\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">Avg Accuracy</div>\r\n        </div>\r\n        <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n          <div className=\"text-lg font-bold text-gray-900 dark:text-white\">156h</div>\r\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">Study Time</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useState, useEffect, useCallback } from 'react'\r\nimport { realTimeDataService, type GlobalLearningStats, type EducationalTrends, type LiveUserMetrics, type MarketInsights } from '../services/realTimeDataService'\r\n\r\ninterface RealTimeDataState {\r\n  globalStats: GlobalLearningStats | null\r\n  educationalTrends: EducationalTrends | null\r\n  liveMetrics: LiveUserMetrics | null\r\n  marketInsights: MarketInsights | null\r\n  isLoading: boolean\r\n  error: string | null\r\n  lastUpdated: Date | null\r\n}\r\n\r\ninterface UseRealTimeDataOptions {\r\n  autoRefresh?: boolean\r\n  refreshInterval?: number\r\n  enableSubscriptions?: boolean\r\n}\r\n\r\nexport const useRealTimeData = (options: UseRealTimeDataOptions = {}) => {\r\n  const {\r\n    autoRefresh = true,\r\n    refreshInterval = 30000, // 30 seconds\r\n    enableSubscriptions = true\r\n  } = options\r\n\r\n  const [state, setState] = useState<RealTimeDataState>({\r\n    globalStats: null,\r\n    educationalTrends: null,\r\n    liveMetrics: null,\r\n    marketInsights: null,\r\n    isLoading: true,\r\n    error: null,\r\n    lastUpdated: null\r\n  })\r\n\r\n  // Load all real-time data\r\n  const loadData = useCallback(async () => {\r\n    try {\r\n      setState(prev => ({ ...prev, isLoading: true, error: null }))\r\n      \r\n      const [globalStats, educationalTrends, liveMetrics, marketInsights] = await Promise.all([\r\n        realTimeDataService.getGlobalLearningStats(),\r\n        realTimeDataService.getEducationalTrends(),\r\n        realTimeDataService.getLiveUserMetrics(),\r\n        realTimeDataService.getMarketInsights()\r\n      ])\r\n\r\n      setState({\r\n        globalStats,\r\n        educationalTrends,\r\n        liveMetrics,\r\n        marketInsights,\r\n        isLoading: false,\r\n        error: null,\r\n        lastUpdated: new Date()\r\n      })\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: error instanceof Error ? error.message : 'Failed to load real-time data'\r\n      }))\r\n    }\r\n  }, [])\r\n\r\n  // Refresh specific data type\r\n  const refreshGlobalStats = useCallback(async () => {\r\n    try {\r\n      const globalStats = await realTimeDataService.getGlobalLearningStats()\r\n      setState(prev => ({ ...prev, globalStats, lastUpdated: new Date() }))\r\n    } catch (error) {\r\n      console.error('Failed to refresh global stats:', error)\r\n    }\r\n  }, [])\r\n\r\n  const refreshEducationalTrends = useCallback(async () => {\r\n    try {\r\n      const educationalTrends = await realTimeDataService.getEducationalTrends()\r\n      setState(prev => ({ ...prev, educationalTrends, lastUpdated: new Date() }))\r\n    } catch (error) {\r\n      console.error('Failed to refresh educational trends:', error)\r\n    }\r\n  }, [])\r\n\r\n  const refreshLiveMetrics = useCallback(async () => {\r\n    try {\r\n      const liveMetrics = await realTimeDataService.getLiveUserMetrics()\r\n      setState(prev => ({ ...prev, liveMetrics, lastUpdated: new Date() }))\r\n    } catch (error) {\r\n      console.error('Failed to refresh live metrics:', error)\r\n    }\r\n  }, [])\r\n\r\n  const refreshMarketInsights = useCallback(async () => {\r\n    try {\r\n      const marketInsights = await realTimeDataService.getMarketInsights()\r\n      setState(prev => ({ ...prev, marketInsights, lastUpdated: new Date() }))\r\n    } catch (error) {\r\n      console.error('Failed to refresh market insights:', error)\r\n    }\r\n  }, [])\r\n\r\n  // Manual refresh all data\r\n  const refresh = useCallback(() => {\r\n    loadData()\r\n  }, [loadData])\r\n\r\n  // Set up subscriptions and auto-refresh\r\n  useEffect(() => {\r\n    // Initial load\r\n    loadData()\r\n\r\n    let refreshTimer: NodeJS.Timeout | null = null\r\n    const unsubscribeFunctions: (() => void)[] = []\r\n    let stopRealTimeUpdates: (() => void) | null = null\r\n\r\n    if (enableSubscriptions) {\r\n      // Set up real-time subscriptions\r\n      const unsubscribeGlobal = realTimeDataService.subscribe('globalStats', (data: GlobalLearningStats) => {\r\n        setState(prev => ({ ...prev, globalStats: data, lastUpdated: new Date() }))\r\n      })\r\n\r\n      const unsubscribeTrends = realTimeDataService.subscribe('educationalTrends', (data: EducationalTrends) => {\r\n        setState(prev => ({ ...prev, educationalTrends: data, lastUpdated: new Date() }))\r\n      })\r\n\r\n      const unsubscribeLive = realTimeDataService.subscribe('liveMetrics', (data: LiveUserMetrics) => {\r\n        setState(prev => ({ ...prev, liveMetrics: data, lastUpdated: new Date() }))\r\n      })\r\n\r\n      const unsubscribeMarket = realTimeDataService.subscribe('marketInsights', (data: MarketInsights) => {\r\n        setState(prev => ({ ...prev, marketInsights: data, lastUpdated: new Date() }))\r\n      })\r\n\r\n      unsubscribeFunctions.push(unsubscribeGlobal, unsubscribeTrends, unsubscribeLive, unsubscribeMarket)\r\n\r\n      // Start real-time updates service with reference counting\r\n      stopRealTimeUpdates = realTimeDataService.startRealTimeUpdates()\r\n    }\r\n\r\n    if (autoRefresh) {\r\n      // Set up auto-refresh timer\r\n      refreshTimer = setInterval(() => {\r\n        loadData()\r\n      }, refreshInterval)\r\n    }\r\n\r\n    return () => {\r\n      // Cleanup subscriptions\r\n      unsubscribeFunctions.forEach(unsubscribe => unsubscribe())\r\n      \r\n      // Stop real-time updates (reference counting will handle when to actually stop)\r\n      if (stopRealTimeUpdates) {\r\n        stopRealTimeUpdates()\r\n      }\r\n      \r\n      // Clear refresh timer\r\n      if (refreshTimer) {\r\n        clearInterval(refreshTimer)\r\n      }\r\n    }\r\n  }, [loadData, autoRefresh, refreshInterval, enableSubscriptions])\r\n\r\n  return {\r\n    ...state,\r\n    refresh,\r\n    refreshGlobalStats,\r\n    refreshEducationalTrends,\r\n    refreshLiveMetrics,\r\n    refreshMarketInsights,\r\n    // Utility functions\r\n    formatNumber: (num: number): string => {\r\n      if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`\r\n      if (num >= 1000) return `${(num / 1000).toFixed(1)}K`\r\n      return num.toString()\r\n    },\r\n    formatTime: (minutes: number): string => {\r\n      const hours = Math.floor(minutes / 60)\r\n      const mins = minutes % 60\r\n      if (hours > 0) return `${hours}h ${mins}m`\r\n      return `${mins}m`\r\n    },\r\n    getTimeSinceUpdate: (): string => {\r\n      if (!state.lastUpdated) return 'Never'\r\n      const now = new Date()\r\n      const diff = now.getTime() - state.lastUpdated.getTime()\r\n      const seconds = Math.floor(diff / 1000)\r\n      const minutes = Math.floor(seconds / 60)\r\n      \r\n      if (minutes > 0) return `${minutes}m ago`\r\n      return `${seconds}s ago`\r\n    }\r\n  }\r\n}\r\n\r\n// Hook for specific data types\r\nexport const useGlobalStats = () => {\r\n  const { globalStats, isLoading, error, refreshGlobalStats } = useRealTimeData({\r\n    enableSubscriptions: true,\r\n    autoRefresh: true,\r\n    refreshInterval: 15000 // More frequent updates for global stats\r\n  })\r\n\r\n  return {\r\n    data: globalStats,\r\n    isLoading,\r\n    error,\r\n    refresh: refreshGlobalStats\r\n  }\r\n}\r\n\r\nexport const useEducationalTrends = () => {\r\n  const { educationalTrends, isLoading, error, refreshEducationalTrends } = useRealTimeData({\r\n    enableSubscriptions: true,\r\n    autoRefresh: true,\r\n    refreshInterval: 60000 // Less frequent updates for trends\r\n  })\r\n\r\n  return {\r\n    data: educationalTrends,\r\n    isLoading,\r\n    error,\r\n    refresh: refreshEducationalTrends\r\n  }\r\n}\r\n\r\nexport const useLiveMetrics = () => {\r\n  const { liveMetrics, isLoading, error, refreshLiveMetrics } = useRealTimeData({\r\n    enableSubscriptions: true,\r\n    autoRefresh: true,\r\n    refreshInterval: 10000 // Very frequent updates for live metrics\r\n  })\r\n\r\n  return {\r\n    data: liveMetrics,\r\n    isLoading,\r\n    error,\r\n    refresh: refreshLiveMetrics\r\n  }\r\n}\r\n\r\nexport const useMarketInsights = () => {\r\n  const { marketInsights, isLoading, error, refreshMarketInsights } = useRealTimeData({\r\n    enableSubscriptions: true,\r\n    autoRefresh: true,\r\n    refreshInterval: 300000 // Less frequent updates for market data (5 minutes)\r\n  })\r\n\r\n  return {\r\n    data: marketInsights,\r\n    isLoading,\r\n    error,\r\n    refresh: refreshMarketInsights\r\n  }\r\n}","import { useState } from 'react'\r\nimport { useRealTimeData } from '../../hooks/useRealTimeData'\r\n\r\ninterface RealTimeStatsCardProps {\r\n  title: string\r\n  icon: string\r\n  className?: string\r\n  showRefreshButton?: boolean\r\n  compact?: boolean\r\n}\r\n\r\nconst RealTimeStatsCard: React.FC<RealTimeStatsCardProps> = ({\r\n  title,\r\n  icon,\r\n  className = '',\r\n  showRefreshButton = true,\r\n  compact = false\r\n}) => {\r\n  const {\r\n    globalStats,\r\n    liveMetrics,\r\n    isLoading,\r\n    error,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    lastUpdated,\r\n    refresh,\r\n    formatNumber,\r\n    formatTime,\r\n    getTimeSinceUpdate\r\n  } = useRealTimeData()\r\n\r\n  const [isRefreshing, setIsRefreshing] = useState(false)\r\n\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true)\r\n    await refresh()\r\n    setTimeout(() => setIsRefreshing(false), 1000) // Visual feedback\r\n  }\r\n\r\n  if (isLoading && !globalStats) {\r\n    return (\r\n      <div className={`card p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"h-6 bg-gray-300 dark:bg-gray-600 rounded w-32\"></div>\r\n            <div className=\"h-4 w-4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n          </div>\r\n          <div className=\"space-y-3\">\r\n            <div className=\"h-8 bg-gray-300 dark:bg-gray-600 rounded w-20\"></div>\r\n            <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-24\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`card p-6 border-red-200 dark:border-red-800 ${className}`}>\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h3 className=\"text-lg font-semibold text-red-600 dark:text-red-400\">\r\n            {icon} {title}\r\n          </h3>\r\n          {showRefreshButton && (\r\n            <button\r\n              onClick={handleRefresh}\r\n              className=\"text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300\"\r\n              disabled={isRefreshing}\r\n            >\r\n              <span className={isRefreshing ? 'animate-spin' : ''}>🔄</span>\r\n            </button>\r\n          )}\r\n        </div>\r\n        <div className=\"text-sm text-red-600 dark:text-red-400\">\r\n          Failed to load real-time data\r\n        </div>\r\n        <button\r\n          onClick={handleRefresh}\r\n          className=\"mt-2 text-sm text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 underline\"\r\n        >\r\n          Try again\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={`card p-6 ${className}`}>\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className={`font-semibold flex items-center gap-2 ${compact ? 'text-base' : 'text-lg'}`}>\r\n          {icon} {title}\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n        </h3>\r\n        {showRefreshButton && (\r\n          <button\r\n            onClick={handleRefresh}\r\n            className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n            disabled={isRefreshing}\r\n            title=\"Refresh data\"\r\n          >\r\n            <span className={isRefreshing ? 'animate-spin' : ''}>🔄</span>\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {globalStats && liveMetrics && (\r\n        <div className={`space-y-${compact ? '2' : '4'}`}>\r\n          {/* Key Metrics */}\r\n          <div className={`grid grid-cols-2 ${compact ? 'gap-2' : 'gap-4'}`}>\r\n            <div className=\"text-center\">\r\n              <div className={`font-bold text-blue-600 ${compact ? 'text-lg' : 'text-2xl'}`}>\r\n                {formatNumber(globalStats.activeStudySessions)}\r\n              </div>\r\n              <div className={`text-gray-600 dark:text-gray-400 ${compact ? 'text-xs' : 'text-sm'}`}>\r\n                Active Sessions\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className={`font-bold text-green-600 ${compact ? 'text-lg' : 'text-2xl'}`}>\r\n                {formatNumber(liveMetrics.onlineUsers)}\r\n              </div>\r\n              <div className={`text-gray-600 dark:text-gray-400 ${compact ? 'text-xs' : 'text-sm'}`}>\r\n                Online Users\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {!compact && (\r\n            <>\r\n              {/* Additional Stats */}\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-lg font-bold text-purple-600\">\r\n                    {formatNumber(globalStats.cardsStudiedToday)}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    Cards Today\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-lg font-bold text-orange-600\">\r\n                    {liveMetrics.averageAccuracy.toFixed(1)}%\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    Avg Accuracy\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Study Time */}\r\n              <div className=\"text-center\">\r\n                <div className=\"text-lg font-bold text-red-600\">\r\n                  {formatTime(globalStats.studyTimeToday)}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  Global Study Time Today\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          {/* Last Updated */}\r\n          <div className={`text-center text-gray-500 dark:text-gray-400 ${compact ? 'text-xs' : 'text-sm'}`}>\r\n            Updated {getTimeSinceUpdate()}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RealTimeStatsCard","import { useEducationalTrends } from '../../hooks/useRealTimeData'\r\n\r\ninterface TrendingTopicsProps {\r\n  className?: string\r\n  maxItems?: number\r\n  showGrowth?: boolean\r\n}\r\n\r\nconst TrendingTopics: React.FC<TrendingTopicsProps> = ({\r\n  className = '',\r\n  maxItems = 8,\r\n  showGrowth = true\r\n}) => {\r\n  const { data: trends, isLoading, error, refresh } = useEducationalTrends()\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`card p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-6 bg-gray-300 dark:bg-gray-600 rounded w-48 mb-4\"></div>\r\n          <div className=\"space-y-3\">\r\n            {[...Array(4)].map((_, i) => (\r\n              <div key={i} className=\"flex justify-between items-center\">\r\n                <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-32\"></div>\r\n                <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-16\"></div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error || !trends) {\r\n    return (\r\n      <div className={`card p-6 border-red-200 dark:border-red-800 ${className}`}>\r\n        <h3 className=\"text-lg font-semibold text-red-600 dark:text-red-400 mb-4\">\r\n          📈 Trending Topics\r\n        </h3>\r\n        <div className=\"text-sm text-red-600 dark:text-red-400 mb-2\">\r\n          Failed to load trending data\r\n        </div>\r\n        <button\r\n          onClick={refresh}\r\n          className=\"text-sm text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 underline\"\r\n        >\r\n          Try again\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const formatNumber = (num: number): string => {\r\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`\r\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`\r\n    return num.toString()\r\n  }\r\n\r\n  const getGrowthColor = (growth: number): string => {\r\n    if (growth >= 100) return 'text-green-600 dark:text-green-400'\r\n    if (growth >= 50) return 'text-blue-600 dark:text-blue-400'\r\n    if (growth >= 20) return 'text-yellow-600 dark:text-yellow-400'\r\n    return 'text-gray-600 dark:text-gray-400'\r\n  }\r\n\r\n  const getGrowthIcon = (growth: number): string => {\r\n    if (growth >= 100) return '🚀'\r\n    if (growth >= 50) return '📈'\r\n    if (growth >= 20) return '⬆️'\r\n    return '➡️'\r\n  }\r\n\r\n  return (\r\n    <div className={`card p-6 ${className}`}>\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\r\n          📈 Trending Topics\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n        </h3>\r\n        <button\r\n          onClick={refresh}\r\n          className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n          title=\"Refresh trends\"\r\n        >\r\n          🔄\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"space-y-3\">\r\n        {trends.popularSubjects.slice(0, maxItems).map((subject, index) => (\r\n          <div\r\n            key={subject.subject}\r\n            className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\r\n          >\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm\">\r\n                {index + 1}\r\n              </div>\r\n              <div>\r\n                <div className=\"font-semibold text-gray-800 dark:text-gray-200\">\r\n                  {subject.subject}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  {formatNumber(subject.learners)} learners\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {showGrowth && (\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className=\"text-lg\">{getGrowthIcon(subject.growth)}</span>\r\n                <div className=\"text-right\">\r\n                  <div className={`font-bold ${getGrowthColor(subject.growth)}`}>\r\n                    +{subject.growth.toFixed(1)}%\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                    growth\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Learning Methods Section */}\r\n      <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n        <h4 className=\"text-md font-semibold mb-3 text-gray-800 dark:text-gray-200\">\r\n          🎯 Most Effective Methods\r\n        </h4>\r\n        <div className=\"space-y-2\">\r\n          {trends.learningMethods.slice(0, 3).map((method) => (\r\n            <div key={method.method} className=\"flex items-center justify-between\">\r\n              <span className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                {method.method}\r\n              </span>\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"w-16 bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\r\n                  <div\r\n                    className=\"bg-blue-600 h-2 rounded-full\"\r\n                    style={{ width: `${method.effectiveness}%` }}\r\n                  ></div>\r\n                </div>\r\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">\r\n                  {method.effectiveness.toFixed(0)}%\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Peak Hours Visualization */}\r\n      <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n        <h4 className=\"text-md font-semibold mb-3 text-gray-800 dark:text-gray-200\">\r\n          ⏰ Peak Study Hours Today\r\n        </h4>\r\n        <div className=\"flex items-end justify-between gap-1 h-16\">\r\n          {trends.studyPatterns.peakHours.filter((_, i) => i % 2 === 0).map((hour) => (\r\n            <div key={hour.hour} className=\"flex flex-col items-center flex-1\">\r\n              <div\r\n                className=\"bg-gradient-to-t from-blue-600 to-blue-400 rounded-sm w-full\"\r\n                style={{ height: `${Math.max(hour.activity / 2, 8)}px` }}\r\n                title={`${hour.hour}:00 - ${hour.activity}% activity`}\r\n              ></div>\r\n              <div className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">\r\n                {hour.hour}h\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-2 text-center\">\r\n          Current hour activity: {trends.studyPatterns.peakHours[new Date().getHours()]?.activity || 0}%\r\n        </div>\r\n      </div>\r\n\r\n      {/* Last Updated */}\r\n      <div className=\"text-xs text-gray-500 dark:text-gray-400 text-center mt-4\">\r\n        Last updated: {new Date(trends.lastUpdated).toLocaleTimeString()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TrendingTopics","import { useMarketInsights } from '../../hooks/useRealTimeData'\r\n\r\ninterface MarketInsightsProps {\r\n  className?: string\r\n  maxSkills?: number\r\n  maxIndustries?: number\r\n  showCertifications?: boolean\r\n}\r\n\r\nconst MarketInsights: React.FC<MarketInsightsProps> = ({\r\n  className = '',\r\n  maxSkills = 6,\r\n  maxIndustries = 4,\r\n  showCertifications = true\r\n}) => {\r\n  const { data: insights, isLoading, error, refresh } = useMarketInsights()\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`card p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-6 bg-gray-300 dark:bg-gray-600 rounded w-48 mb-4\"></div>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-3\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"flex justify-between items-center\">\r\n                  <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-24\"></div>\r\n                  <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-16\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"space-y-3\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"h-16 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error || !insights) {\r\n    return (\r\n      <div className={`card p-6 border-red-200 dark:border-red-800 ${className}`}>\r\n        <h3 className=\"text-lg font-semibold text-red-600 dark:text-red-400 mb-4\">\r\n          💼 Market Insights\r\n        </h3>\r\n        <div className=\"text-sm text-red-600 dark:text-red-400 mb-2\">\r\n          Failed to load market data\r\n        </div>\r\n        <button\r\n          onClick={refresh}\r\n          className=\"text-sm text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 underline\"\r\n        >\r\n          Try again\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const getDemandColor = (demand: number): string => {\r\n    if (demand >= 90) return 'text-red-600 dark:text-red-400'\r\n    if (demand >= 80) return 'text-orange-600 dark:text-orange-400'\r\n    if (demand >= 70) return 'text-yellow-600 dark:text-yellow-400'\r\n    return 'text-green-600 dark:text-green-400'\r\n  }\r\n\r\n  const getDemandLabel = (demand: number): string => {\r\n    if (demand >= 90) return 'Very High'\r\n    if (demand >= 80) return 'High'\r\n    if (demand >= 70) return 'Medium'\r\n    return 'Growing'\r\n  }\r\n\r\n  const getGrowthIcon = (growth: number): string => {\r\n    if (growth >= 150) return '🚀'\r\n    if (growth >= 100) return '📈'\r\n    if (growth >= 50) return '⬆️'\r\n    return '➡️'\r\n  }\r\n\r\n  return (\r\n    <div className={`card p-6 ${className}`}>\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\r\n          💼 Market Insights\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n        </h3>\r\n        <button\r\n          onClick={refresh}\r\n          className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n          title=\"Refresh market data\"\r\n        >\r\n          🔄\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Skills in Demand */}\r\n        <div>\r\n          <h4 className=\"text-md font-semibold mb-4 text-gray-800 dark:text-gray-200 flex items-center gap-2\">\r\n            🎯 Skills in High Demand\r\n          </h4>\r\n          <div className=\"space-y-3\">\r\n            {insights.skillDemand.slice(0, maxSkills).map((skill, index) => (\r\n              <div\r\n                key={skill.skill}\r\n                className=\"bg-gray-50 dark:bg-gray-700 p-3 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-xs\">\r\n                      {index + 1}\r\n                    </div>\r\n                    <span className=\"font-semibold text-gray-800 dark:text-gray-200\">\r\n                      {skill.skill}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"text-lg\">{getGrowthIcon(skill.growth)}</span>\r\n                    <span className=\"text-sm font-bold text-green-600 dark:text-green-400\">\r\n                      +{skill.growth.toFixed(0)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex-1 mr-3\">\r\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\r\n                      <div\r\n                        className=\"bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-300\"\r\n                        style={{ width: `${skill.demand}%` }}\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n                  <span className={`text-sm font-semibold ${getDemandColor(skill.demand)}`}>\r\n                    {getDemandLabel(skill.demand)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Industry Trends */}\r\n        <div>\r\n          <h4 className=\"text-md font-semibold mb-4 text-gray-800 dark:text-gray-200 flex items-center gap-2\">\r\n            🏭 Growing Industries\r\n          </h4>\r\n          <div className=\"space-y-3\">\r\n            {insights.industryTrends.slice(0, maxIndustries).map((industry, index) => (\r\n              <div\r\n                key={industry.industry}\r\n                className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <h5 className=\"font-semibold text-gray-800 dark:text-gray-200 flex items-center gap-2\">\r\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-green-500 to-blue-600 rounded-full flex items-center justify-center text-white font-bold text-xs\">\r\n                      {index + 1}\r\n                    </div>\r\n                    {industry.industry}\r\n                  </h5>\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <span className=\"text-lg\">{getGrowthIcon(industry.growth)}</span>\r\n                    <span className=\"text-sm font-bold text-green-600 dark:text-green-400\">\r\n                      +{industry.growth.toFixed(0)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  <span className=\"font-medium\">Key Skills: </span>\r\n                  {industry.skills.join(', ')}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Certifications Section */}\r\n      {showCertifications && (\r\n        <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n          <h4 className=\"text-md font-semibold mb-4 text-gray-800 dark:text-gray-200 flex items-center gap-2\">\r\n            🏆 Most Valuable Certifications\r\n          </h4>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n            {insights.certificationValue.slice(0, 4).map((cert, index) => (\r\n              <div\r\n                key={cert.cert}\r\n                className=\"bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 p-3 rounded-lg border border-yellow-200 dark:border-yellow-800\"\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-yellow-500 to-orange-600 rounded-full flex items-center justify-center text-white font-bold text-xs\">\r\n                      {index + 1}\r\n                    </div>\r\n                    <span className=\"font-semibold text-gray-800 dark:text-gray-200 text-sm\">\r\n                      {cert.cert}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center justify-between text-xs\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"text-gray-600 dark:text-gray-400\">Value:</span>\r\n                    <div className=\"w-12 bg-gray-200 dark:bg-gray-600 rounded-full h-1.5\">\r\n                      <div\r\n                        className=\"bg-yellow-500 h-1.5 rounded-full\"\r\n                        style={{ width: `${cert.value}%` }}\r\n                      ></div>\r\n                    </div>\r\n                    <span className=\"font-semibold text-yellow-600 dark:text-yellow-400\">\r\n                      {cert.value.toFixed(0)}%\r\n                    </span>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center gap-1\">\r\n                    <span className=\"text-gray-600 dark:text-gray-400\">Popular:</span>\r\n                    <span className=\"font-semibold text-orange-600 dark:text-orange-400\">\r\n                      {cert.popularity.toFixed(0)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Market Summary */}\r\n      <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\r\n          <h5 className=\"font-semibold text-blue-800 dark:text-blue-200 mb-2 flex items-center gap-2\">\r\n            💡 Market Summary\r\n          </h5>\r\n          <div className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\r\n            <p>• AI/ML skills show the highest demand with {insights.skillDemand[0]?.growth.toFixed(0)}% growth</p>\r\n            <p>• Technology sector leads with {insights.industryTrends[0]?.growth.toFixed(0)}% industry growth</p>\r\n            <p>• Cloud certifications offer the best ROI for career advancement</p>\r\n            <p>• Remote learning skills are becoming increasingly valuable</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Last Updated */}\r\n      <div className=\"text-xs text-gray-500 dark:text-gray-400 text-center mt-4\">\r\n        Market data updated: {new Date(insights.lastUpdated).toLocaleTimeString()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MarketInsights"],"names":["XPBar","currentXP","level","className","getXPForLevel","lvl","getXPForNextLevel","currentLevelXP","nextLevelXP","xpInCurrentLevel","xpNeededForNextLevel","progressPercentage","jsxs","jsx","Fragment","StreakCounter","currentStreak","longestStreak","lastStudyDate","isStreakActive","lastStudy","diffTime","status","getStreakColor","getStreakIcon","getStreakMessage","_","i","MonthlyChallenge","challenge","participation","claimMilestoneReward","useGamificationStore","progress","milestoneProgress","weeklyProgress","bestWeek","totalTarget","sum","req","totalCurrent","key","milestones","storyChapters","w","handleClaimMilestone","milestoneId","getWeekProgress","week","getDifficultyColor","getDifficultyLabel","weekData","isCompleted","isCurrentWeek","a","b","chapter","milestone","isClaimed","canClaim","CommunityLeaderboard","challengeName","selectedTier","setSelectedTier","useState","timeFilter","setTimeFilter","currentLeaderboard","getTierColor","tier","colors","getTierIcon","icons","getRankIcon","rank","getChangeIcon","change","getTierRequirement","getTierRewards","filter","entry","useRealTimeData","options","autoRefresh","refreshInterval","enableSubscriptions","state","setState","loadData","useCallback","prev","globalStats","educationalTrends","liveMetrics","marketInsights","realTimeDataService","error","refreshGlobalStats","refreshEducationalTrends","refreshLiveMetrics","refreshMarketInsights","refresh","useEffect","refreshTimer","unsubscribeFunctions","stopRealTimeUpdates","unsubscribeGlobal","data","unsubscribeTrends","unsubscribeLive","unsubscribeMarket","unsubscribe","num","minutes","hours","mins","diff","seconds","useEducationalTrends","isLoading","useMarketInsights","RealTimeStatsCard","title","icon","showRefreshButton","compact","formatNumber","formatTime","getTimeSinceUpdate","isRefreshing","setIsRefreshing","handleRefresh","TrendingTopics","maxItems","showGrowth","trends","getGrowthColor","growth","getGrowthIcon","subject","index","method","hour","MarketInsights","maxSkills","maxIndustries","showCertifications","insights","getDemandColor","demand","getDemandLabel","skill","industry","cert"],"mappings":"0IAQA,MAAMA,EAA8B,CAAC,CAAE,UAAAC,EAAW,MAAAC,EAAO,UAAAC,EAAY,MAAS,CAE5E,MAAMC,EAAiBC,GAAgB,KAAK,IAAIA,EAAM,EAAG,CAAC,EAAI,IACxDC,EAAqBD,GAAgB,KAAK,IAAIA,EAAK,CAAC,EAAI,IAExDE,EAAiBH,EAAcF,CAAK,EACpCM,EAAcF,EAAkBJ,CAAK,EACrCO,EAAmBR,EAAYM,EAC/BG,EAAuBF,EAAcD,EAErCI,EAAqB,KAAK,IAAI,EAAG,KAAK,IAAKF,EAAmBC,EAAwB,IAAK,GAAG,CAAC,EAErG,OACEE,EAAAA,KAAC,MAAA,CAAI,UAAW,aAAaT,CAAS,GACpC,SAAA,CAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,4CACb,SAAA,CAAAA,EAAAA,KAAC,OAAA,CAAK,UAAU,+CAA+C,SAAA,CAAA,SACtDV,CAAA,EACT,EACAU,EAAAA,KAAC,OAAA,CAAK,UAAU,mCACb,SAAA,CAAAH,EAAiB,eAAA,EAAiB,MAAIC,EAAqB,eAAA,EAAiB,KAAA,CAAA,CAC/E,CAAA,EACF,EAEAE,EAAAA,KAAC,MAAA,CAAI,UAAU,WACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,uEACb,SAAAA,EAAAA,IAAC,MAAA,CACC,UAAU,iHACV,MAAO,CAAE,MAAO,GAAGF,CAAkB,GAAA,EAErC,SAAAE,EAAAA,IAAC,MAAA,CAAI,UAAU,yDAAA,CAA0D,CAAA,CAAA,EAE7E,EAGAA,EAAAA,IAAC,MAAA,CAAI,UAAU,oKACZ,SAAAX,CAAA,CACH,CAAA,EACF,QAEC,MAAA,CAAI,UAAU,uDACZ,SAAAM,EAAcP,EAAY,EACzBW,EAAAA,KAAAE,EAAAA,SAAA,CACI,SAAA,EAAAN,EAAcP,GAAW,eAAA,EAAiB,gBAAcC,EAAQ,CAAA,CAAA,CACpE,EAEA,oBAAA,CAEJ,CAAA,EACF,CAEJ,ECjDMa,EAA8C,CAAC,CACnD,cAAAC,EACA,cAAAC,EACA,cAAAC,EACA,UAAAf,EAAY,EACd,IAAM,CACJ,MAAMgB,EAAiB,IAAM,CAC3B,GAAI,CAACD,EAAe,MAAO,GAC3B,MAAME,EAAY,IAAI,KAAKF,CAAa,EAElCG,EAAW,KAAK,QADJ,KAAA,EACc,UAAYD,EAAU,SAAS,EAE/D,OADiB,KAAK,KAAKC,GAAY,IAAO,GAAK,GAAK,GAAG,GACxC,CACrB,EAQMC,EALAN,IAAkB,EAAU,WAC5BG,EAAA,EAAyB,SACtB,SAKHI,EAAiB,IAAM,CAC3B,OAAQD,EAAA,CACN,IAAK,SACH,MAAO,qCACT,IAAK,SACH,MAAO,uCACT,QACE,MAAO,kCAAA,CAEb,EAEME,EAAgB,IAAM,CAC1B,OAAQF,EAAA,CACN,IAAK,SACH,MAAO,KACT,IAAK,SACH,MAAO,KACT,QACE,MAAO,GAAA,CAEb,EAEMG,EAAmB,IAAM,CAC7B,OAAQH,EAAA,CACN,IAAK,SACH,OAAON,IAAkB,EAAI,eAAiB,cAChD,IAAK,SACH,MAAO,4BACT,QACE,MAAO,oBAAA,CAEb,EAEA,OACEJ,EAAAA,KAAC,MAAA,CAAI,UAAW,wFAAwFT,CAAS,GAC/G,SAAA,CAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,sDAAsD,SAAA,eAEpE,EACAA,EAAAA,IAAC,OAAA,CAAK,UAAU,WAAY,YAAc,CAAE,CAAA,EAC9C,EAEAD,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,MAAC,OAAI,UAAW,sBAAsBU,EAAA,CAAgB,GACnD,SAAAP,EACH,QACC,MAAA,CAAI,UAAU,2CACZ,SAAAA,IAAkB,EAAI,MAAQ,OACjC,EACAH,MAAC,OAAI,UAAW,uBAAuBU,GAAgB,GACpD,YAAiB,CACpB,CAAA,EACF,EAEAX,EAAAA,KAAC,MAAA,CAAI,UAAU,qDACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,4CACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,mCAAmC,SAAA,kBAEnD,EACAD,EAAAA,KAAC,OAAA,CAAK,UAAU,8CACb,SAAA,CAAAK,EAAc,IAAEA,IAAkB,EAAI,MAAQ,MAAA,CAAA,CACjD,CAAA,EACF,EAECC,GACCN,EAAAA,KAAC,MAAA,CAAI,UAAU,iDACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,mCAAmC,SAAA,cAEnD,EACAA,MAAC,QAAK,UAAU,+CACb,aAAI,KAAKK,CAAa,EAAE,oBAAmB,CAC9C,CAAA,CAAA,CACF,CAAA,EAEJ,EAGAN,EAAAA,KAAC,MAAA,CAAI,UAAU,qCACZ,SAAA,CAAA,MAAM,KAAK,CAAE,OAAQ,KAAK,IAAII,EAAe,CAAC,CAAA,EAAK,CAACU,EAAGC,IACtDd,EAAAA,IAAC,MAAA,CAEC,UAAW,wBACTS,IAAW,SACP,eACAA,IAAW,SACX,gBACA,8BACN,EAAA,EAPKK,CAAA,CASR,EACAX,EAAgB,GACfJ,OAAC,OAAA,CAAK,UAAU,gDAAgD,SAAA,CAAA,IAC5DI,EAAgB,CAAA,CAAA,CACpB,CAAA,CAAA,CAEJ,CAAA,CAAA,CACF,CAAA,EACF,CAEJ,EC3HaY,EAAoD,CAAC,CAChE,UAAAC,EACA,cAAAC,CACF,IAAM,CACJ,KAAM,CACJ,qBAAAC,CAAA,EACEC,EAAA,EAEEC,EAAWH,GAAe,UAAY,CAAA,EACtCI,EAAoBJ,GAAe,mBAAqB,CAAA,EACxDK,EAAiBL,GAAe,gBAAkB,CAAA,EAClDd,EAAgBc,GAAe,eAAiB,EAChDM,EAAWN,GAAe,UAAY,EAGtCO,EAAcR,EAAU,aAAa,OAAO,CAACS,EAAKC,IAAQD,EAAMC,EAAI,OAAQ,CAAC,EAC7EC,EAAeX,EAAU,aAAa,OAAO,CAACS,EAAKC,IAAQ,CAC/D,MAAME,EAAMF,EAAI,KAChB,OAAOD,GAAOL,EAASQ,CAAG,GAAK,EACjC,EAAG,CAAC,EACE9B,EAAqB,KAAK,IAAK6B,EAAeH,EAAe,IAAK,GAAG,EAGrEK,EAAa,CACjB,CAAE,GAAI,cAAe,KAAM,aAAc,OAAQ,GAAI,OAAQ,kBAAA,EAC7D,CAAE,GAAI,cAAe,KAAM,cAAe,OAAQ,GAAI,OAAQ,kBAAA,EAC9D,CAAE,GAAI,cAAe,KAAM,aAAc,OAAQ,GAAI,OAAQ,4BAAA,EAC7D,CAAE,GAAI,cAAe,KAAM,UAAW,OAAQ,IAAK,OAAQ,qCAAA,CAAsC,EAI7FC,EAAgB,CACpB,CAAE,KAAM,EAAG,MAAO,qBAAsB,SAAUR,EAAe,KAAKS,GAAKA,EAAE,OAAS,GAAKA,EAAE,aAAa,CAAA,EAC1G,CAAE,KAAM,EAAG,MAAO,oBAAqB,SAAUT,EAAe,KAAKS,GAAKA,EAAE,OAAS,GAAKA,EAAE,aAAa,CAAA,EACzG,CAAE,KAAM,EAAG,MAAO,wBAAyB,SAAUT,EAAe,KAAKS,GAAKA,EAAE,OAAS,GAAKA,EAAE,aAAa,CAAA,EAC7G,CAAE,KAAM,EAAG,MAAO,iBAAkB,SAAUT,EAAe,KAAKS,GAAKA,EAAE,OAAS,GAAKA,EAAE,aAAa,CAAA,CAAE,EAGpGC,EAAwBC,GAAwB,CACpDf,EAAqBF,EAAU,GAAIiB,CAAW,CAChD,EAEMC,EAAmBC,GAChBb,EAAe,KAAKS,GAAKA,EAAE,OAASI,CAAI,EAG3CC,EAAsBD,GACX,CAAC,eAAgB,gBAAiB,gBAAiB,YAAY,EAChE,KAAK,IAAIA,EAAO,EAAG,CAAC,CAAC,EAG/BE,EAAsBF,GACX,CAAC,WAAY,eAAgB,WAAY,QAAQ,EAClD,KAAK,IAAIA,EAAO,EAAG,CAAC,CAAC,EAGrC,OACEpC,EAAAA,KAAC,MAAA,CAAI,UAAU,kFAEb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,wCACb,SAAA,CAAAA,OAAC,MAAA,CACC,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,WAAW,SAAA,KAAE,EAC7BA,EAAAA,IAAC,KAAA,CAAG,UAAU,kDACX,WAAU,MACb,EACAA,EAAAA,IAAC,OAAA,CAAK,UAAU,mHAAmH,SAAA,cAAA,CAEnI,CAAA,EACF,EACAA,EAAAA,IAAC,IAAA,CAAE,UAAU,wCACV,WAAU,YACb,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,mEACb,SAAA,CAAAA,OAAC,OAAA,CAAK,SAAA,CAAA,cAAYI,EAAc,OAAA,EAAK,SACpC,OAAA,CAAK,SAAA,CAAA,gBAAcoB,CAAA,EAAS,SAC5B,OAAA,CAAK,SAAA,CAAA,MAAI,KAAK,MAAM,IAAI,KAAKP,EAAU,OAAO,EAAE,QAAA,EAAY,KAAK,IAAA,IAAU,IAAO,GAAK,GAAK,GAAG,EAAE,YAAA,CAAA,CAAU,CAAA,CAAA,CAC9G,CAAA,EACF,EACAjB,EAAAA,KAAC,MAAA,CAAI,UAAU,aACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,0DACZ,SAAA,CAAAD,EAAmB,QAAQ,CAAC,EAAE,GAAA,EACjC,EACAE,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,UAAA,CAAQ,CAAA,CAAA,CACpE,CAAA,EACF,EAGAD,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,qEACb,SAAA,CAAAC,EAAAA,IAAC,QAAK,SAAA,kBAAA,CAAgB,SACrB,OAAA,CAAM,SAAA,CAAA2B,EAAa,MAAIH,CAAA,CAAA,CAAY,CAAA,EACtC,EACAxB,EAAAA,IAAC,MAAA,CAAI,UAAU,uDACb,SAAAA,EAAAA,IAAC,MAAA,CACC,UAAU,4FACV,MAAO,CAAE,MAAO,GAAGF,CAAkB,GAAA,CAAI,CAAA,CAC3C,CACF,CAAA,EACF,EAGAC,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,2DAA2D,SAAA,uCAEzE,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,uDACZ,SAAA,CAAC,EAAG,EAAG,EAAG,CAAC,EAAE,IAAImC,GAAQ,CACxB,MAAMG,EAAWJ,EAAgBC,CAAI,EAC/BI,EAAcD,GAAU,WAAa,GACrCE,EAAgB,KAAK,MAAM,KAAK,IAAA,EAAQ,IAAI,KAAKxB,EAAU,SAAS,EAAE,YAAc,IAAO,GAAK,GAAK,GAAK,EAAE,IAAMmB,EAExH,OACEpC,EAAAA,KAAC,MAAA,CAEC,UAAW,2BACTwC,EACI,oDACAC,EACA,uDACA,kEACN,GAEA,SAAA,CAAAzC,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,EAAAA,KAAC,OAAA,CAAK,UAAU,4CAA4C,SAAA,CAAA,QAAMoC,CAAA,EAAK,EACtEI,GAAevC,EAAAA,IAAC,OAAA,CAAK,UAAU,iBAAiB,SAAA,IAAC,EACjDwC,GAAiB,CAACD,SAAgB,OAAA,CAAK,UAAU,kBAAkB,SAAA,IAAA,CAAE,CAAA,EACxE,EACAvC,EAAAA,IAAC,MAAA,CAAI,UAAW,6CAA6CoC,EAAmBD,CAAI,CAAC,QAClF,SAAAE,EAAmBF,CAAI,CAAA,CAC1B,EACApC,EAAAA,KAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,CAAA,WAC/C,GAAKoC,EAAK,QAAA,EACrB,EACCG,GACCvC,EAAAA,KAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,CAAA,aAC7C,OAAO,OAAOuC,EAAS,QAAQ,EAAE,OAAO,CAACG,EAAGC,IAAMD,EAAIC,EAAG,CAAC,CAAA,CAAA,CACvE,CAAA,CAAA,EAvBGP,CAAA,CA2BX,CAAC,CAAA,CACH,CAAA,EACF,EAGApC,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,2DAA2D,SAAA,sCAEzE,QACC,MAAA,CAAI,UAAU,YACZ,SAAA8B,EAAc,IAAIa,GACjB5C,EAAAA,KAAC,MAAA,CAEC,UAAW,0CACT4C,EAAQ,SACJ,6EACA,yEACN,GAEA,SAAA,CAAA3C,EAAAA,IAAC,MAAA,CAAI,UAAW,yDACd2C,EAAQ,SAAW,yBAA2B,4CAChD,GACG,SAAAA,EAAQ,SAAW,KAAO,KAC7B,EACA5C,EAAAA,KAAC,MAAA,CAAI,UAAU,SACb,SAAA,CAAAA,EAAAA,KAAC,OAAI,UAAW,eACd4C,EAAQ,SAAW,mCAAqC,kCAC1D,GAAI,SAAA,CAAA,WACOA,EAAQ,KAAK,KAAGA,EAAQ,KAAA,EACnC,EACA3C,EAAAA,IAAC,MAAA,CAAI,UAAU,2CACZ,SAAA2C,EAAQ,SAAW,0BAA4B,iBAAiBA,EAAQ,IAAI,YAAA,CAC/E,CAAA,EACF,EACCA,EAAQ,UACP3C,EAAAA,IAAC,SAAA,CAAO,UAAU,0FAA0F,SAAA,MAAA,CAE5G,CAAA,CAAA,EAzBG2C,EAAQ,IAAA,CA4BhB,CAAA,CACH,CAAA,EACF,EAGA5C,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,2DAA2D,SAAA,0BAEzE,QACC,MAAA,CAAI,UAAU,wCACZ,SAAA6B,EAAW,IAAIe,GAAa,CAC3B,MAAML,EAAclB,EAAkBuB,EAAU,EAAE,IAAM,GAClDC,EAAYxB,EAAkB,GAAGuB,EAAU,EAAE,UAAU,IAAM,GAC7DE,EAAWP,GAAe,CAACM,EAEjC,OACE9C,EAAAA,KAAC,MAAA,CAEC,UAAW,2BACT8C,EACI,oDACAN,EACA,uDACA,kEACN,GAEA,SAAA,CAAAxC,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,4CACb,SAAA4C,EAAU,KACb,EACA7C,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACZ,SAAA,CAAA8C,GAAa7C,EAAAA,IAAC,OAAA,CAAK,UAAU,iBAAiB,SAAA,IAAC,EAC/CuC,GAAe,CAACM,SAAc,OAAA,CAAK,UAAU,kBAAkB,SAAA,KAAE,EACjE,CAACN,GAAevC,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,GAAA,CAAC,CAAA,CAAA,CACpD,CAAA,EACF,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,gDAAgD,SAAA,CAAA,WACpD6C,EAAU,OAAO,cAAA,EAC5B,EACA7C,EAAAA,KAAC,MAAA,CAAI,UAAU,oDAAoD,SAAA,CAAA,WACxD6C,EAAU,MAAA,EACrB,EACCE,GACC9C,EAAAA,IAAC,SAAA,CACC,QAAS,IAAMgC,EAAqBY,EAAU,EAAE,EAChD,UAAU,iHACX,SAAA,cAAA,CAAA,EAIFC,GACC7C,EAAAA,IAAC,MAAA,CAAI,UAAU,mIAAmI,SAAA,SAAA,CAElJ,CAAA,CAAA,EApCG4C,EAAU,EAAA,CAwCrB,CAAC,CAAA,CACH,CAAA,EACF,EAGA7C,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,2DAA2D,SAAA,qBAEzE,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,oJACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,4CAA4C,SAAA,yBAE5D,EACAA,EAAAA,IAAC,OAAA,CAAK,UAAU,2CAA2C,SAAA,8BAAA,CAE3D,CAAA,EACF,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,4DACb,SAAAA,EAAAA,IAAC,MAAA,CACC,UAAU,gEACV,MAAO,CAAE,MAAO,OAAA,CAAQ,CAAA,EAE5B,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,gDAAgD,SAAA,yFAE/D,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAA+C,SAAA,iFAAA,CAE9D,CAAA,CAAA,CACF,CAAA,EACF,EAGAD,EAAAA,KAAC,MAAA,CAAI,UAAU,qDACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,2DAA2D,SAAA,+BAEzE,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,wCACb,SAAA,CAAAC,EAAAA,IAAC,OAAI,UAAU,6JACb,SAAAD,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,gBAAgB,SAAA,KAAE,EACjCA,EAAAA,IAAC,MAAA,CAAI,UAAU,4CAA4C,SAAA,iBAAc,EACzEA,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,iBAAA,CAAe,CAAA,CAAA,CAC3E,CAAA,CACF,QACC,MAAA,CAAI,UAAU,yJACb,SAAAD,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,gBAAgB,SAAA,KAAE,EACjCA,EAAAA,IAAC,MAAA,CAAI,UAAU,4CAA4C,SAAA,cAAW,EACtEA,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,qBAAA,CAAmB,CAAA,CAAA,CAC/E,CAAA,CACF,QACC,MAAA,CAAI,UAAU,iJACb,SAAAD,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,gBAAgB,SAAA,KAAE,EACjCA,EAAAA,IAAC,MAAA,CAAI,UAAU,4CAA4C,SAAA,eAAY,EACvEA,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,kBAAA,CAAgB,CAAA,CAAA,CAC5E,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAEJ,EC3Sa+C,EAA4D,CAAC,CACxE,cAAAC,CACF,IAAM,CACJ,KAAM,CAACC,EAAcC,CAAe,EAAIC,EAAAA,SAAmD,MAAM,EAC3F,CAACC,EAAYC,CAAa,EAAIF,EAAAA,SAAyC,QAAQ,EAkC/EG,EA/BkE,CACtE,OAAQ,CACN,CAAE,OAAQ,MAAO,SAAU,aAAc,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,OAAQ,EAAE,EACtG,CAAE,OAAQ,MAAO,SAAU,aAAc,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,OAAQ,EAAE,EACtG,CAAE,OAAQ,MAAO,SAAU,WAAY,MAAO,IAAK,KAAM,EAAG,OAAQ,GAAI,gBAAiB,CAAE,OAAQ,EAAE,EACrG,CAAE,OAAQ,MAAO,SAAU,aAAc,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,OAAQ,EAAE,EACtG,CAAE,OAAQ,MAAO,SAAU,aAAc,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,OAAQ,EAAE,CAAE,EAE1G,OAAQ,CACN,CAAE,OAAQ,MAAO,SAAU,aAAc,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,OAAQ,EAAE,EACtG,CAAE,OAAQ,MAAO,SAAU,WAAY,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,OAAQ,EAAE,EACpG,CAAE,OAAQ,MAAO,SAAU,cAAe,MAAO,IAAK,KAAM,EAAG,OAAQ,GAAI,gBAAiB,CAAE,OAAQ,EAAE,EACxG,CAAE,OAAQ,MAAO,SAAU,eAAgB,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,OAAQ,EAAE,EACxG,CAAE,OAAQ,MAAO,SAAU,aAAc,MAAO,IAAK,KAAM,EAAG,OAAQ,GAAI,gBAAiB,CAAE,OAAQ,EAAE,CAAE,EAE3G,KAAM,CACJ,CAAE,OAAQ,MAAO,SAAU,eAAgB,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,KAAM,EAAE,EACtG,CAAE,OAAQ,MAAO,SAAU,cAAe,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,KAAM,EAAE,EACrG,CAAE,OAAQ,MAAO,SAAU,cAAe,MAAO,IAAK,KAAM,EAAG,OAAQ,GAAI,gBAAiB,CAAE,KAAM,EAAE,EACtG,CAAE,OAAQ,MAAO,SAAU,aAAc,MAAO,IAAK,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,KAAM,EAAE,EACpG,CAAE,OAAQ,MAAO,SAAU,YAAa,MAAO,IAAK,KAAM,EAAG,OAAQ,GAAI,gBAAiB,CAAE,KAAM,EAAE,CAAE,EAExG,QAAS,CACP,CAAE,OAAQ,MAAO,SAAU,eAAgB,MAAO,KAAM,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,QAAS,EAAE,EAC1G,CAAE,OAAQ,MAAO,SAAU,WAAY,MAAO,KAAM,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,QAAS,EAAE,EACtG,CAAE,OAAQ,MAAO,SAAU,cAAe,MAAO,KAAM,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,QAAS,EAAE,EACzG,CAAE,OAAQ,MAAO,SAAU,cAAe,MAAO,KAAM,KAAM,EAAG,OAAQ,GAAI,gBAAiB,CAAE,QAAS,EAAE,EAC1G,CAAE,OAAQ,MAAO,SAAU,eAAgB,MAAO,KAAM,KAAM,EAAG,OAAQ,EAAG,gBAAiB,CAAE,QAAS,EAAE,CAAE,CAC9G,EAG6CL,CAAY,GAAK,CAAA,EAE1DM,EAAgBC,GAAiB,CACrC,MAAMC,EAAS,CACb,OAAQ,gCACR,OAAQ,4BACR,KAAM,gCACN,QAAS,6BAAA,EAEX,OAAOA,EAAOD,CAA2B,GAAKC,EAAO,IACvD,EAEMC,EAAeF,GAAiB,CACpC,MAAMG,EAAQ,CACZ,OAAQ,KACR,OAAQ,KACR,KAAM,KACN,QAAS,IAAA,EAEX,OAAOA,EAAMH,CAA0B,GAAKG,EAAM,IACpD,EAEMC,EAAeC,GACfA,IAAS,EAAU,KACnBA,IAAS,EAAU,KACnBA,IAAS,EAAU,KAChB,IAAIA,CAAI,GAGXC,EAAiBC,GACjBA,EAAS,EAAUhE,EAAAA,KAAC,OAAA,CAAK,UAAU,iBAAiB,SAAA,CAAA,OAAKgE,CAAA,EAAO,EAChEA,EAAS,EAAUhE,EAAAA,KAAC,OAAA,CAAK,UAAU,eAAe,SAAA,CAAA,MAAIgE,CAAA,EAAO,EAC1D/D,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,OAAI,EAGvCgE,EAAsBR,IACL,CACnB,OAAQ,eACR,OAAQ,iBACR,KAAM,kBACN,QAAS,cAAA,GAESA,CAAiC,EAGjDS,EAAkBT,IACN,CACd,OAAQ,iBACR,OAAQ,0BACR,KAAM,mCACN,QAAS,0DAAA,GAEIA,CAA4B,EAG7C,OACEzD,EAAAA,KAAC,MAAA,CAAI,UAAU,qDAEb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,OAAC,MAAA,CACC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,uDAAuD,SAAA,2BAErE,EACAD,EAAAA,KAAC,IAAA,CAAE,UAAU,mCACV,SAAA,CAAAiD,EAAc,mCAAA,CAAA,CACjB,CAAA,EACF,EACAjD,EAAAA,KAAC,MAAA,CAAI,UAAU,aACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,UAAO,EACjEA,EAAAA,IAAC,MAAA,CAAI,UAAU,oDAAoD,SAAA,WAAA,CAAS,CAAA,CAAA,CAC9E,CAAA,EACF,EAGAA,EAAAA,IAAC,MAAA,CAAI,UAAU,kBACX,SAAA,CAAC,QAAS,SAAU,SAAS,EAAY,IAAIkE,GAC7ClE,EAAAA,IAAC,SAAA,CAEC,QAAS,IAAMqD,EAAca,CAAM,EACnC,UAAW,8DACTd,IAAec,EACX,2BACA,wGACN,GAEC,SAAAA,EAAO,OAAO,CAAC,EAAE,cAAgBA,EAAO,MAAM,CAAC,CAAA,EAR3CA,CAAA,CAUR,EACH,EAGAlE,EAAAA,IAAC,MAAA,CAAI,UAAU,6CACX,SAAA,CAAC,SAAU,SAAU,OAAQ,SAAS,EAAY,IAAIwD,GACtDzD,EAAAA,KAAC,SAAA,CAEC,QAAS,IAAMmD,EAAgBM,CAAI,EACnC,UAAW,0CACTP,IAAiBO,EACb,uDACA,uFACN,GAEA,SAAA,CAAAxD,EAAAA,IAAC,MAAA,CAAI,UAAW,kCAAkCuD,EAAaC,CAAI,CAAC,iCACjE,SAAAE,EAAYF,CAAI,CAAA,CACnB,EACAzD,EAAAA,KAAC,MAAA,CAAI,UAAU,uDACZ,SAAA,CAAAyD,EAAK,OAAA,EACR,QACC,MAAA,CAAI,UAAU,gDACZ,SAAAQ,EAAmBR,CAAI,CAAA,CAC1B,CAAA,CAAA,EAhBKA,CAAA,CAkBR,EACH,SAGC,MAAA,CAAI,UAAW,mCAAmCD,EAAaN,CAAY,CAAC,+CAC3E,SAAA,CAAAlD,EAAAA,KAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAC,MAAC,OAAA,CAAK,UAAU,WAAY,SAAA0D,EAAYT,CAAY,EAAE,SACrD,MAAA,CACC,SAAA,CAAAlD,EAAAA,KAAC,KAAA,CAAG,UAAU,qDACX,SAAA,CAAAkD,EAAa,eAAA,EAChB,QACC,IAAA,CAAE,UAAU,2CACV,SAAAgB,EAAehB,CAAY,CAAA,CAC9B,CAAA,CAAA,CACF,CAAA,EACF,EACAlD,EAAAA,KAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,CAAA,gBAC1CiE,EAAmBf,CAAY,CAAA,CAAA,CAC/C,CAAA,EACF,QAGC,MAAA,CAAI,UAAU,YACZ,SAAAK,EAAmB,IAAKa,GACvBpE,EAAAA,KAAC,MAAA,CAEC,UAAW,gFACToE,EAAM,MAAQ,EACV,sIACA,kEACN,GAGA,SAAA,CAAAnE,EAAAA,IAAC,MAAA,CAAI,UAAU,8FACb,SAAAA,EAAAA,IAAC,OAAA,CAAK,UAAU,oBACb,UAAA,OAAO4D,EAAYO,EAAM,IAAI,GAAM,UAAYP,EAAYO,EAAM,IAAI,EAAE,SAAS,GAAG,EAChFP,EAAYO,EAAM,IAAI,EACA,CAE5B,CAAA,CACF,EAGApE,EAAAA,KAAC,MAAA,CAAI,UAAU,SACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,4CACb,SAAAmE,EAAM,SACT,EACAnE,EAAAA,IAAC,OAAA,CAAK,UAAW,mDAAmDuD,EAAaN,CAAY,CAAC,cAC3F,SAAAA,EAAa,YAAA,CAAY,CAC5B,EACCkB,EAAM,iBAAmB,OAAO,KAAKA,EAAM,eAAe,EAAE,OAAS,GACpEnE,EAAAA,IAAC,OAAA,CAAK,UAAU,uGAAuG,SAAA,oBAAA,CAEvH,CAAA,EAEJ,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,2CACZ,SAAA,CAAAoE,EAAM,MAAM,eAAA,EAAiB,gBAAcf,CAAA,CAAA,CAC9C,CAAA,EACF,QAGC,MAAA,CAAI,UAAU,UACZ,SAAAU,EAAcK,EAAM,MAAM,EAC7B,EAGApE,EAAAA,KAAC,MAAA,CAAI,UAAU,aACb,SAAA,CAAAC,MAAC,OAAI,UAAU,kDACZ,SAAAmE,EAAM,MAAM,iBACf,EACAnE,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,QAAA,CAE1D,CAAA,CAAA,CACF,CAAA,CAAA,EAlDKmE,EAAM,MAAA,CAoDd,EACH,EAGApE,EAAAA,KAAC,MAAA,CAAI,UAAU,iGACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,KAAE,EAClCA,EAAAA,IAAC,OAAA,CAAK,UAAU,+CAA+C,SAAA,kBAAA,CAE/D,CAAA,EACF,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,oOAAA,CAK1D,CAAA,EACF,EAGAD,EAAAA,KAAC,MAAA,CAAI,UAAU,6CACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yDACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,kDAAkD,SAAA,SAAM,EACvEA,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,eAAA,CAAa,CAAA,EACzE,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,yDACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,kDAAkD,SAAA,OAAI,EACrEA,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,eAAA,CAAa,CAAA,EACzE,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,yDACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,kDAAkD,SAAA,QAAK,EACtEA,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,cAAA,CAAY,CAAA,EACxE,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,yDACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,kDAAkD,SAAA,OAAI,EACrEA,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,YAAA,CAAU,CAAA,CAAA,CACtE,CAAA,CAAA,CACF,CAAA,EACF,CAEJ,ECpQaoE,EAAkB,CAACC,EAAkC,KAAO,CACvE,KAAM,CACJ,YAAAC,EAAc,GACd,gBAAAC,EAAkB,IAClB,oBAAAC,EAAsB,EAAA,EACpBH,EAEE,CAACI,EAAOC,CAAQ,EAAIvB,WAA4B,CACpD,YAAa,KACb,kBAAmB,KACnB,YAAa,KACb,eAAgB,KAChB,UAAW,GACX,MAAO,KACP,YAAa,IAAA,CACd,EAGKwB,EAAWC,EAAAA,YAAY,SAAY,CACvC,GAAI,CACFF,EAASG,IAAS,CAAE,GAAGA,EAAM,UAAW,GAAM,MAAO,MAAO,EAE5D,KAAM,CAACC,EAAaC,EAAmBC,EAAaC,CAAc,EAAI,MAAM,QAAQ,IAAI,CACtFC,EAAoB,uBAAA,EACpBA,EAAoB,qBAAA,EACpBA,EAAoB,mBAAA,EACpBA,EAAoB,kBAAA,CAAkB,CACvC,EAEDR,EAAS,CACP,YAAAI,EACA,kBAAAC,EACA,YAAAC,EACA,eAAAC,EACA,UAAW,GACX,MAAO,KACP,gBAAiB,IAAK,CACvB,CACH,OAASE,EAAO,CACdT,EAASG,IAAS,CAChB,GAAGA,EACH,UAAW,GACX,MAAOM,aAAiB,MAAQA,EAAM,QAAU,+BAAA,EAChD,CACJ,CACF,EAAG,CAAA,CAAE,EAGCC,EAAqBR,EAAAA,YAAY,SAAY,CACjD,GAAI,CACF,MAAME,EAAc,MAAMI,EAAoB,uBAAA,EAC9CR,EAASG,IAAS,CAAE,GAAGA,EAAM,YAAAC,EAAa,YAAa,IAAI,IAAK,EAAI,CACtE,OAASK,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,CACxD,CACF,EAAG,CAAA,CAAE,EAECE,EAA2BT,EAAAA,YAAY,SAAY,CACvD,GAAI,CACF,MAAMG,EAAoB,MAAMG,EAAoB,qBAAA,EACpDR,EAASG,IAAS,CAAE,GAAGA,EAAM,kBAAAE,EAAmB,YAAa,IAAI,IAAK,EAAI,CAC5E,OAASI,EAAO,CACd,QAAQ,MAAM,wCAAyCA,CAAK,CAC9D,CACF,EAAG,CAAA,CAAE,EAECG,EAAqBV,EAAAA,YAAY,SAAY,CACjD,GAAI,CACF,MAAMI,EAAc,MAAME,EAAoB,mBAAA,EAC9CR,EAASG,IAAS,CAAE,GAAGA,EAAM,YAAAG,EAAa,YAAa,IAAI,IAAK,EAAI,CACtE,OAASG,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,CACxD,CACF,EAAG,CAAA,CAAE,EAECI,EAAwBX,EAAAA,YAAY,SAAY,CACpD,GAAI,CACF,MAAMK,EAAiB,MAAMC,EAAoB,kBAAA,EACjDR,EAASG,IAAS,CAAE,GAAGA,EAAM,eAAAI,EAAgB,YAAa,IAAI,IAAK,EAAI,CACzE,OAASE,EAAO,CACd,QAAQ,MAAM,qCAAsCA,CAAK,CAC3D,CACF,EAAG,CAAA,CAAE,EAGCK,EAAUZ,EAAAA,YAAY,IAAM,CAChCD,EAAA,CACF,EAAG,CAACA,CAAQ,CAAC,EAGbc,OAAAA,EAAAA,UAAU,IAAM,CAEdd,EAAA,EAEA,IAAIe,EAAsC,KAC1C,MAAMC,EAAuC,CAAA,EAC7C,IAAIC,EAA2C,KAE/C,GAAIpB,EAAqB,CAEvB,MAAMqB,EAAoBX,EAAoB,UAAU,cAAgBY,GAA8B,CACpGpB,EAASG,IAAS,CAAE,GAAGA,EAAM,YAAaiB,EAAM,YAAa,IAAI,IAAK,EAAI,CAC5E,CAAC,EAEKC,EAAoBb,EAAoB,UAAU,oBAAsBY,GAA4B,CACxGpB,EAASG,IAAS,CAAE,GAAGA,EAAM,kBAAmBiB,EAAM,YAAa,IAAI,IAAK,EAAI,CAClF,CAAC,EAEKE,EAAkBd,EAAoB,UAAU,cAAgBY,GAA0B,CAC9FpB,EAASG,IAAS,CAAE,GAAGA,EAAM,YAAaiB,EAAM,YAAa,IAAI,IAAK,EAAI,CAC5E,CAAC,EAEKG,EAAoBf,EAAoB,UAAU,iBAAmBY,GAAyB,CAClGpB,EAASG,IAAS,CAAE,GAAGA,EAAM,eAAgBiB,EAAM,YAAa,IAAI,IAAK,EAAI,CAC/E,CAAC,EAEDH,EAAqB,KAAKE,EAAmBE,EAAmBC,EAAiBC,CAAiB,EAGlGL,EAAsBV,EAAoB,qBAAA,CAC5C,CAEA,OAAIZ,IAEFoB,EAAe,YAAY,IAAM,CAC/Bf,EAAA,CACF,EAAGJ,CAAe,GAGb,IAAM,CAEXoB,EAAqB,QAAQO,GAAeA,EAAA,CAAa,EAGrDN,GACFA,EAAA,EAIEF,GACF,cAAcA,CAAY,CAE9B,CACF,EAAG,CAACf,EAAUL,EAAaC,EAAiBC,CAAmB,CAAC,EAEzD,CACL,GAAGC,EACH,QAAAe,EACA,mBAAAJ,EACA,yBAAAC,EACA,mBAAAC,EACA,sBAAAC,EAEA,aAAeY,GACTA,GAAO,IAAgB,IAAIA,EAAM,KAAS,QAAQ,CAAC,CAAC,IACpDA,GAAO,IAAa,IAAIA,EAAM,KAAM,QAAQ,CAAC,CAAC,IAC3CA,EAAI,SAAA,EAEb,WAAaC,GAA4B,CACvC,MAAMC,EAAQ,KAAK,MAAMD,EAAU,EAAE,EAC/BE,EAAOF,EAAU,GACvB,OAAIC,EAAQ,EAAU,GAAGA,CAAK,KAAKC,CAAI,IAChC,GAAGA,CAAI,GAChB,EACA,mBAAoB,IAAc,CAChC,GAAI,CAAC7B,EAAM,YAAa,MAAO,QAE/B,MAAM8B,MADU,KAAA,EACC,QAAA,EAAY9B,EAAM,YAAY,QAAA,EACzC+B,EAAU,KAAK,MAAMD,EAAO,GAAI,EAChCH,EAAU,KAAK,MAAMI,EAAU,EAAE,EAEvC,OAAIJ,EAAU,EAAU,GAAGA,CAAO,QAC3B,GAAGI,CAAO,OACnB,CAAA,CAEJ,EAkBaC,EAAuB,IAAM,CACxC,KAAM,CAAE,kBAAA1B,EAAmB,UAAA2B,EAAW,MAAAvB,EAAO,yBAAAE,CAAA,EAA6BjB,EAAgB,CACxF,oBAAqB,GACrB,YAAa,GACb,gBAAiB,GAAA,CAClB,EAED,MAAO,CACL,KAAMW,EACN,UAAA2B,EACA,MAAAvB,EACA,QAASE,CAAA,CAEb,EAiBasB,EAAoB,IAAM,CACrC,KAAM,CAAE,eAAA1B,EAAgB,UAAAyB,EAAW,MAAAvB,EAAO,sBAAAI,CAAA,EAA0BnB,EAAgB,CAClF,oBAAqB,GACrB,YAAa,GACb,gBAAiB,GAAA,CAClB,EAED,MAAO,CACL,KAAMa,EACN,UAAAyB,EACA,MAAAvB,EACA,QAASI,CAAA,CAEb,ECpPMqB,EAAsD,CAAC,CAC3D,MAAAC,EACA,KAAAC,EACA,UAAAxH,EAAY,GACZ,kBAAAyH,EAAoB,GACpB,QAAAC,EAAU,EACZ,IAAM,CACJ,KAAM,CACJ,YAAAlC,EACA,YAAAE,EACA,UAAA0B,EACA,MAAAvB,EAGA,QAAAK,EACA,aAAAyB,EACA,WAAAC,EACA,mBAAAC,CAAA,EACE/C,EAAA,EAEE,CAACgD,EAAcC,CAAe,EAAIlE,EAAAA,SAAS,EAAK,EAEhDmE,EAAgB,SAAY,CAChCD,EAAgB,EAAI,EACpB,MAAM7B,EAAA,EACN,WAAW,IAAM6B,EAAgB,EAAK,EAAG,GAAI,CAC/C,EAEA,OAAIX,GAAa,CAAC5B,EAEd9E,EAAAA,IAAC,OAAI,UAAW,YAAYV,CAAS,GACnC,SAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,gBACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAAA,CAAgD,EAC/DA,EAAAA,IAAC,MAAA,CAAI,UAAU,8CAAA,CAA+C,CAAA,EAChE,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAAA,CAAgD,EAC/DA,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAAA,CAAgD,CAAA,CAAA,CACjE,CAAA,CAAA,CACF,CAAA,CACF,EAIAmF,EAEApF,EAAAA,KAAC,MAAA,CAAI,UAAW,+CAA+CT,CAAS,GACtE,SAAA,CAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,EAAAA,KAAC,KAAA,CAAG,UAAU,uDACX,SAAA,CAAA+G,EAAK,IAAED,CAAA,EACV,EACCE,GACC/G,EAAAA,IAAC,SAAA,CACC,QAASsH,EACT,UAAU,4EACV,SAAUF,EAEV,eAAC,OAAA,CAAK,UAAWA,EAAe,eAAiB,GAAI,SAAA,IAAA,CAAE,CAAA,CAAA,CACzD,EAEJ,EACApH,EAAAA,IAAC,MAAA,CAAI,UAAU,yCAAyC,SAAA,gCAExD,EACAA,EAAAA,IAAC,SAAA,CACC,QAASsH,EACT,UAAU,mGACX,SAAA,WAAA,CAAA,CAED,EACF,EAKFvH,EAAAA,KAAC,MAAA,CAAI,UAAW,YAAYT,CAAS,GACnC,SAAA,CAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,OAAC,MAAG,UAAW,yCAAyCiH,EAAU,YAAc,SAAS,GACtF,SAAA,CAAAF,EAAK,IAAED,EACR7G,EAAAA,IAAC,MAAA,CAAI,UAAU,iDAAA,CAAkD,CAAA,EACnE,EACC+G,GACC/G,EAAAA,IAAC,SAAA,CACC,QAASsH,EACT,UAAU,kGACV,SAAUF,EACV,MAAM,eAEN,eAAC,OAAA,CAAK,UAAWA,EAAe,eAAiB,GAAI,SAAA,IAAA,CAAE,CAAA,CAAA,CACzD,EAEJ,EAECtC,GAAeE,GACdjF,OAAC,MAAA,CAAI,UAAW,WAAWiH,EAAU,IAAM,GAAG,GAE5C,SAAA,CAAAjH,OAAC,OAAI,UAAW,oBAAoBiH,EAAU,QAAU,OAAO,GAC7D,SAAA,CAAAjH,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAW,2BAA2BgH,EAAU,UAAY,UAAU,GACxE,SAAAC,EAAanC,EAAY,mBAAmB,CAAA,CAC/C,EACA9E,EAAAA,IAAC,OAAI,UAAW,oCAAoCgH,EAAU,UAAY,SAAS,GAAI,SAAA,iBAAA,CAEvF,CAAA,EACF,EACAjH,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAW,4BAA4BgH,EAAU,UAAY,UAAU,GACzE,SAAAC,EAAajC,EAAY,WAAW,CAAA,CACvC,EACAhF,EAAAA,IAAC,OAAI,UAAW,oCAAoCgH,EAAU,UAAY,SAAS,GAAI,SAAA,cAAA,CAEvF,CAAA,CAAA,CACF,CAAA,EACF,EAEC,CAACA,GACAjH,EAAAA,KAAAE,EAAAA,SAAA,CAEE,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,MAAC,OAAI,UAAU,oCACZ,SAAAiH,EAAanC,EAAY,iBAAiB,EAC7C,EACA9E,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,aAAA,CAE1D,CAAA,EACF,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACZ,SAAA,CAAAiF,EAAY,gBAAgB,QAAQ,CAAC,EAAE,GAAA,EAC1C,EACAhF,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,cAAA,CAE1D,CAAA,CAAA,CACF,CAAA,EACF,EAGAD,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,MAAC,OAAI,UAAU,iCACZ,SAAAkH,EAAWpC,EAAY,cAAc,EACxC,EACA9E,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,yBAAA,CAE1D,CAAA,CAAA,CACF,CAAA,EACF,SAID,MAAA,CAAI,UAAW,gDAAgDgH,EAAU,UAAY,SAAS,GAAI,SAAA,CAAA,WACxFG,EAAA,CAAmB,CAAA,CAC9B,CAAA,CAAA,CACF,CAAA,EAEJ,CAEJ,ECjKMI,EAAgD,CAAC,CACrD,UAAAjI,EAAY,GACZ,SAAAkI,EAAW,EACX,WAAAC,EAAa,EACf,IAAM,CACJ,KAAM,CAAE,KAAMC,EAAQ,UAAAhB,EAAW,MAAAvB,EAAO,QAAAK,CAAA,EAAYiB,EAAA,EAEpD,GAAIC,EACF,OACE1G,EAAAA,IAAC,OAAI,UAAW,YAAYV,CAAS,GACnC,SAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,gBACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,oDAAA,CAAqD,QACnE,MAAA,CAAI,UAAU,YACZ,SAAA,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAACa,EAAGC,IACrBf,EAAAA,KAAC,MAAA,CAAY,UAAU,oCACrB,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAAA,CAAgD,EAC/DA,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAAA,CAAgD,CAAA,CAAA,EAFvDc,CAGV,CACD,CAAA,CACH,CAAA,CAAA,CACF,CAAA,CACF,EAIJ,GAAIqE,GAAS,CAACuC,EACZ,OACE3H,EAAAA,KAAC,MAAA,CAAI,UAAW,+CAA+CT,CAAS,GACtE,SAAA,CAAAU,EAAAA,IAAC,KAAA,CAAG,UAAU,4DAA4D,SAAA,qBAE1E,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,8CAA8C,SAAA,+BAE7D,EACAA,EAAAA,IAAC,SAAA,CACC,QAASwF,EACT,UAAU,8FACX,SAAA,WAAA,CAAA,CAED,EACF,EAIJ,MAAMyB,EAAgBd,GAChBA,GAAO,IAAgB,IAAIA,EAAM,KAAS,QAAQ,CAAC,CAAC,IACpDA,GAAO,IAAa,IAAIA,EAAM,KAAM,QAAQ,CAAC,CAAC,IAC3CA,EAAI,SAAA,EAGPwB,EAAkBC,GAClBA,GAAU,IAAY,qCACtBA,GAAU,GAAW,mCACrBA,GAAU,GAAW,uCAClB,mCAGHC,EAAiBD,GACjBA,GAAU,IAAY,KACtBA,GAAU,GAAW,KACrBA,GAAU,GAAW,KAClB,KAGT,OACE7H,EAAAA,KAAC,MAAA,CAAI,UAAW,YAAYT,CAAS,GACnC,SAAA,CAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,EAAAA,KAAC,KAAA,CAAG,UAAU,gDAAgD,SAAA,CAAA,qBAE5DC,EAAAA,IAAC,MAAA,CAAI,UAAU,iDAAA,CAAkD,CAAA,EACnE,EACAA,EAAAA,IAAC,SAAA,CACC,QAASwF,EACT,UAAU,kGACV,MAAM,iBACP,SAAA,IAAA,CAAA,CAED,EACF,EAEAxF,EAAAA,IAAC,MAAA,CAAI,UAAU,YACZ,SAAA0H,EAAO,gBAAgB,MAAM,EAAGF,CAAQ,EAAE,IAAI,CAACM,EAASC,IACvDhI,EAAAA,KAAC,MAAA,CAEC,UAAU,0IAEV,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,kIACZ,SAAA+H,EAAQ,EACX,SACC,MAAA,CACC,SAAA,CAAA/H,EAAAA,IAAC,MAAA,CAAI,UAAU,iDACZ,SAAA8H,EAAQ,QACX,EACA/H,EAAAA,KAAC,MAAA,CAAI,UAAU,2CACZ,SAAA,CAAAkH,EAAaa,EAAQ,QAAQ,EAAE,WAAA,CAAA,CAClC,CAAA,CAAA,CACF,CAAA,EACF,EAECL,GACC1H,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAC,MAAC,QAAK,UAAU,UAAW,SAAA6H,EAAcC,EAAQ,MAAM,EAAE,EACzD/H,EAAAA,KAAC,MAAA,CAAI,UAAU,aACb,SAAA,CAAAA,EAAAA,KAAC,OAAI,UAAW,aAAa4H,EAAeG,EAAQ,MAAM,CAAC,GAAI,SAAA,CAAA,IAC3DA,EAAQ,OAAO,QAAQ,CAAC,EAAE,GAAA,EAC9B,EACA9H,EAAAA,IAAC,MAAA,CAAI,UAAU,2CAA2C,SAAA,QAAA,CAE1D,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EA5BG8H,EAAQ,OAAA,CA+BhB,EACH,EAGA/H,EAAAA,KAAC,MAAA,CAAI,UAAU,0DACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,8DAA8D,SAAA,4BAE5E,QACC,MAAA,CAAI,UAAU,YACZ,SAAA0H,EAAO,gBAAgB,MAAM,EAAG,CAAC,EAAE,IAAKM,GACvCjI,EAAAA,KAAC,MAAA,CAAwB,UAAU,oCACjC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,2CACb,SAAAgI,EAAO,OACV,EACAjI,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,qDACb,SAAAA,EAAAA,IAAC,MAAA,CACC,UAAU,+BACV,MAAO,CAAE,MAAO,GAAGgI,EAAO,aAAa,GAAA,CAAI,CAAA,EAE/C,EACAjI,EAAAA,KAAC,OAAA,CAAK,UAAU,yDACb,SAAA,CAAAiI,EAAO,cAAc,QAAQ,CAAC,EAAE,GAAA,CAAA,CACnC,CAAA,CAAA,CACF,CAAA,GAdQA,EAAO,MAejB,CACD,CAAA,CACH,CAAA,EACF,EAGAjI,EAAAA,KAAC,MAAA,CAAI,UAAU,0DACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,8DAA8D,SAAA,2BAE5E,EACAA,EAAAA,IAAC,OAAI,UAAU,4CACZ,WAAO,cAAc,UAAU,OAAO,CAACa,EAAGC,IAAMA,EAAI,IAAM,CAAC,EAAE,IAAKmH,GACjElI,EAAAA,KAAC,MAAA,CAAoB,UAAU,oCAC7B,SAAA,CAAAC,EAAAA,IAAC,MAAA,CACC,UAAU,+DACV,MAAO,CAAE,OAAQ,GAAG,KAAK,IAAIiI,EAAK,SAAW,EAAG,CAAC,CAAC,IAAA,EAClD,MAAO,GAAGA,EAAK,IAAI,SAASA,EAAK,QAAQ,YAAA,CAAA,EAE3ClI,EAAAA,KAAC,MAAA,CAAI,UAAU,gDACZ,SAAA,CAAAkI,EAAK,KAAK,GAAA,CAAA,CACb,CAAA,CAAA,EARQA,EAAK,IASf,CACD,EACH,EACAlI,EAAAA,KAAC,MAAA,CAAI,UAAU,4DAA4D,SAAA,CAAA,0BACjD2H,EAAO,cAAc,UAAU,IAAI,OAAO,SAAA,CAAU,GAAG,UAAY,EAAE,GAAA,CAAA,CAC/F,CAAA,EACF,EAGA3H,EAAAA,KAAC,MAAA,CAAI,UAAU,4DAA4D,SAAA,CAAA,iBAC1D,IAAI,KAAK2H,EAAO,WAAW,EAAE,mBAAA,CAAmB,CAAA,CACjE,CAAA,EACF,CAEJ,EC7KMQ,EAAgD,CAAC,CACrD,UAAA5I,EAAY,GACZ,UAAA6I,EAAY,EACZ,cAAAC,EAAgB,EAChB,mBAAAC,EAAqB,EACvB,IAAM,CACJ,KAAM,CAAE,KAAMC,EAAU,UAAA5B,EAAW,MAAAvB,EAAO,QAAAK,CAAA,EAAYmB,EAAA,EAEtD,GAAID,EACF,OACE1G,EAAAA,IAAC,OAAI,UAAW,YAAYV,CAAS,GACnC,SAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,gBACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,oDAAA,CAAqD,EACpED,EAAAA,KAAC,MAAA,CAAI,UAAU,wCACb,SAAA,CAAAC,MAAC,OAAI,UAAU,YACZ,SAAA,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAACa,EAAGC,IACrBf,EAAAA,KAAC,MAAA,CAAY,UAAU,oCACrB,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAAA,CAAgD,EAC/DA,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAAA,CAAgD,CAAA,GAFvDc,CAGV,CACD,EACH,EACAd,MAAC,OAAI,UAAU,YACZ,UAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAACa,EAAGC,IACrBd,EAAAA,IAAC,MAAA,CAAY,UAAU,2CAAA,EAAbc,CAAyD,CACpE,CAAA,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,EAIJ,GAAIqE,GAAS,CAACmD,EACZ,OACEvI,EAAAA,KAAC,MAAA,CAAI,UAAW,+CAA+CT,CAAS,GACtE,SAAA,CAAAU,EAAAA,IAAC,KAAA,CAAG,UAAU,4DAA4D,SAAA,qBAE1E,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,8CAA8C,SAAA,6BAE7D,EACAA,EAAAA,IAAC,SAAA,CACC,QAASwF,EACT,UAAU,8FACX,SAAA,WAAA,CAAA,CAED,EACF,EAIJ,MAAM+C,EAAkBC,GAClBA,GAAU,GAAW,iCACrBA,GAAU,GAAW,uCACrBA,GAAU,GAAW,uCAClB,qCAGHC,EAAkBD,GAClBA,GAAU,GAAW,YACrBA,GAAU,GAAW,OACrBA,GAAU,GAAW,SAClB,UAGHX,EAAiBD,GACjBA,GAAU,IAAY,KACtBA,GAAU,IAAY,KACtBA,GAAU,GAAW,KAClB,KAGT,OACE7H,EAAAA,KAAC,MAAA,CAAI,UAAW,YAAYT,CAAS,GACnC,SAAA,CAAAS,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,EAAAA,KAAC,KAAA,CAAG,UAAU,gDAAgD,SAAA,CAAA,qBAE5DC,EAAAA,IAAC,MAAA,CAAI,UAAU,iDAAA,CAAkD,CAAA,EACnE,EACAA,EAAAA,IAAC,SAAA,CACC,QAASwF,EACT,UAAU,kGACV,MAAM,sBACP,SAAA,IAAA,CAAA,CAED,EACF,EAEAzF,EAAAA,KAAC,MAAA,CAAI,UAAU,wCAEb,SAAA,CAAAA,OAAC,MAAA,CACC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,sFAAsF,SAAA,2BAEpG,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,YACZ,SAAAsI,EAAS,YAAY,MAAM,EAAGH,CAAS,EAAE,IAAI,CAACO,EAAOX,IACpDhI,EAAAA,KAAC,MAAA,CAEC,UAAU,wGAEV,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,kIACZ,SAAA+H,EAAQ,EACX,EACA/H,EAAAA,IAAC,OAAA,CAAK,UAAU,iDACb,WAAM,KAAA,CACT,CAAA,EACF,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAC,MAAC,QAAK,UAAU,UAAW,SAAA6H,EAAca,EAAM,MAAM,EAAE,EACvD3I,EAAAA,KAAC,OAAA,CAAK,UAAU,uDAAuD,SAAA,CAAA,IACnE2I,EAAM,OAAO,QAAQ,CAAC,EAAE,GAAA,CAAA,CAC5B,CAAA,CAAA,CACF,CAAA,EACF,EAEA3I,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAC,EAAAA,IAAC,OAAI,UAAU,cACb,SAAAA,MAAC,MAAA,CAAI,UAAU,uDACb,SAAAA,EAAAA,IAAC,MAAA,CACC,UAAU,4FACV,MAAO,CAAE,MAAO,GAAG0I,EAAM,MAAM,GAAA,CAAI,CAAA,EAEvC,CAAA,CACF,EACA1I,EAAAA,IAAC,OAAA,CAAK,UAAW,yBAAyBuI,EAAeG,EAAM,MAAM,CAAC,GACnE,SAAAD,EAAeC,EAAM,MAAM,CAAA,CAC9B,CAAA,CAAA,CACF,CAAA,CAAA,EAhCKA,EAAM,KAAA,CAkCd,CAAA,CACH,CAAA,EACF,SAGC,MAAA,CACC,SAAA,CAAA1I,EAAAA,IAAC,KAAA,CAAG,UAAU,sFAAsF,SAAA,wBAEpG,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,YACZ,SAAAsI,EAAS,eAAe,MAAM,EAAGF,CAAa,EAAE,IAAI,CAACO,EAAUZ,IAC9DhI,EAAAA,KAAC,MAAA,CAEC,UAAU,wGAEV,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,EAAAA,KAAC,KAAA,CAAG,UAAU,yEACZ,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,iIACZ,SAAA+H,EAAQ,EACX,EACCY,EAAS,QAAA,EACZ,EACA5I,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAC,MAAC,QAAK,UAAU,UAAW,SAAA6H,EAAcc,EAAS,MAAM,EAAE,EAC1D5I,EAAAA,KAAC,OAAA,CAAK,UAAU,uDAAuD,SAAA,CAAA,IACnE4I,EAAS,OAAO,QAAQ,CAAC,EAAE,GAAA,CAAA,CAC/B,CAAA,CAAA,CACF,CAAA,EACF,EAEA5I,EAAAA,KAAC,MAAA,CAAI,UAAU,2CACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,cAAc,SAAA,eAAY,EACzC2I,EAAS,OAAO,KAAK,IAAI,CAAA,CAAA,CAC5B,CAAA,CAAA,EArBKA,EAAS,QAAA,CAuBjB,CAAA,CACH,CAAA,CAAA,CACF,CAAA,EACF,EAGCN,GACCtI,EAAAA,KAAC,MAAA,CAAI,UAAU,0DACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,sFAAsF,SAAA,kCAEpG,EACAA,EAAAA,IAAC,MAAA,CAAI,UAAU,wCACZ,SAAAsI,EAAS,mBAAmB,MAAM,EAAG,CAAC,EAAE,IAAI,CAACM,EAAMb,IAClDhI,EAAAA,KAAC,MAAA,CAEC,UAAU,4JAEV,SAAA,CAAAC,EAAAA,IAAC,OAAI,UAAU,yCACb,SAAAD,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,oIACZ,SAAA+H,EAAQ,EACX,EACA/H,EAAAA,IAAC,OAAA,CAAK,UAAU,yDACb,WAAK,IAAA,CACR,CAAA,CAAA,CACF,CAAA,CACF,EAEAD,EAAAA,KAAC,MAAA,CAAI,UAAU,4CACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,mCAAmC,SAAA,SAAM,EACzDA,EAAAA,IAAC,MAAA,CAAI,UAAU,uDACb,SAAAA,EAAAA,IAAC,MAAA,CACC,UAAU,mCACV,MAAO,CAAE,MAAO,GAAG4I,EAAK,KAAK,GAAA,CAAI,CAAA,EAErC,EACA7I,EAAAA,KAAC,OAAA,CAAK,UAAU,qDACb,SAAA,CAAA6I,EAAK,MAAM,QAAQ,CAAC,EAAE,GAAA,CAAA,CACzB,CAAA,EACF,EAEA7I,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAK,UAAU,mCAAmC,SAAA,WAAQ,EAC3DD,EAAAA,KAAC,OAAA,CAAK,UAAU,qDACb,SAAA,CAAA6I,EAAK,WAAW,QAAQ,CAAC,EAAE,GAAA,CAAA,CAC9B,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EAlCKA,EAAK,IAAA,CAoCb,CAAA,CACH,CAAA,EACF,QAID,MAAA,CAAI,UAAU,0DACb,SAAA7I,EAAAA,KAAC,MAAA,CAAI,UAAU,4FACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,8EAA8E,SAAA,oBAE5F,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,qDACb,SAAA,CAAAA,OAAC,IAAA,CAAE,SAAA,CAAA,+CAA6CuI,EAAS,YAAY,CAAC,GAAG,OAAO,QAAQ,CAAC,EAAE,UAAA,EAAQ,SAClG,IAAA,CAAE,SAAA,CAAA,kCAAgCA,EAAS,eAAe,CAAC,GAAG,OAAO,QAAQ,CAAC,EAAE,mBAAA,EAAiB,EAClGtI,EAAAA,IAAC,KAAE,SAAA,kEAAA,CAAgE,EACnEA,EAAAA,IAAC,KAAE,SAAA,6DAAA,CAA2D,CAAA,CAAA,CAChE,CAAA,CAAA,CACF,CAAA,CACF,EAGAD,EAAAA,KAAC,MAAA,CAAI,UAAU,4DAA4D,SAAA,CAAA,wBACnD,IAAI,KAAKuI,EAAS,WAAW,EAAE,mBAAA,CAAmB,CAAA,CAC1E,CAAA,EACF,CAEJ"}