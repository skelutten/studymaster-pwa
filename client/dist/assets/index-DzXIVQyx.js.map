{"version":3,"file":"index-DzXIVQyx.js","sources":["../../src/components/layout/Navbar.tsx","../../src/components/layout/Sidebar.tsx","../../src/components/layout/AuthModal.tsx","../../src/components/layout/Layout.tsx","../../src/pages/HomePage.tsx","../../src/components/SvgMapCard.tsx","../../src/components/study/CardRenderer.tsx","../../src/hooks/useKeyboardShortcuts.ts","../../src/components/study/KeyboardShortcutsHelp.tsx","../../src/utils/cardStateUtils.ts","../../src/components/study/CardStateIndicator.tsx","../../src/utils/testStatsLogic.ts","../../src/pages/StudyPage.tsx","../../src/components/deck/CardManager.tsx","../../src/components/ui/ProgressBar.tsx","../../src/pages/DecksPage.tsx","../../src/components/ui/ConfirmationDialog.tsx","../../src/pages/ProfilePage.tsx","../../src/pages/ChallengesPage.tsx","../../src/pages/LeaderboardPage.tsx","../../src/pages/GlobalStatsPage.tsx","../../src/pages/AnalyticsDashboard.tsx","../../src/pages/EnhancedReviewPage.tsx","../../src/pages/ResetPasswordPage.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import { useThemeStore } from '../../stores/themeStore'\r\nimport { useAuthStore } from '../../stores/authStore'\r\n\r\ninterface NavbarProps {\r\n  onMenuClick: () => void\r\n}\r\n\r\nconst Navbar = ({ onMenuClick }: NavbarProps) => {\r\n  const { theme, toggleTheme } = useThemeStore()\r\n  const { user, logout } = useAuthStore()\r\n\r\n  return (\r\n    <nav className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"flex justify-between h-16\">\r\n          <div className=\"flex items-center\">\r\n            {/* Mobile menu button */}\r\n            <button\r\n              onClick={onMenuClick}\r\n              className=\"lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\r\n            >\r\n              <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\r\n              </svg>\r\n            </button>\r\n            \r\n            {/* Logo */}\r\n            <div className=\"flex-shrink-0 flex items-center ml-4 lg:ml-0\">\r\n              <h1 className=\"text-xl font-bold text-gradient\">StudyMaster</h1>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-4\">\r\n            {/* Theme toggle */}\r\n            <button\r\n              onClick={toggleTheme}\r\n              className=\"p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\r\n            >\r\n              {theme === 'dark' ? (\r\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n                </svg>\r\n              ) : (\r\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\r\n                </svg>\r\n              )}\r\n            </button>\r\n\r\n            {/* User menu */}\r\n            <div className=\"relative\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"text-sm\">\r\n                  <div className=\"font-medium text-gray-700 dark:text-gray-200\">\r\n                    {user?.username}\r\n                  </div>\r\n                  <div className=\"text-gray-500 dark:text-gray-400\">\r\n                    Level {user?.level}\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  onClick={logout}\r\n                  className=\"p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\r\n                  title=\"Logout\"\r\n                >\r\n                  <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar","import { NavLink } from 'react-router-dom'\r\nimport { useGamificationStore } from '../../stores/gamificationStore'\r\n\r\ninterface SidebarProps {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n}\r\n\r\nconst Sidebar = ({ isOpen, onClose }: SidebarProps) => {\r\n  const { userStats } = useGamificationStore()\r\n  \r\n  const navigation = [\r\n    { name: 'Home', href: '/', icon: '🏠' },\r\n    { name: 'Study', href: '/study', icon: '📚' },\r\n    { name: 'Decks', href: '/decks', icon: '📋' },\r\n    { name: 'Global Stats', href: '/global-stats', icon: '🌍' },\r\n    { name: 'Profile', href: '/profile', icon: '👤' },\r\n    { name: 'Leaderboard', href: '/leaderboard', icon: '🏆' },\r\n    { name: 'Challenges', href: '/challenges', icon: '🎯' },\r\n  ]\r\n\r\n  // Format numbers for display\r\n  const formatNumber = (num: number): string => {\r\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`\r\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`\r\n    return num.toString()\r\n  }\r\n\r\n  // Calculate level progress\r\n  const xpForCurrentLevel = userStats.level * 1000\r\n  const xpForNextLevel = (userStats.level + 1) * 1000\r\n  const progressPercentage = ((userStats.xp - xpForCurrentLevel) / (xpForNextLevel - xpForCurrentLevel)) * 100\r\n\r\n  return (\r\n    <div className={`fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 shadow-lg transform ${\r\n      isOpen ? 'translate-x-0' : '-translate-x-full'\r\n    } transition-transform duration-300 ease-in-out lg:translate-x-0`}>\r\n      <div className=\"flex items-center justify-between h-16 px-4 border-b border-gray-200 dark:border-gray-700\">\r\n        <h1 className=\"text-xl font-bold text-gradient\">StudyMaster</h1>\r\n        <button\r\n          onClick={onClose}\r\n          className=\"lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700\"\r\n        >\r\n          <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col h-full\">\r\n        <nav className=\"flex-1 mt-8 overflow-y-auto\">\r\n          <div className=\"px-4 space-y-2\">\r\n            {navigation.map((item) => (\r\n              <NavLink\r\n                key={item.name}\r\n                to={item.href}\r\n                onClick={onClose}\r\n                className={({ isActive }) =>\r\n                  `flex items-center px-4 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${\r\n                    isActive\r\n                      ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-200'\r\n                      : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white'\r\n                  }`\r\n                }\r\n              >\r\n                <span className=\"mr-3 text-lg\">{item.icon}</span>\r\n                {item.name}\r\n              </NavLink>\r\n            ))}\r\n          </div>\r\n        </nav>\r\n\r\n        {/* Quick Stats */}\r\n        <div className=\"flex-shrink-0 p-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-750\">\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span className=\"text-gray-500 dark:text-gray-400\">XP</span>\r\n              <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                {formatNumber(userStats.xp)}\r\n              </span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span className=\"text-gray-500 dark:text-gray-400\">Streak</span>\r\n              <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                {userStats.currentStreak} {userStats.currentStreak === 1 ? 'day' : 'days'}\r\n              </span>\r\n            </div>\r\n            <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\r\n              <div\r\n                className=\"bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-300\"\r\n                style={{ width: `${Math.min(100, Math.max(0, progressPercentage))}%` }}\r\n              ></div>\r\n            </div>\r\n            <div className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\r\n              Level {userStats.level} → Level {userStats.level + 1}\r\n            </div>\r\n            <div className=\"text-xs text-gray-400 dark:text-gray-500 text-center\">\r\n              {formatNumber(userStats.xp - xpForCurrentLevel)} / {formatNumber(xpForNextLevel - xpForCurrentLevel)} XP\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar","import { useState, useEffect } from 'react'\r\nimport { useAuthStore } from '../../stores/authStore'\r\n\r\ninterface AuthModalProps {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  mode: 'login' | 'register' | 'forgot-password'\r\n  onModeChange: (mode: 'login' | 'register' | 'forgot-password') => void\r\n}\r\n\r\nconst AuthModal = ({ isOpen, onClose, mode, onModeChange }: AuthModalProps) => {\r\n  const [email, setEmail] = useState('')\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const { login, register, isLoading, error, clearError, isAuthenticated } = useAuthStore()\r\n  const [resetEmailSent, setResetEmailSent] = useState(false)\r\n\r\n  // Clear errors when modal opens or mode changes\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      clearError()\r\n    }\r\n  }, [isOpen, clearError])\r\n\r\n  useEffect(() => {\r\n    clearError()\r\n  }, [mode, clearError])\r\n\r\n  const handleModeChange = (newMode: 'login' | 'register' | 'forgot-password') => {\r\n    clearError()\r\n    setResetEmailSent(false)\r\n    onModeChange(newMode)\r\n  }\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    \r\n    if (mode === 'login') {\r\n      await login(email, password)\r\n    } else if (mode === 'register') {\r\n      await register(email, username, password)\r\n    } else if (mode === 'forgot-password') {\r\n      // For now, show a message that password reset is not implemented\r\n      alert('Password reset functionality will be implemented soon. Please use demo login or register a new account.')\r\n      setResetEmailSent(true)\r\n    }\r\n  }\r\n\r\n  // Close modal when successfully authenticated\r\n  useEffect(() => {\r\n    console.log('[AUTH_MODAL]', 'Auth state changed:', {\r\n      isAuthenticated,\r\n      isOpen,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n    \r\n    if (isAuthenticated && isOpen) {\r\n      console.log('[AUTH_MODAL]', 'Closing modal due to successful authentication')\r\n      onClose()\r\n      // Reset form\r\n      setEmail('')\r\n      setUsername('')\r\n      setPassword('')\r\n    }\r\n  }, [isAuthenticated, isOpen, onClose])\r\n\r\n  const handleDemoLogin = async () => {\r\n    try {\r\n      // Use demo credentials that trigger the bypass logic\r\n      await signIn('demo', '')\r\n      onClose()\r\n    } catch (error) {\r\n      // Error is handled by the store\r\n    }\r\n  }\r\n\r\n  if (!isOpen) return null\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\r\n      <div className=\"flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n        <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" onClick={onClose}></div>\r\n\r\n        <div className=\"inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n          <div className=\"bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n            <div className=\"text-center\">\r\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4\">\r\n                {mode === 'login' ? 'Sign In' : mode === 'register' ? 'Create Account' : 'Reset Password'}\r\n              </h3>\r\n              \r\n              {error && (\r\n                <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\r\n                  {error}\r\n                </div>\r\n              )}\r\n\r\n              {resetEmailSent && mode === 'forgot-password' && (\r\n                <div className=\"mb-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded\">\r\n                  Password reset email sent! Check your inbox and follow the instructions to reset your password.\r\n                </div>\r\n              )}\r\n\r\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n                <div>\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n                    required\r\n                  />\r\n                </div>\r\n                \r\n                {mode === 'register' && (\r\n                  <div>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Username\"\r\n                      value={username}\r\n                      onChange={(e) => setUsername(e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                )}\r\n                \r\n                {mode !== 'forgot-password' && (\r\n                  <div>\r\n                    <input\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                )}\r\n\r\n                <button\r\n                  type=\"submit\"\r\n                  disabled={isLoading}\r\n                  className=\"w-full btn btn-primary\"\r\n                >\r\n                  {isLoading ? 'Loading...' : \r\n                   mode === 'login' ? 'Sign In' : \r\n                   mode === 'register' ? 'Create Account' : \r\n                   'Send Reset Email'}\r\n                </button>\r\n              </form>\r\n\r\n              <div className=\"mt-4\">\r\n                <button\r\n                  onClick={handleDemoLogin}\r\n                  className=\"w-full btn btn-secondary\"\r\n                  disabled={isLoading}\r\n                >\r\n                  Demo Login\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"mt-4 text-sm space-y-2\">\r\n                {mode === 'login' ? (\r\n                  <>\r\n                    <div>\r\n                      Don't have an account?{' '}\r\n                      <button\r\n                        onClick={() => handleModeChange('register')}\r\n                        className=\"text-blue-600 hover:text-blue-500\"\r\n                      >\r\n                        Create one\r\n                      </button>\r\n                    </div>\r\n                    <div>\r\n                      Forgot your password?{' '}\r\n                      <button\r\n                        onClick={() => handleModeChange('forgot-password')}\r\n                        className=\"text-blue-600 hover:text-blue-500\"\r\n                      >\r\n                        Reset it\r\n                      </button>\r\n                    </div>\r\n                  </>\r\n                ) : mode === 'register' ? (\r\n                  <div>\r\n                    Already have an account?{' '}\r\n                    <button\r\n                      onClick={() => handleModeChange('login')}\r\n                      className=\"text-blue-600 hover:text-blue-500\"\r\n                    >\r\n                      Sign in\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    Remember your password?{' '}\r\n                    <button\r\n                      onClick={() => handleModeChange('login')}\r\n                      className=\"text-blue-600 hover:text-blue-500\"\r\n                    >\r\n                      Back to login\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AuthModal","import { Outlet } from 'react-router-dom'\r\nimport { useState, useCallback, memo } from 'react'\r\nimport Navbar from './Navbar'\r\nimport Sidebar from './Sidebar'\r\nimport { useAuthStore } from '../../stores/authStore'\r\nimport AuthModal from './AuthModal'\r\n\r\nconst Layout = memo(() => {\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  const [authModalOpen, setAuthModalOpen] = useState(false)\r\n  const [authMode, setAuthMode] = useState<'login' | 'register' | 'forgot-password'>('login')\r\n  const { isAuthenticated, user } = useAuthStore()\r\n  \r\n  // Debug authentication state - only in development\r\n  if (import.meta.env.DEV) {\r\n    console.log('[LAYOUT]', 'Layout render - Auth state:', {\r\n      isAuthenticated,\r\n      hasUser: !!user,\r\n      userId: user?.id,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n  }\r\n\r\n  // Memoize handlers to prevent child re-renders\r\n  const handleMenuClick = useCallback(() => {\r\n    setSidebarOpen(true)\r\n  }, [])\r\n\r\n  const handleSidebarClose = useCallback(() => {\r\n    setSidebarOpen(false)\r\n  }, [])\r\n\r\n  const handleSignIn = useCallback(() => {\r\n    setAuthMode('login')\r\n    setAuthModalOpen(true)\r\n  }, [])\r\n\r\n  const handleCreateAccount = useCallback(() => {\r\n    setAuthMode('register')\r\n    setAuthModalOpen(true)\r\n  }, [])\r\n\r\n  const handleAuthModalClose = useCallback(() => {\r\n    setAuthModalOpen(false)\r\n  }, [])\r\n\r\n  const handleAuthModeChange = useCallback((mode: 'login' | 'register' | 'forgot-password') => {\r\n    setAuthMode(mode)\r\n  }, [])\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <>\r\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\r\n          <div className=\"max-w-md w-full space-y-8 p-8\">\r\n            <div className=\"text-center\">\r\n              <h1 className=\"text-4xl font-bold text-gradient mb-4\">StudyMaster</h1>\r\n              <p className=\"text-gray-600 dark:text-gray-400 mb-8\">\r\n                Master your learning with spaced repetition and gamification\r\n              </p>\r\n              <div className=\"space-y-4\">\r\n                <button\r\n                  onClick={handleSignIn}\r\n                  className=\"btn btn-primary btn-lg w-full\"\r\n                >\r\n                  Sign In\r\n                </button>\r\n                <button\r\n                  onClick={handleCreateAccount}\r\n                  className=\"btn btn-secondary btn-lg w-full\"\r\n                >\r\n                  Create Account\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <AuthModal\r\n          isOpen={authModalOpen}\r\n          onClose={handleAuthModalClose}\r\n          mode={authMode}\r\n          onModeChange={handleAuthModeChange}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n      {/* Mobile sidebar backdrop */}\r\n      {sidebarOpen && (\r\n        <div \r\n          className=\"fixed inset-0 z-40 bg-black bg-opacity-50 lg:hidden\"\r\n          onClick={handleSidebarClose}\r\n        />\r\n      )}\r\n\r\n      {/* Sidebar */}\r\n      <Sidebar \r\n        isOpen={sidebarOpen} \r\n        onClose={handleSidebarClose} \r\n      />\r\n\r\n      {/* Main content */}\r\n      <div className=\"lg:pl-64\">\r\n        {/* Top navbar */}\r\n        <Navbar onMenuClick={handleMenuClick} />\r\n        \r\n        {/* Page content */}\r\n        <main className=\"py-6\">\r\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n            <Outlet />\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nLayout.displayName = 'Layout'\r\n\r\nexport default Layout","import { Link, useNavigate } from 'react-router-dom'\r\nimport { useDeckStore } from '../stores/deckStore'\r\nimport { useGamificationStore } from '../stores/gamificationStore'\r\nimport { useAuthStore } from '../stores/authStore'\r\n\r\nconst HomePage = () => {\r\n  const navigate = useNavigate()\r\n  const { decks, getCards } = useDeckStore()\r\n  const { userStats, userAchievements, achievements } = useGamificationStore()\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const { user } = useAuthStore()\r\n\r\n  // Get due cards for today (capped per-deck to avoid overwhelming counts)\r\n  const getDueDecks = () => {\r\n    const DAILY_STUDY_LIMIT_PER_DECK = 20 // default cap; can be made configurable later\r\n    return decks\r\n      .map(deck => {\r\n        const deckCards = getCards(deck.id)\r\n        const dueCards = deckCards.filter(card => {\r\n          if (card.reviewCount === 0) return true // New cards\r\n          return new Date(card.nextReview) <= new Date() // Due cards\r\n        })\r\n        const dueCountRaw = dueCards.length\r\n        const dueCount = Math.min(dueCountRaw, DAILY_STUDY_LIMIT_PER_DECK)\r\n        return { ...deck, dueCount, dueCountRaw }\r\n      })\r\n      .filter(deck => deck.dueCount > 0)\r\n  }\r\n\r\n  // Get recent achievements\r\n  const getRecentAchievements = () => {\r\n    return userAchievements\r\n      .map(ua => {\r\n        const achievement = achievements.find(a => a.id === ua.achievementId)\r\n        return achievement ? { ...achievement, earnedAt: ua.earnedAt } : null\r\n      })\r\n      .filter(Boolean)\r\n      .sort((a, b) => new Date(b!.earnedAt).getTime() - new Date(a!.earnedAt).getTime())\r\n      .slice(0, 3)\r\n  }\r\n\r\n  const formatNumber = (num: number): string => {\r\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`\r\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`\r\n    return num.toString()\r\n  }\r\n\r\n  const dueDecks = getDueDecks()\r\n  const recentAchievements = getRecentAchievements()\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* Welcome Header */}\r\n      <div className=\"text-center\">\r\n        <h1 className=\"text-4xl font-bold text-gradient mb-4\">\r\n          Welcome to StudyMaster\r\n        </h1>\r\n        <p className=\"text-xl text-gray-600 dark:text-gray-400 mb-4\">\r\n          Master your learning with spaced repetition and gamification\r\n        </p>\r\n        \r\n        {/* Live Status Indicator */}\r\n        <div className=\"flex items-center justify-center gap-2 text-sm text-gray-500 dark:text-gray-400\">\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n          <span>Live data • Real-time insights</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Personal Stats */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n        <div className=\"card p-6 text-center\">\r\n          <div className=\"text-3xl font-bold text-primary-600 mb-2\">{formatNumber(userStats.xp)}</div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Total XP</div>\r\n        </div>\r\n        <div className=\"card p-6 text-center\">\r\n          <div className=\"text-3xl font-bold text-success-600 mb-2\">{userStats.currentStreak}</div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Day Streak</div>\r\n        </div>\r\n        <div className=\"card p-6 text-center\">\r\n          <div className=\"text-3xl font-bold text-warning-600 mb-2\">{userStats.gold}</div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Coins</div>\r\n        </div>\r\n        <div className=\"card p-6 text-center\">\r\n          <div className=\"text-3xl font-bold text-purple-600 mb-2\">{userStats.level}</div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Level</div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      {/* Study Today */}\r\n      <div className=\"card p-6\">\r\n        <h2 className=\"text-2xl font-bold mb-4\">📚 Study Today</h2>\r\n        {dueDecks.length > 0 ? (\r\n          <div className=\"space-y-4\">\r\n            {dueDecks.slice(0, 3).map(deck => (\r\n              <div key={deck.id} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                <div>\r\n                  <h3 className=\"font-semibold\">{deck.title}</h3>\r\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{deck.dueCount} cards due</p>\r\n                </div>\r\n                <button\r\n                  onClick={() => navigate(`/study/${deck.id}`)}\r\n                  className=\"btn btn-primary btn-sm\"\r\n                >\r\n                  Study Now\r\n                </button>\r\n              </div>\r\n            ))}\r\n            {dueDecks.length > 3 && (\r\n              <div className=\"text-center\">\r\n                <button\r\n                  onClick={() => navigate('/decks')}\r\n                  className=\"btn btn-secondary btn-sm\"\r\n                >\r\n                  View All Decks ({dueDecks.length - 3} more)\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"text-center py-8\">\r\n            <div className=\"text-6xl mb-4\">🎉</div>\r\n            <h3 className=\"text-xl font-semibold mb-2\">All caught up!</h3>\r\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n              No cards are due for review right now. Great job!\r\n            </p>\r\n            <button\r\n              onClick={() => navigate('/decks')}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Browse Your Decks\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n\r\n      {/* Recent Achievements */}\r\n      {recentAchievements.length > 0 && (\r\n        <div className=\"card p-6\">\r\n          <h2 className=\"text-2xl font-bold mb-4\">🏆 Recent Achievements</h2>\r\n          <div className=\"space-y-3\">\r\n            {recentAchievements.map(achievement => (\r\n              <div key={achievement!.id} className=\"flex items-center space-x-3\">\r\n                <div className=\"w-10 h-10 bg-success-100 dark:bg-success-900 rounded-full flex items-center justify-center\">\r\n                  {achievement!.icon}\r\n                </div>\r\n                <div>\r\n                  <h3 className=\"font-semibold\">{achievement!.name}</h3>\r\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{achievement!.description}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Quick Actions */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Link to=\"/decks\" className=\"card p-6 text-center hover:shadow-lg transition-shadow\">\r\n          <div className=\"text-4xl mb-2\">📚</div>\r\n          <h3 className=\"font-semibold\">My Decks</h3>\r\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Manage your study materials</p>\r\n        </Link>\r\n        \r\n        <Link to=\"/global-stats\" className=\"card p-6 text-center hover:shadow-lg transition-shadow bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border-blue-200 dark:border-blue-800\">\r\n          <div className=\"text-4xl mb-2\">🌍</div>\r\n          <h3 className=\"font-semibold\">Global Stats</h3>\r\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Real-time learning insights</p>\r\n        </Link>\r\n        \r\n        <Link to=\"/challenges\" className=\"card p-6 text-center hover:shadow-lg transition-shadow\">\r\n          <div className=\"text-4xl mb-2\">🎯</div>\r\n          <h3 className=\"font-semibold\">Challenges</h3>\r\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Join learning challenges</p>\r\n        </Link>\r\n        \r\n        <Link to=\"/leaderboard\" className=\"card p-6 text-center hover:shadow-lg transition-shadow\">\r\n          <div className=\"text-4xl mb-2\">🏆</div>\r\n          <h3 className=\"font-semibold\">Leaderboard</h3>\r\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">See how you rank</p>\r\n        </Link>\r\n      </div>\r\n\r\n      {/* Educational Insights Footer */}\r\n      <div className=\"card p-6 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border border-blue-200 dark:border-blue-800\">\r\n        <h3 className=\"text-lg font-semibold mb-3 text-blue-800 dark:text-blue-200 flex items-center gap-2\">\r\n          💡 Learning Insights\r\n        </h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">87%</div>\r\n            <div className=\"text-blue-700 dark:text-blue-300\">Spaced repetition effectiveness</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">25min</div>\r\n            <div className=\"text-green-700 dark:text-green-300\">Optimal study session</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">7-9PM</div>\r\n            <div className=\"text-purple-700 dark:text-purple-300\">Peak learning hours</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\">3x</div>\r\n            <div className=\"text-orange-700 dark:text-orange-300\">Retention improvement</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomePage","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { ZoomIn, ZoomOut, RotateCcw } from 'lucide-react';\r\nimport { SvgMapCardOptions } from '../../../shared/types';\r\n\r\ninterface SvgMapCardProps {\r\n  options: SvgMapCardOptions;\r\n  showAnswer?: boolean;\r\n  onAnswer?: (correct: boolean) => void;\r\n  isStudyMode?: boolean;\r\n}\r\n\r\n// Define small countries/regions that need visual indicators by map type\r\nconst SMALL_REGIONS_BY_MAP: { [mapType: string]: string[] } = {\r\n  'europe': [\r\n    'AD', // Andorra\r\n    'LI', // Liechtenstein\r\n    'LU', // Luxembourg\r\n    'MT', // Malta\r\n    'MC', // Monaco\r\n    'SM', // San Marino\r\n    'VA', // Vatican City\r\n    'CY', // Cyprus\r\n    'ME', // Montenegro\r\n    'MK', // Macedonia\r\n    'XK', // Kosovo\r\n    'SI', // Slovenia\r\n    'MD'  // Moldova\r\n  ],\r\n  'world': [\r\n    'AD', 'LI', 'LU', 'MT', 'MC', 'SM', 'VA', // Europe small countries\r\n    'SG', 'BH', 'BN', 'QA', 'KW', // Small Asian countries\r\n    'BB', 'GD', 'LC', 'VC', 'AG', 'KN', 'DM', // Caribbean islands\r\n    'MV', 'NR', 'TV', 'PW', 'MH', 'FM', 'KI', 'TO', 'WS', 'VU', 'FJ' // Pacific islands\r\n  ],\r\n  'africa': [\r\n    'DJ', 'GM', 'GW', 'GQ', 'CV', 'KM', 'MU', 'SC', 'ST' // Small African countries\r\n  ],\r\n  'north-america': [\r\n    'BB', 'GD', 'LC', 'VC', 'AG', 'KN', 'DM', 'TT', 'JM' // Caribbean islands\r\n  ],\r\n  'us': [\r\n    'DE', 'RI', 'CT', 'NJ', 'NH', 'VT', 'MA', 'MD', 'HI' // Small US states\r\n  ]\r\n};\r\n\r\nexport const SvgMapCard: React.FC<SvgMapCardProps> = ({\r\n  options,\r\n  showAnswer = false,\r\n  onAnswer,\r\n  isStudyMode = false\r\n}) => {\r\n  const [svgContent, setSvgContent] = useState<string>('');\r\n  const [userAnswer, setUserAnswer] = useState<string>('');\r\n  const [showResult, setShowResult] = useState(false);\r\n  \r\n  // Zoom and pan state\r\n  const [zoom, setZoom] = useState(1);\r\n  const [panX, setPanX] = useState(0);\r\n  const [panY, setPanY] = useState(0);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\r\n  const [initialZoomCalculated, setInitialZoomCalculated] = useState(false);\r\n  const mapContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const loadSvgContent = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(options.svgPath);\r\n      const svgText = await response.text();\r\n      setSvgContent(svgText);\r\n    } catch (error) {\r\n      console.error('Failed to load SVG:', error);\r\n    }\r\n  }, [options.svgPath]);\r\n\r\n  useEffect(() => {\r\n    loadSvgContent();\r\n  }, [loadSvgContent]);\r\n\r\n  // Reset input and result state when country changes\r\n  useEffect(() => {\r\n    setUserAnswer('');\r\n    setShowResult(false);\r\n    // Reset zoom and pan when country changes, but don't reset to 1 - let calculateInitialZoom handle it\r\n    setInitialZoomCalculated(false);\r\n    setPanX(0);\r\n    setPanY(0);\r\n  }, [options.countryId, options.countryName]);\r\n\r\n  // Calculate optimal initial zoom level based on country size and map fitting\r\n  const calculateInitialZoom = useCallback((svgElement: SVGSVGElement, countryElement?: Element) => {\r\n    try {\r\n      const containerRect = mapContainerRef.current?.getBoundingClientRect();\r\n      if (!containerRect) return 1;\r\n\r\n      // Get the SVG viewBox to understand the coordinate system\r\n      const viewBox = svgElement.getAttribute('viewBox');\r\n      let svgWidth = 1000, svgHeight = 600; // defaults\r\n      \r\n      if (viewBox) {\r\n        const [, , width, height] = viewBox.split(' ').map(Number);\r\n        svgWidth = width;\r\n        svgHeight = height;\r\n      }\r\n\r\n      const containerWidth = containerRect.width;\r\n      const containerHeight = containerRect.height;\r\n\r\n      // Calculate base zoom to fit the entire map in the container\r\n      const baseZoomX = containerWidth / svgWidth;\r\n      const baseZoomY = containerHeight / svgHeight;\r\n      const baseZoom = Math.min(baseZoomX, baseZoomY) * 0.98; // 98% to leave very minimal padding\r\n\r\n      // If no specific country element, return a much higher base zoom to fill the container\r\n      if (!countryElement) {\r\n        // For world maps, ensure they fill the container completely with aggressive zoom\r\n        const enhancedBaseZoom = Math.max(baseZoom, 4.0); // Minimum 400% zoom as requested\r\n        return Math.max(4.0, Math.min(enhancedBaseZoom, 6));\r\n      }\r\n\r\n      // Get the bounding box of the country in SVG coordinates\r\n      const bbox = (countryElement as SVGGraphicsElement).getBBox();\r\n      \r\n      if (!bbox || bbox.width === 0 || bbox.height === 0) {\r\n        console.warn('Invalid bounding box for country element');\r\n        return Math.max(0.5, Math.min(baseZoom, 3));\r\n      }\r\n      \r\n      // Minimum size requirement: 25x25 pixels on screen (increased from 15x15)\r\n      const minPixelSize = 25;\r\n      \r\n      // Calculate how many SVG units correspond to the minimum pixel size\r\n      const minSvgWidth = minPixelSize / baseZoom;\r\n      const minSvgHeight = minPixelSize / baseZoom;\r\n      \r\n      // Calculate zoom needed to make the country at least minPixelSize\r\n      const zoomForWidth = bbox.width < minSvgWidth ? minSvgWidth / bbox.width : 1;\r\n      const zoomForHeight = bbox.height < minSvgHeight ? minSvgHeight / bbox.height : 1;\r\n      \r\n      // Use the larger zoom factor to ensure both dimensions meet the minimum\r\n      let countryZoom = Math.max(zoomForWidth, zoomForHeight);\r\n      \r\n      // For very small countries (less than 10 SVG units in any dimension), apply much more aggressive zoom\r\n      if (bbox.width < 10 || bbox.height < 10) {\r\n        countryZoom = Math.max(countryZoom, 12); // Increased from 8x to 12x zoom for tiny countries\r\n      }\r\n      \r\n      // For extremely small countries (less than 3 SVG units), apply extreme zoom\r\n      if (bbox.width < 3 || bbox.height < 3) {\r\n        countryZoom = Math.max(countryZoom, 25); // Increased from 15x to 25x zoom for microscopic countries\r\n      }\r\n      \r\n      // For ultra-micro countries (less than 1 SVG unit), apply ultra-extreme zoom\r\n      if (bbox.width < 1 || bbox.height < 1) {\r\n        countryZoom = Math.max(countryZoom, 40); // 40x zoom for ultra-microscopic countries like Andorra\r\n      }\r\n      \r\n      // Combine base zoom with country-specific zoom\r\n      const finalZoom = baseZoom * countryZoom;\r\n      \r\n      // Ensure minimum zoom is at least 400% (4x) for map deck cards as requested\r\n      const minZoom = Math.max(4.0, baseZoom); // At least 400% or the base zoom, whichever is higher\r\n      \r\n      // Clamp between reasonable bounds (increased max to 50 for ultra-small countries)\r\n      const clampedZoom = Math.max(minZoom, Math.min(finalZoom, 50));\r\n      \r\n      console.log('Zoom calculation details:', {\r\n        containerSize: `${containerWidth}x${containerHeight}`,\r\n        svgSize: `${svgWidth}x${svgHeight}`,\r\n        baseZoom: baseZoom.toFixed(3),\r\n        countryBBox: `${bbox.width.toFixed(1)}x${bbox.height.toFixed(1)} at (${bbox.x.toFixed(1)},${bbox.y.toFixed(1)})`,\r\n        countryZoom: countryZoom.toFixed(3),\r\n        finalZoom: clampedZoom.toFixed(3)\r\n      });\r\n      \r\n      return clampedZoom;\r\n    } catch (error) {\r\n      console.warn('Error calculating initial zoom:', error);\r\n      // Fallback: calculate base zoom to fit map in container\r\n      const containerRect = mapContainerRef.current?.getBoundingClientRect();\r\n      if (containerRect) {\r\n        const baseZoom = Math.min(containerRect.width / 1000, containerRect.height / 600) * 0.98;\r\n        return Math.max(4.0, Math.min(baseZoom, 6));\r\n      }\r\n      return 4.0; // Minimum 400% zoom as requested for map deck cards\r\n    }\r\n  }, []);\r\n\r\n  // Zoom and pan functions\r\n  const handleZoomIn = useCallback(() => {\r\n    setZoom(prev => Math.min(prev * 1.5, 50)); // Increased max zoom to 50x (5000%)\r\n  }, []);\r\n\r\n  const handleZoomOut = useCallback(() => {\r\n    setZoom(prev => Math.max(prev / 1.5, 0.5));\r\n  }, []);\r\n\r\n  const handleResetView = useCallback(() => {\r\n    setInitialZoomCalculated(false);\r\n    setPanX(0);\r\n    setPanY(0);\r\n    // Let the effect recalculate the initial zoom\r\n  }, []);\r\n\r\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\r\n    if (zoom > 1) {\r\n      setIsDragging(true);\r\n      setDragStart({ x: e.clientX - panX, y: e.clientY - panY });\r\n    }\r\n  }, [zoom, panX, panY]);\r\n\r\n  const handleMouseMove = useCallback((e: React.MouseEvent) => {\r\n    if (isDragging && zoom > 1) {\r\n      setPanX(e.clientX - dragStart.x);\r\n      setPanY(e.clientY - dragStart.y);\r\n    }\r\n  }, [isDragging, dragStart, zoom]);\r\n\r\n  const handleMouseUp = useCallback(() => {\r\n    setIsDragging(false);\r\n  }, []);\r\n\r\n  const handleWheel = useCallback((e: React.WheelEvent) => {\r\n    e.preventDefault();\r\n    const delta = e.deltaY > 0 ? 0.9 : 1.1;\r\n    setZoom(prev => Math.max(0.5, Math.min(50, prev * delta))); // Increased max zoom to 50x\r\n  }, []);\r\n\r\n  // Touch events for mobile\r\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\r\n    if (e.touches.length === 1 && zoom > 1) {\r\n      const touch = e.touches[0];\r\n      setIsDragging(true);\r\n      setDragStart({ x: touch.clientX - panX, y: touch.clientY - panY });\r\n    }\r\n  }, [zoom, panX, panY]);\r\n\r\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\r\n    if (isDragging && e.touches.length === 1 && zoom > 1) {\r\n      e.preventDefault();\r\n      const touch = e.touches[0];\r\n      setPanX(touch.clientX - dragStart.x);\r\n      setPanY(touch.clientY - dragStart.y);\r\n    }\r\n  }, [isDragging, dragStart, zoom]);\r\n\r\n  const handleTouchEnd = useCallback(() => {\r\n    setIsDragging(false);\r\n  }, []);\r\n\r\n  // Get map type from SVG path\r\n  const getMapType = (svgPath: string): string => {\r\n    const filename = svgPath.split('/').pop()?.replace('.svg', '') || '';\r\n    return filename;\r\n  };\r\n\r\n  // Improved positioning coordinates for small countries/regions based on actual SVG coordinates\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const getSmallRegionIndicatorPosition = (countryId: string, mapType: string) => {\r\n    // Position data organized by map type\r\n    const positionsByMap: { [mapType: string]: { [regionId: string]: { x: number; y: number; offsetX: number; offsetY: number } } } = {\r\n      'europe': {\r\n        'AD': { x: 420, y: 380, offsetX: 50, offsetY: -40 }, // Andorra\r\n        'LI': { x: 480, y: 320, offsetX: 40, offsetY: -50 }, // Liechtenstein\r\n        'LU': { x: 440, y: 280, offsetX: -60, offsetY: -30 }, // Luxembourg\r\n        'MT': { x: 520, y: 480, offsetX: 0, offsetY: 60 }, // Malta\r\n        'MC': { x: 460, y: 380, offsetX: 60, offsetY: -20 }, // Monaco\r\n        'SM': { x: 500, y: 400, offsetX: 50, offsetY: -30 }, // San Marino\r\n        'VA': { x: 490, y: 420, offsetX: 40, offsetY: -40 }, // Vatican City\r\n        'CY': { x: 680, y: 460, offsetX: 0, offsetY: 70 }, // Cyprus\r\n        'ME': { x: 580, y: 400, offsetX: 60, offsetY: -30 }, // Montenegro\r\n        'MK': { x: 600, y: 420, offsetX: 0, offsetY: 60 }, // North Macedonia\r\n        'XK': { x: 580, y: 410, offsetX: -60, offsetY: 0 }, // Kosovo\r\n        'SI': { x: 520, y: 350, offsetX: 0, offsetY: -60 }, // Slovenia\r\n        'MD': { x: 660, y: 340, offsetX: 80, offsetY: 0 } // Moldova\r\n      },\r\n      'world': {\r\n        // Europe small countries (scaled for world map) - corrected coordinates based on actual geography\r\n        'AD': { x: 460, y: 210, offsetX: 30, offsetY: -25 }, // Andorra - in Pyrenees between France and Spain\r\n        'LI': { x: 490, y: 175, offsetX: 25, offsetY: -30 }, // Liechtenstein - between Switzerland and Austria\r\n        'LU': { x: 475, y: 165, offsetX: -35, offsetY: -20 }, // Luxembourg - between France, Belgium, Germany\r\n        'MT': { x: 510, y: 240, offsetX: 0, offsetY: 35 }, // Malta - south of Sicily\r\n        'MC': { x: 465, y: 215, offsetX: 35, offsetY: -15 }, // Monaco - French Riviera\r\n        'SM': { x: 500, y: 200, offsetX: 30, offsetY: -20 }, // San Marino - within Italy\r\n        'VA': { x: 498, y: 205, offsetX: 25, offsetY: -25 }, // Vatican City - within Rome\r\n        // Small Asian countries\r\n        'SG': { x: 710, y: 285, offsetX: 0, offsetY: 40 }, // Singapore - Southeast Asia, south of Malaysia\r\n        'BH': { x: 580, y: 235, offsetX: 30, offsetY: -20 }, // Bahrain - Persian Gulf, near Saudi Arabia\r\n        'BN': { x: 720, y: 290, offsetX: 40, offsetY: 0 }, // Brunei - Southeast Asia, on Borneo island\r\n        'QA': { x: 585, y: 240, offsetX: 35, offsetY: -25 }, // Qatar - Persian Gulf peninsula\r\n        'KW': { x: 575, y: 225, offsetX: 30, offsetY: -30 }, // Kuwait - Persian Gulf, north of Saudi Arabia\r\n        // Caribbean islands\r\n        'BB': { x: 180, y: 250, offsetX: 40, offsetY: 0 }, // Barbados\r\n        'GD': { x: 175, y: 245, offsetX: -40, offsetY: 0 }, // Grenada\r\n        // Pacific islands\r\n        'MV': { x: 450, y: 280, offsetX: 0, offsetY: 50 }, // Maldives\r\n        'NR': { x: 680, y: 290, offsetX: 40, offsetY: 0 }, // Nauru\r\n        'TV': { x: 720, y: 310, offsetX: 0, offsetY: 40 } // Tuvalu\r\n      },\r\n      'us': {\r\n        'DE': { x: 750, y: 200, offsetX: 40, offsetY: -20 }, // Delaware\r\n        'RI': { x: 820, y: 150, offsetX: 30, offsetY: -25 }, // Rhode Island\r\n        'CT': { x: 810, y: 160, offsetX: 35, offsetY: -20 }, // Connecticut\r\n        'NJ': { x: 780, y: 180, offsetX: 40, offsetY: -15 }, // New Jersey\r\n        'NH': { x: 820, y: 130, offsetX: 30, offsetY: -30 }, // New Hampshire\r\n        'VT': { x: 800, y: 125, offsetX: -35, offsetY: -25 }, // Vermont\r\n        'MA': { x: 825, y: 145, offsetX: 40, offsetY: -20 }, // Massachusetts\r\n        'MD': { x: 770, y: 190, offsetX: -40, offsetY: -20 }, // Maryland\r\n        'HI': { x: 200, y: 400, offsetX: 0, offsetY: 50 } // Hawaii\r\n      }\r\n    };\r\n\r\n    const mapPositions = positionsByMap[mapType];\r\n    if (mapPositions && mapPositions[countryId]) {\r\n      return mapPositions[countryId];\r\n    }\r\n\r\n    // Default fallback position\r\n    return { x: 500, y: 350, offsetX: 50, offsetY: -50 };\r\n  };\r\n\r\n\r\n  const processedSvgContent = React.useMemo(() => {\r\n    if (!svgContent) return '';\r\n\r\n    // Parse the SVG and highlight the target country/region\r\n    const parser = new DOMParser();\r\n    const svgDoc = parser.parseFromString(svgContent, 'image/svg+xml');\r\n    \r\n    // Get the SVG element and make it responsive\r\n    const svgElement = svgDoc.querySelector('svg');\r\n    if (svgElement) {\r\n      svgElement.setAttribute('width', '100%');\r\n      svgElement.setAttribute('height', '100%');\r\n      svgElement.setAttribute('viewBox', svgElement.getAttribute('viewBox') || '0 0 1000 600');\r\n      svgElement.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n      svgElement.style.maxWidth = '100%';\r\n      svgElement.style.maxHeight = '100%';\r\n    }\r\n    \r\n    // Determine map type from SVG path\r\n    const mapType = getMapType(options.svgPath);\r\n    \r\n    // Find the target country/region element\r\n    const targetCountry = svgDoc.querySelector(`[id=\"${options.countryId}\"]`);\r\n    \r\n    // Determine if this is a small region that needs an indicator\r\n    const smallRegions = SMALL_REGIONS_BY_MAP[mapType] || [];\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const isSmallRegion = smallRegions.includes(options.countryId);\r\n    \r\n    if (targetCountry) {\r\n      // Set highlight style for the target country/region\r\n      targetCountry.setAttribute('fill', '#ef4444'); // Red highlight\r\n      targetCountry.setAttribute('stroke', '#dc2626');\r\n      targetCountry.setAttribute('stroke-width', '2');\r\n    }\r\n    \r\n\r\n    // Reset all other countries/regions to default style\r\n    const allRegions = svgDoc.querySelectorAll('path[id], polygon[id], circle[id]');\r\n    allRegions.forEach(region => {\r\n      if (region.getAttribute('id') !== options.countryId) {\r\n        region.setAttribute('fill', '#e5e7eb'); // Light gray\r\n        region.setAttribute('stroke', '#9ca3af');\r\n        region.setAttribute('stroke-width', '1');\r\n      }\r\n    });\r\n\r\n    return new XMLSerializer().serializeToString(svgDoc);\r\n  }, [svgContent, options.countryId, options.svgPath]);\r\n\r\n  // Effect to calculate and set initial zoom level\r\n  useEffect(() => {\r\n    if (!processedSvgContent || initialZoomCalculated) return;\r\n\r\n    // Wait for the DOM to update with the new SVG content\r\n    const timer = setTimeout(() => {\r\n      const mapContainer = mapContainerRef.current;\r\n      if (!mapContainer) return;\r\n\r\n      const svgElement = mapContainer.querySelector('svg');\r\n      if (!svgElement) return;\r\n\r\n      // Try multiple selectors to find the target country element\r\n      let targetCountry = svgElement.querySelector(`[id=\"${options.countryId}\"]`);\r\n      \r\n      // If not found, try alternative selectors\r\n      if (!targetCountry) {\r\n        // Try with different case variations\r\n        targetCountry = svgElement.querySelector(`[id=\"${options.countryId.toLowerCase()}\"]`) ||\r\n                       svgElement.querySelector(`[id=\"${options.countryId.toUpperCase()}\"]`) ||\r\n                       // Try with class selector\r\n                       svgElement.querySelector(`[class*=\"${options.countryId}\"]`) ||\r\n                       // Try data attributes\r\n                       svgElement.querySelector(`[data-id=\"${options.countryId}\"]`) ||\r\n                       svgElement.querySelector(`[data-country=\"${options.countryId}\"]`) ||\r\n                       // Try name attribute\r\n                       svgElement.querySelector(`[name=\"${options.countryId}\"]`);\r\n      }\r\n      \r\n      // Calculate zoom - pass targetCountry if found, otherwise calculate base zoom for map fitting\r\n      const optimalZoom = calculateInitialZoom(svgElement, targetCountry || undefined);\r\n      setZoom(optimalZoom);\r\n      setInitialZoomCalculated(true);\r\n      \r\n      console.log('Setting initial zoom:', optimalZoom, 'for country:', options.countryId, 'found element:', !!targetCountry);\r\n    }, 100); // Small delay to ensure DOM is updated\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [processedSvgContent, options.countryId, initialZoomCalculated, calculateInitialZoom]);\r\n\r\n  const handleSubmitAnswer = () => {\r\n    const isCorrect = userAnswer.toLowerCase().trim() === options.countryName.toLowerCase().trim();\r\n    setShowResult(true);\r\n    if (onAnswer) {\r\n      onAnswer(isCorrect);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && userAnswer.trim() && !showResult) {\r\n      handleSubmitAnswer();\r\n    }\r\n  };\r\n\r\n  if (!svgContent) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64 bg-gray-100 rounded-lg\">\r\n        <div className=\"text-gray-500\">Loading map...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full mx-auto\">\r\n      {/* Map Display */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 mb-4 relative\">\r\n        {/* Zoom Controls */}\r\n        <div className=\"absolute top-2 right-2 z-10 flex flex-col gap-1 bg-white dark:bg-gray-700 rounded-lg shadow-lg p-1\">\r\n          <button\r\n            onClick={handleZoomIn}\r\n            className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-600 rounded transition-colors\"\r\n            title=\"Zoom In\"\r\n          >\r\n            <ZoomIn size={16} className=\"text-gray-700 dark:text-gray-300\" />\r\n          </button>\r\n          <button\r\n            onClick={handleZoomOut}\r\n            className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-600 rounded transition-colors\"\r\n            title=\"Zoom Out\"\r\n          >\r\n            <ZoomOut size={16} className=\"text-gray-700 dark:text-gray-300\" />\r\n          </button>\r\n          <button\r\n            onClick={handleResetView}\r\n            className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-600 rounded transition-colors\"\r\n            title=\"Reset View\"\r\n          >\r\n            <RotateCcw size={16} className=\"text-gray-700 dark:text-gray-300\" />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Zoom Level Indicator */}\r\n        {zoom !== 1 && (\r\n          <div className=\"absolute top-2 left-2 z-10 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-sm\">\r\n            {Math.round(zoom * 100)}%\r\n          </div>\r\n        )}\r\n\r\n        {/* Map Container */}\r\n        <div\r\n          ref={mapContainerRef}\r\n          className=\"w-full h-64 md:h-80 flex items-center justify-center overflow-hidden cursor-grab active:cursor-grabbing\"\r\n          style={{\r\n            cursor: zoom > 1 ? (isDragging ? 'grabbing' : 'grab') : 'default'\r\n          }}\r\n          onMouseDown={handleMouseDown}\r\n          onMouseMove={handleMouseMove}\r\n          onMouseUp={handleMouseUp}\r\n          onMouseLeave={handleMouseUp}\r\n          onWheel={handleWheel}\r\n          onTouchStart={handleTouchStart}\r\n          onTouchMove={handleTouchMove}\r\n          onTouchEnd={handleTouchEnd}\r\n        >\r\n          <div\r\n            className=\"transition-transform duration-200 ease-out\"\r\n            style={{\r\n              transform: `scale(${zoom}) translate(${panX / zoom}px, ${panY / zoom}px)`,\r\n              transformOrigin: 'center center'\r\n            }}\r\n            dangerouslySetInnerHTML={{ __html: processedSvgContent }}\r\n          />\r\n        </div>\r\n\r\n        {/* Instructions for zoom */}\r\n        {zoom === 1 && (\r\n          <div className=\"absolute bottom-2 left-2 z-10 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-xs\">\r\n            Use controls or scroll to zoom • Drag to pan when zoomed\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Question/Answer Section */}\r\n      {isStudyMode && !showAnswer && (\r\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4 text-center\">\r\n            What {getMapType(options.svgPath).includes('us') ? 'state' :\r\n                  getMapType(options.svgPath).includes('gb') || getMapType(options.svgPath).includes('fi') ||\r\n                  getMapType(options.svgPath).includes('fr') || getMapType(options.svgPath).includes('no') ||\r\n                  getMapType(options.svgPath).includes('se') || getMapType(options.svgPath).includes('vn') ? 'region' : 'country'} is highlighted in red?\r\n          </h3>\r\n          \r\n          {!showResult ? (\r\n            <div className=\"space-y-4\">\r\n              <input\r\n                type=\"text\"\r\n                value={userAnswer}\r\n                onChange={(e) => setUserAnswer(e.target.value)}\r\n                onKeyPress={handleKeyPress}\r\n                placeholder=\"Enter country name...\"\r\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                autoFocus\r\n              />\r\n              <button\r\n                onClick={handleSubmitAnswer}\r\n                disabled={!userAnswer.trim()}\r\n                className=\"w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                Submit Answer\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center\">\r\n              <div className={`text-lg font-semibold mb-2 ${\r\n                userAnswer.toLowerCase().trim() === options.countryName.toLowerCase().trim()\r\n                  ? 'text-green-600' \r\n                  : 'text-red-600'\r\n              }`}>\r\n                {userAnswer.toLowerCase().trim() === options.countryName.toLowerCase().trim()\r\n                  ? '✓ Correct!' \r\n                  : '✗ Incorrect'}\r\n              </div>\r\n              <div className=\"text-gray-700\">\r\n                Your answer: <span className=\"font-medium\">{userAnswer}</span>\r\n              </div>\r\n              <div className=\"text-gray-700\">\r\n                Correct answer: <span className=\"font-medium\">{options.countryName}</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Answer Display (for review mode) */}\r\n      {showAnswer && (\r\n        <div className=\"bg-white rounded-lg shadow-lg p-6 text-center\">\r\n          <h3 className=\"text-lg font-semibold text-gray-800\">\r\n            {options.countryName}\r\n          </h3>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};","import React from 'react'\r\nimport { Card, SvgMapCardOptions } from '../../../../shared/types'\r\nimport { SvgMapCard } from '../SvgMapCard'\r\n\r\ninterface CardRendererProps {\r\n  card: Card\r\n  showAnswer: boolean\r\n  onAnswerSubmit?: (answer: string) => void\r\n}\r\n\r\nconst CardRenderer: React.FC<CardRendererProps> = ({ card, showAnswer, onAnswerSubmit }) => {\r\n  if (!card) {\r\n    return null // or a loading indicator\r\n  }\r\n  // Handle SVG map cards\r\n  if (card.cardType.type === 'svg_map') {\r\n    const options = card.cardType.options as SvgMapCardOptions\r\n    return (\r\n      <SvgMapCard\r\n        options={options}\r\n        showAnswer={showAnswer}\r\n        isStudyMode={!showAnswer}\r\n        onAnswer={(correct) => {\r\n          if (onAnswerSubmit) {\r\n            onAnswerSubmit(correct ? 'correct' : 'incorrect')\r\n          }\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Handle basic cards (default behavior)\r\n  return (\r\n    <div className=\"text-center\">\r\n      <div className=\"mb-6\">\r\n        <h2 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 mb-2\">\r\n          {showAnswer ? 'Answer' : 'Question'}\r\n        </h2>\r\n        <div className=\"text-2xl font-medium text-gray-900 dark:text-white\">\r\n          {showAnswer ? card.backContent : card.frontContent}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardRenderer","import { useEffect, useCallback, useRef } from 'react'\r\n\r\nexport interface KeyboardShortcut {\r\n  key: string\r\n  description: string\r\n  action: () => void\r\n  disabled?: boolean\r\n  ctrlKey?: boolean\r\n  altKey?: boolean\r\n  shiftKey?: boolean\r\n}\r\n\r\nexport interface UseKeyboardShortcutsOptions {\r\n  shortcuts: KeyboardShortcut[]\r\n  enabled?: boolean\r\n  preventDefault?: boolean\r\n  stopPropagation?: boolean\r\n  debugMode?: boolean\r\n}\r\n\r\n/**\r\n * Custom hook for managing keyboard shortcuts\r\n * \r\n * Provides comprehensive keyboard shortcut management with:\r\n * - Multiple modifier key support (Ctrl, Alt, Shift)\r\n * - Conditional enabling/disabling\r\n * - Debug logging\r\n * - Event handling options\r\n */\r\nexport const useKeyboardShortcuts = ({\r\n  shortcuts,\r\n  enabled = true,\r\n  preventDefault = true,\r\n  stopPropagation = true,\r\n  debugMode = false\r\n}: UseKeyboardShortcutsOptions) => {\r\n  const shortcutsRef = useRef(shortcuts)\r\n  const enabledRef = useRef(enabled)\r\n\r\n  // Update refs when props change\r\n  useEffect(() => {\r\n    shortcutsRef.current = shortcuts\r\n    enabledRef.current = enabled\r\n  }, [shortcuts, enabled])\r\n\r\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\r\n    if (!enabledRef.current) return\r\n\r\n    // Don't trigger shortcuts when user is typing in input fields\r\n    const target = event.target as HTMLElement\r\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\r\n      return\r\n    }\r\n\r\n    const key = event.key.toLowerCase()\r\n    const ctrlKey = event.ctrlKey || event.metaKey // Support both Ctrl and Cmd\r\n    const altKey = event.altKey\r\n    const shiftKey = event.shiftKey\r\n\r\n    if (debugMode) {\r\n      console.log('[KeyboardShortcuts] Key pressed:', {\r\n        key,\r\n        ctrlKey,\r\n        altKey,\r\n        shiftKey,\r\n        code: event.code\r\n      })\r\n    }\r\n\r\n    // Find matching shortcut\r\n    const matchingShortcut = shortcutsRef.current.find(shortcut => {\r\n      if (shortcut.disabled) return false\r\n      \r\n      const keyMatches = shortcut.key.toLowerCase() === key\r\n      const ctrlMatches = (shortcut.ctrlKey || false) === ctrlKey\r\n      const altMatches = (shortcut.altKey || false) === altKey\r\n      const shiftMatches = (shortcut.shiftKey || false) === shiftKey\r\n\r\n      return keyMatches && ctrlMatches && altMatches && shiftMatches\r\n    })\r\n\r\n    if (matchingShortcut) {\r\n      if (debugMode) {\r\n        console.log('[KeyboardShortcuts] Executing shortcut:', {\r\n          key: matchingShortcut.key,\r\n          description: matchingShortcut.description\r\n        })\r\n      }\r\n\r\n      if (preventDefault) {\r\n        event.preventDefault()\r\n      }\r\n      \r\n      if (stopPropagation) {\r\n        event.stopPropagation()\r\n      }\r\n\r\n      try {\r\n        matchingShortcut.action()\r\n      } catch (error) {\r\n        console.error('[KeyboardShortcuts] Error executing shortcut:', error)\r\n      }\r\n    }\r\n  }, [preventDefault, stopPropagation, debugMode])\r\n\r\n  useEffect(() => {\r\n    if (enabled) {\r\n      document.addEventListener('keydown', handleKeyDown)\r\n      \r\n      if (debugMode) {\r\n        console.log('[KeyboardShortcuts] Registered shortcuts:', shortcuts.map(s => ({\r\n          key: s.key,\r\n          description: s.description,\r\n          modifiers: {\r\n            ctrl: s.ctrlKey,\r\n            alt: s.altKey,\r\n            shift: s.shiftKey\r\n          }\r\n        })))\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown)\r\n      \r\n      if (debugMode) {\r\n        console.log('[KeyboardShortcuts] Unregistered shortcuts')\r\n      }\r\n    }\r\n  }, [handleKeyDown, enabled, debugMode, shortcuts])\r\n\r\n  return {\r\n    shortcuts: shortcutsRef.current,\r\n    enabled: enabledRef.current\r\n  }\r\n}\r\n\r\n/**\r\n * Hook specifically for study session shortcuts\r\n */\r\nexport const useStudyKeyboardShortcuts = ({\r\n  onFlipCard,\r\n  onAnswerAgain,\r\n  onAnswerHard,\r\n  onAnswerGood,\r\n  onAnswerEasy,\r\n  onExitStudy,\r\n  showAnswer,\r\n  enabled = true,\r\n  debugMode = false\r\n}: {\r\n  onFlipCard: () => void\r\n  onAnswerAgain: () => void\r\n  onAnswerHard: () => void\r\n  onAnswerGood: () => void\r\n  onAnswerEasy: () => void\r\n  onExitStudy: () => void\r\n  showAnswer: boolean\r\n  enabled?: boolean\r\n  debugMode?: boolean\r\n}) => {\r\n  const shortcuts: KeyboardShortcut[] = [\r\n    // Card flipping\r\n    {\r\n      key: ' ', // Space\r\n      description: 'Flip card / Show answer',\r\n      action: onFlipCard,\r\n      disabled: showAnswer\r\n    },\r\n    {\r\n      key: 'enter',\r\n      description: 'Flip card / Show answer',\r\n      action: onFlipCard,\r\n      disabled: showAnswer\r\n    },\r\n    \r\n    // Answer shortcuts (only when answer is shown)\r\n    {\r\n      key: '1',\r\n      description: 'Answer: Again',\r\n      action: onAnswerAgain,\r\n      disabled: !showAnswer\r\n    },\r\n    {\r\n      key: '2',\r\n      description: 'Answer: Hard',\r\n      action: onAnswerHard,\r\n      disabled: !showAnswer\r\n    },\r\n    {\r\n      key: '3',\r\n      description: 'Answer: Good',\r\n      action: onAnswerGood,\r\n      disabled: !showAnswer\r\n    },\r\n    {\r\n      key: '4',\r\n      description: 'Answer: Easy',\r\n      action: onAnswerEasy,\r\n      disabled: !showAnswer\r\n    },\r\n    \r\n    // Alternative answer shortcuts\r\n    {\r\n      key: 'a',\r\n      description: 'Answer: Again',\r\n      action: onAnswerAgain,\r\n      disabled: !showAnswer\r\n    },\r\n    {\r\n      key: 'h',\r\n      description: 'Answer: Hard',\r\n      action: onAnswerHard,\r\n      disabled: !showAnswer\r\n    },\r\n    {\r\n      key: 'g',\r\n      description: 'Answer: Good',\r\n      action: onAnswerGood,\r\n      disabled: !showAnswer\r\n    },\r\n    {\r\n      key: 'e',\r\n      description: 'Answer: Easy',\r\n      action: onAnswerEasy,\r\n      disabled: !showAnswer\r\n    },\r\n    \r\n    // Navigation shortcuts\r\n    {\r\n      key: 'escape',\r\n      description: 'Exit study session',\r\n      action: onExitStudy\r\n    },\r\n    {\r\n      key: 'q',\r\n      description: 'Exit study session',\r\n      action: onExitStudy\r\n    }\r\n  ]\r\n\r\n  return useKeyboardShortcuts({\r\n    shortcuts,\r\n    enabled,\r\n    debugMode\r\n  })\r\n}","import React from 'react'\r\nimport { KeyboardShortcut } from '../../hooks/useKeyboardShortcuts'\r\n\r\ninterface KeyboardShortcutsHelpProps {\r\n  shortcuts: KeyboardShortcut[]\r\n  className?: string\r\n  title?: string\r\n  compact?: boolean\r\n}\r\n\r\n/**\r\n * Component to display keyboard shortcuts help\r\n */\r\nexport const KeyboardShortcutsHelp: React.FC<KeyboardShortcutsHelpProps> = ({ \r\n  shortcuts, \r\n  className = '',\r\n  title = 'Keyboard Shortcuts',\r\n  compact = false\r\n}) => {\r\n  const formatKey = (shortcut: KeyboardShortcut) => {\r\n    const parts = []\r\n    \r\n    if (shortcut.ctrlKey) parts.push('Ctrl')\r\n    if (shortcut.altKey) parts.push('Alt')\r\n    if (shortcut.shiftKey) parts.push('Shift')\r\n    \r\n    let key = shortcut.key\r\n    if (key === ' ') key = 'Space'\r\n    if (key === 'enter') key = 'Enter'\r\n    if (key === 'escape') key = 'Esc'\r\n    \r\n    parts.push(key.toUpperCase())\r\n    \r\n    return parts.join(' + ')\r\n  }\r\n\r\n  const enabledShortcuts = shortcuts.filter(s => !s.disabled)\r\n\r\n  if (enabledShortcuts.length === 0) return null\r\n\r\n  if (compact) {\r\n    return (\r\n      <div className={`text-xs text-gray-500 dark:text-gray-400 ${className}`}>\r\n        {enabledShortcuts.slice(0, 4).map((shortcut, index) => (\r\n          <span key={index} className=\"mr-4\">\r\n            <kbd className=\"px-1 py-0.5 bg-gray-200 dark:bg-gray-700 rounded text-xs\">\r\n              {shortcut.key === ' ' ? 'Space' : shortcut.key.toUpperCase()}\r\n            </kbd>\r\n            {' '}\r\n            {shortcut.description}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-gray-50 dark:bg-gray-800 rounded-lg p-4 ${className}`}>\r\n      <h3 className=\"font-semibold text-sm text-gray-700 dark:text-gray-300 mb-3\">\r\n        {title}\r\n      </h3>\r\n      <div className=\"space-y-2\">\r\n        {enabledShortcuts.map((shortcut, index) => (\r\n          <div key={index} className=\"flex justify-between items-center text-xs\">\r\n            <span className=\"text-gray-600 dark:text-gray-400\">\r\n              {shortcut.description}\r\n            </span>\r\n            <kbd className=\"px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-800 dark:text-gray-200 font-mono\">\r\n              {formatKey(shortcut)}\r\n            </kbd>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Study-specific shortcuts help component\r\n */\r\nexport const StudyShortcutsHelp: React.FC<{ \r\n  showAnswer: boolean\r\n  className?: string\r\n  compact?: boolean\r\n}> = ({ \r\n  showAnswer, \r\n  className = '',\r\n  compact = false\r\n}) => {\r\n  const shortcuts: KeyboardShortcut[] = [\r\n    // Always available\r\n    {\r\n      key: 'escape',\r\n      description: 'Exit study',\r\n      action: () => {},\r\n      disabled: false\r\n    },\r\n    \r\n    // Card flipping (when answer hidden)\r\n    {\r\n      key: ' ',\r\n      description: 'Show answer',\r\n      action: () => {},\r\n      disabled: showAnswer\r\n    },\r\n    \r\n    // Answer shortcuts (when answer shown)\r\n    {\r\n      key: '1',\r\n      description: 'Again',\r\n      action: () => {},\r\n      disabled: !showAnswer\r\n    },\r\n    {\r\n      key: '2',\r\n      description: 'Hard',\r\n      action: () => {},\r\n      disabled: !showAnswer\r\n    },\r\n    {\r\n      key: '3',\r\n      description: 'Good',\r\n      action: () => {},\r\n      disabled: !showAnswer\r\n    },\r\n    {\r\n      key: '4',\r\n      description: 'Easy',\r\n      action: () => {},\r\n      disabled: !showAnswer\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <KeyboardShortcutsHelp \r\n      shortcuts={shortcuts}\r\n      className={className}\r\n      title=\"Study Shortcuts\"\r\n      compact={compact}\r\n    />\r\n  )\r\n}\r\n\r\nexport default KeyboardShortcutsHelp","import { Card, ReviewCardType } from '../../../shared/types'\r\n\r\n/**\r\n * Local utility functions for card state management\r\n * This avoids build issues with importing CardStateUtils from shared types\r\n */\r\n\r\n/**\r\n * Determine if a review card is young (interval < 21 days) or mature (interval >= 21 days)\r\n */\r\nexport function getReviewCardType(card: Card): ReviewCardType {\r\n  if (card.state !== 'review') {\r\n    throw new Error('Card must be in review state to determine maturity')\r\n  }\r\n  return card.ivl < 21 ? 'young' : 'mature'\r\n}\r\n\r\n/**\r\n * Get human-readable card state description\r\n */\r\nexport function getCardStateDescription(card: Card): string {\r\n  switch (card.state) {\r\n    case 'new':\r\n      return 'New - Never studied before'\r\n    case 'learning':\r\n      return 'Learning - Recently seen, still being learned'\r\n    case 'review': {\r\n      const maturity = card.ivl < 21 ? 'Young' : 'Mature'\r\n      return `Review (${maturity}) - Finished learning, scheduled for review`\r\n    }\r\n    case 'relearning':\r\n      return 'Relearning - Failed in review, being relearned'\r\n    case 'suspended':\r\n      return 'Suspended - Manually suspended from study'\r\n    case 'buried':\r\n      return 'Buried - Hidden until next day'\r\n    default:\r\n      return 'Unknown state'\r\n  }\r\n}\r\n\r\n/**\r\n * Get card state color for UI display\r\n */\r\nexport function getCardStateColor(card: Card): string {\r\n  switch (card.state) {\r\n    case 'new':\r\n      return '#3b82f6' // Blue\r\n    case 'learning':\r\n      return '#f59e0b' // Amber\r\n    case 'review':\r\n      return card.ivl < 21 ? '#10b981' : '#059669' // Green (lighter for young, darker for mature)\r\n    case 'relearning':\r\n      return '#ef4444' // Red\r\n    case 'suspended':\r\n      return '#6b7280' // Gray\r\n    case 'buried':\r\n      return '#9ca3af' // Light gray\r\n    default:\r\n      return '#374151' // Dark gray\r\n  }\r\n}\r\n\r\n/**\r\n * Check if a card is due for study\r\n */\r\nexport function isCardDue(card: Card, currentDate: Date = new Date()): boolean {\r\n  const currentDay = Math.floor(currentDate.getTime() / (24 * 60 * 60 * 1000))\r\n  \r\n  switch (card.state) {\r\n    case 'new':\r\n      return true // New cards are always available (subject to daily limits)\r\n    case 'learning':\r\n    case 'relearning': {\r\n      // Learning cards use minutes, check if due time has passed\r\n      const dueTime = currentDate.getTime() + (card.left * 60 * 1000)\r\n      return dueTime <= currentDate.getTime()\r\n    }\r\n    case 'review':\r\n      return card.due <= currentDay\r\n    case 'suspended':\r\n    case 'buried':\r\n      return false // These cards are not available for study\r\n    default:\r\n      return false\r\n  }\r\n}\r\n\r\n/**\r\n * Get the next review date for a card\r\n */\r\nexport function getNextReviewDate(card: Card): Date | null {\r\n  switch (card.state) {\r\n    case 'new':\r\n      return null // New cards don't have a scheduled review\r\n    case 'learning':\r\n    case 'relearning':\r\n      // Learning cards are due in 'left' minutes\r\n      return new Date(Date.now() + card.left * 60 * 1000)\r\n    case 'review':\r\n      // Review cards use days since epoch\r\n      return new Date(card.due * 24 * 60 * 60 * 1000)\r\n    case 'suspended':\r\n    case 'buried':\r\n      return null // These cards have no scheduled review\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\n/**\r\n * Calculate days overdue for a review card\r\n */\r\nexport function getDaysOverdue(card: Card, currentDate: Date = new Date()): number {\r\n  if (card.state !== 'review') {\r\n    return 0\r\n  }\r\n  \r\n  const currentDay = Math.floor(currentDate.getTime() / (24 * 60 * 60 * 1000))\r\n  return Math.max(0, currentDay - card.due)\r\n}\r\n\r\n/**\r\n * Get study priority for card ordering\r\n */\r\nexport function getStudyPriority(card: Card): number {\r\n  switch (card.state) {\r\n    case 'learning':\r\n    case 'relearning':\r\n      return 1 // Highest priority\r\n    case 'review':\r\n      return 2 // Medium priority\r\n    case 'new':\r\n      return 3 // Lower priority\r\n    case 'suspended':\r\n    case 'buried':\r\n      return 999 // Should not be studied\r\n    default:\r\n      return 999\r\n  }\r\n}","import React from 'react'\r\nimport { Card } from '../../../../shared/types'\r\nimport {\r\n  getCardStateDescription,\r\n  getCardStateColor,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  getReviewCardType,\r\n  getNextReviewDate,\r\n  getDaysOverdue\r\n} from '../../utils/cardStateUtils'\r\n\r\ninterface CardStateIndicatorProps {\r\n  card: Card\r\n  className?: string\r\n  showDescription?: boolean\r\n  compact?: boolean\r\n}\r\n\r\nexport const CardStateIndicator: React.FC<CardStateIndicatorProps> = ({\r\n  card,\r\n  className = '',\r\n  showDescription = false,\r\n  compact = false\r\n}) => {\r\n  const stateColor = getCardStateColor(card)\r\n  const description = getCardStateDescription(card)\r\n  const nextReview = getNextReviewDate(card)\r\n  const daysOverdue = getDaysOverdue(card)\r\n\r\n  const getStateIcon = () => {\r\n    switch (card.state) {\r\n      case 'new':\r\n        return '✨'\r\n      case 'learning':\r\n        return '📚'\r\n      case 'review':\r\n        return card.ivl < 21 ? '🌱' : '🌳'\r\n      case 'relearning':\r\n        return '🔄'\r\n      case 'suspended':\r\n        return '⏸️'\r\n      case 'buried':\r\n        return '📦'\r\n      default:\r\n        return '❓'\r\n    }\r\n  }\r\n\r\n  const getStateLabel = () => {\r\n    switch (card.state) {\r\n      case 'new':\r\n        return 'New'\r\n      case 'learning':\r\n        return 'Learning'\r\n      case 'review':\r\n        return card.ivl < 21 ? 'Young' : 'Mature'\r\n      case 'relearning':\r\n        return 'Relearning'\r\n      case 'suspended':\r\n        return 'Suspended'\r\n      case 'buried':\r\n        return 'Buried'\r\n      default:\r\n        return 'Unknown'\r\n    }\r\n  }\r\n\r\n  const getAdditionalInfo = () => {\r\n    switch (card.state) {\r\n      case 'learning':\r\n      case 'relearning':\r\n        return `Step ${card.learningStep + 1}, ${card.left}min left`\r\n      case 'review':\r\n        if (daysOverdue > 0) {\r\n          return `${daysOverdue} days overdue`\r\n        }\r\n        return `Interval: ${card.ivl} days`\r\n      case 'new':\r\n        return 'Never studied'\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  if (compact) {\r\n    return (\r\n      <div \r\n        className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${className}`}\r\n        style={{ \r\n          backgroundColor: `${stateColor}20`,\r\n          color: stateColor,\r\n          border: `1px solid ${stateColor}40`\r\n        }}\r\n      >\r\n        <span>{getStateIcon()}</span>\r\n        <span>{getStateLabel()}</span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white rounded-lg border shadow-sm p-3 ${className}`}>\r\n      <div className=\"flex items-center gap-2 mb-2\">\r\n        <div \r\n          className=\"w-3 h-3 rounded-full\"\r\n          style={{ backgroundColor: stateColor }}\r\n        />\r\n        <div className=\"flex items-center gap-2\">\r\n          <span className=\"text-lg\">{getStateIcon()}</span>\r\n          <span className=\"font-medium text-gray-900\">{getStateLabel()}</span>\r\n        </div>\r\n      </div>\r\n\r\n      {showDescription && (\r\n        <p className=\"text-sm text-gray-600 mb-2\">{description}</p>\r\n      )}\r\n\r\n      <div className=\"space-y-1 text-xs text-gray-500\">\r\n        {getAdditionalInfo() && (\r\n          <div>{getAdditionalInfo()}</div>\r\n        )}\r\n        \r\n        {card.state === 'review' && (\r\n          <div className=\"flex justify-between\">\r\n            <span>Ease: {(card.factor / 10).toFixed(0)}%</span>\r\n            <span>Reviews: {card.reps}</span>\r\n          </div>\r\n        )}\r\n        \r\n        {card.lapses > 0 && (\r\n          <div className=\"text-red-500\">Lapses: {card.lapses}</div>\r\n        )}\r\n        \r\n        {nextReview && card.state !== 'learning' && card.state !== 'relearning' && (\r\n          <div>Next: {nextReview.toLocaleDateString()}</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardStateIndicator","// Test function for systematic verification of stats logic\r\nexport const testStatsLogic = () => {\r\n  console.log('\\n🧪 TESTING STATS LOGIC - 10 CARD SIMULATION')\r\n  console.log('Pattern: Again, Hard, Again, Hard, etc.')\r\n  \r\n  let testStats = { total: 10, correct: 0, incorrect: 0 }\r\n  const pattern = ['again', 'hard']\r\n  \r\n  for (let i = 0; i < 10; i++) {\r\n    const difficulty = pattern[i % 2] as 'again' | 'hard'\r\n    const cardNum = i + 1\r\n    \r\n    console.log(`\\n--- Card ${cardNum} ---`)\r\n    console.log(`Answer: ${difficulty}`)\r\n    console.log(`Stats before:`, testStats)\r\n    \r\n    // Apply the same logic as in handleAnswer\r\n    const newStats = difficulty === 'again' \r\n      ? { ...testStats, incorrect: testStats.incorrect + 1 }\r\n      : { ...testStats, correct: testStats.correct + 1 }\r\n    \r\n    testStats = newStats\r\n    console.log(`Stats after:`, testStats)\r\n    \r\n    // Verify expected values - 'again' = incorrect, 'hard' = correct\r\n    const expectedIncorrect = Math.floor((cardNum + 1) / 2)\r\n    const expectedCorrect = Math.floor(cardNum / 2)\r\n    \r\n    const correctMatch = testStats.correct === expectedCorrect\r\n    const incorrectMatch = testStats.incorrect === expectedIncorrect\r\n    \r\n    console.log(`Expected: correct=${expectedCorrect}, incorrect=${expectedIncorrect}`)\r\n    console.log(`✅ Correct count: ${correctMatch ? 'PASS' : 'FAIL'}`)\r\n    console.log(`✅ Incorrect count: ${incorrectMatch ? 'PASS' : 'FAIL'}`)\r\n    \r\n    if (!correctMatch || !incorrectMatch) {\r\n      console.error(`❌ TEST FAILED at card ${cardNum}`)\r\n      return false\r\n    }\r\n  }\r\n  \r\n  console.log('\\n🎉 ALL TESTS PASSED!')\r\n  console.log(`Final stats: correct=${testStats.correct}, incorrect=${testStats.incorrect}`)\r\n  return true\r\n}\r\n\r\n// Run the test immediately when this module is loaded\r\nconsole.log('Running stats logic test...')\r\ntestStatsLogic()\r\n\r\n// Make test function available globally for console testing\r\nif (typeof window !== 'undefined') {\r\n  (window as Window & typeof globalThis & { testStatsLogic: typeof testStatsLogic }).testStatsLogic = testStatsLogic\r\n}","import { useState, useEffect, useMemo } from 'react'\nimport { flushSync } from 'react-dom'\nimport { useParams, useNavigate } from 'react-router-dom'\nimport { useDeckStore, useCurrentCard } from '../stores/deckStore'\nimport { useGamificationStore } from '../stores/gamificationStore'\nimport { EnhancedCard, ResponseLog } from '../types/enhancedTypes'\nimport { FSRS } from '../services/fsrsEngine'\nimport CardRenderer from '../components/study/CardRenderer'\nimport { useStudyKeyboardShortcuts } from '../hooks/useKeyboardShortcuts'\nimport { StudyShortcutsHelp } from '../components/study/KeyboardShortcutsHelp'\nimport { CardStateIndicator } from '../components/study/CardStateIndicator'\nimport '../utils/testStatsLogic'\n\nconst StudyPage = () => {\n  const { deckId } = useParams<{ deckId: string }>()\n  const navigate = useNavigate()\n  const {\n    getDeck,\n    getCards,\n    updateCard,\n    decks,\n    cards,\n    startStudySession,\n    updateStudySession,\n    clearStudySession,\n    currentStudySession,\n    getStudySession\n  } = useDeckStore()\n  \n  const { awardStudyXP } = useGamificationStore()\n  \n  // UI-specific state\n  const [showAnswer, setShowAnswer] = useState(false)\n  const [sessionComplete, setSessionComplete] = useState(false)\n  const [xpEarned, setXpEarned] = useState(0)\n  const [sessionInitialized, setSessionInitialized] = useState(false)\n  const [showShortcutsHelp, setShowShortcutsHelp] = useState(false)\n  const [currentCardIndex, setCurrentCardIndex] = useState(0)\n  const [stats, setStats] = useState({ total: 0, correct: 0, incorrect: 0 })\n\n  // Get the cards for the current study session\n  const studyCards = currentStudySession?.studyCards || []\n\n  const deck = deckId ? getDeck(deckId) : null\n\n  // Sync local stats with session stats from the store\n  useEffect(() => {\n    if (currentStudySession?.sessionStats) {\n      setStats(currentStudySession.sessionStats)\n    }\n  }, [currentStudySession?.sessionStats])\n\n  // Effect to initialize the study session\n  useEffect(() => {\n    if (deckId && !sessionInitialized) {\n      // If there is no active session for this deck, start a new one.\n      if (!currentStudySession || currentStudySession.deckId !== deckId) {\n        const allCards = getCards(deckId)\n        if (allCards.length > 0) {\n          console.log('Starting a new study session...');\n          const dueCards = allCards.filter(card => {\n            if (card.reviewCount === 0) return true // New cards\n            return new Date(card.nextReview) <= new Date() // Due cards\n          })\n          const MAX_CARDS_PER_SESSION = 20\n          const cardsToStudy = (dueCards.length > 0 ? dueCards : allCards).slice(0, MAX_CARDS_PER_SESSION)\n          startStudySession(deckId, cardsToStudy)\n        }\n      } else {\n        console.log('Restoring existing study session...');\n      }\n      setSessionInitialized(true)\n    }\n  }, [deckId, getCards, startStudySession, currentStudySession, sessionInitialized])\n\n  // Get the current card using the new on-demand selector\n  const currentCard = useCurrentCard()\n\n  // Memoize session stats to prevent re-renders\n  const sessionStats = useMemo(() => currentStudySession?.sessionStats, [currentStudySession])\n\n  // Keyboard shortcuts integration\n  useStudyKeyboardShortcuts({\n    onFlipCard: () => {\n      if (!showAnswer && currentCard) {\n        setShowAnswer(true)\n        console.log('[Keyboard] Flipped card to show answer')\n      }\n    },\n    onAnswerAgain: () => {\n      if (showAnswer && currentCard) {\n        console.log('[Keyboard] Answered: Again')\n        handleAnswer('again')\n      }\n    },\n    onAnswerHard: () => {\n      if (showAnswer && currentCard) {\n        console.log('[Keyboard] Answered: Hard')\n        handleAnswer('hard')\n      }\n    },\n    onAnswerGood: () => {\n      if (showAnswer && currentCard) {\n        console.log('[Keyboard] Answered: Good')\n        handleAnswer('good')\n      }\n    },\n    onAnswerEasy: () => {\n      if (showAnswer && currentCard) {\n        console.log('[Keyboard] Answered: Easy')\n        handleAnswer('easy')\n      }\n    },\n    onExitStudy: () => {\n      console.log('[Keyboard] Exiting study session')\n      goBackToDecks()\n    },\n    showAnswer,\n    enabled: !sessionComplete && currentCard !== undefined,\n    debugMode: true\n  })\n\n  const handleAnswer = async (difficulty: 'easy' | 'good' | 'hard' | 'again') => {\n    if (!currentCard) return\n\n    console.log(`\\n=== CARD ${currentCardIndex + 1} ANSWER ===`)\n    console.log(`Difficulty: ${difficulty}`)\n    console.log(`Current stats BEFORE update:`, stats)\n\n    // Calculate the new stats immediately\n    // In spaced repetition: \"again\" = incorrect, \"hard\"/\"good\"/\"easy\" = correct\n    const isIncorrect = difficulty === 'again'\n    const newStats = isIncorrect\n      ? { ...stats, incorrect: stats.incorrect + 1 }\n      : { ...stats, correct: stats.correct + 1 }\n\n    console.log(`Answer \"${difficulty}\" is ${isIncorrect ? 'INCORRECT' : 'CORRECT'}`)\n    console.log(`Calculated new stats:`, newStats)\n    console.log(`Expected: correct=${newStats.correct}, incorrect=${newStats.incorrect}`)\n\n    // Force immediate state updates using flushSync to prevent batching issues\n    flushSync(() => {\n      // Update stats first to ensure they're displayed correctly\n      setStats(newStats)\n      console.log(`Stats updated to:`, newStats)\n    })\n\n    // Then handle card navigation for fast transitions\n    const isLastCard = currentCardIndex >= studyCards.length - 1\n    const nextCardIndex = currentCardIndex + 1\n    \n    if (!isLastCard) {\n      flushSync(() => {\n        // Fast UI updates - no blocking operations\n        setCurrentCardIndex(nextCardIndex)\n        setShowAnswer(false)\n        console.log(`Card index: ${currentCardIndex} -> ${nextCardIndex}`)\n      })\n    }\n\n    // Async operations that don't block UI\n    const processCardUpdate = async () => {\n      // Update card based on spaced repetition algorithm\n      const now = new Date()\n      let newInterval = currentCard.intervalDays\n      let newEaseFactor = currentCard.easeFactor\n      const newReviewCount = currentCard.reviewCount + 1\n\n      // Simple SM-2 algorithm implementation\n      switch (difficulty) {\n        case 'again':\n          newInterval = 1\n          newEaseFactor = Math.max(1.3, currentCard.easeFactor - 0.2)\n          break\n        case 'hard':\n          // For new cards (intervalDays = 0), start with 1 day\n          if (currentCard.intervalDays === 0) {\n            newInterval = 1\n          } else {\n            newInterval = Math.max(1, Math.round(currentCard.intervalDays * 1.2))\n          }\n          newEaseFactor = Math.max(1.3, currentCard.easeFactor - 0.15)\n          break\n        case 'good':\n          // For new cards (intervalDays = 0), start with 1 day, then apply ease factor\n          if (currentCard.intervalDays === 0) {\n            newInterval = 1\n          } else {\n            newInterval = Math.round(currentCard.intervalDays * currentCard.easeFactor)\n          }\n          break\n        case 'easy':\n          // For new cards (intervalDays = 0), start with 4 days (easy boost)\n          if (currentCard.intervalDays === 0) {\n            newInterval = 4\n          } else {\n            newInterval = Math.round(currentCard.intervalDays * currentCard.easeFactor * 1.3)\n          }\n          newEaseFactor = currentCard.easeFactor + 0.15\n          break\n      }\n\n      // Calculate next review date\n      const nextReview = new Date(now.getTime() + newInterval * 24 * 60 * 60 * 1000)\n\n      // Update the card (async, non-blocking)\n      await updateCard(currentCard.id, {\n        intervalDays: newInterval,\n        easeFactor: newEaseFactor,\n        reviewCount: newReviewCount,\n        nextReview: nextReview.toISOString()\n      })\n\n      // Update session in store (async, non-blocking)\n      if (deckId && !isLastCard) {\n        console.log(`Store update - Stats being sent to store:`, newStats)\n        console.log(`Store update - Card index being sent:`, nextCardIndex)\n        updateStudySession(nextCardIndex, newStats)\n      }\n    }\n\n    // Handle session completion\n    if (isLastCard) {\n      setSessionComplete(true)\n      \n      // Award XP for completing the study session\n      const totalCardsStudied = stats.correct + stats.incorrect + 1 // +1 for current card\n      const correctAnswers = newStats.correct\n      \n      // Calculate XP earned (same formula as in gamificationStore)\n      const baseXP = totalCardsStudied // 1 XP per card studied\n      const bonusXP = correctAnswers // 1 XP per correct answer\n      const milestoneBonus = Math.floor(correctAnswers / 10) * 10 // 10 XP per 10 correct answers\n      const totalXPEarned = baseXP + bonusXP + milestoneBonus\n      \n      console.log(`🎓 Study session completed! Awarding XP for ${totalCardsStudied} cards studied, ${correctAnswers} correct answers`)\n      console.log(`🎉 XP Breakdown: ${baseXP} base + ${bonusXP} bonus + ${milestoneBonus} milestone = ${totalXPEarned} total`)\n      \n      setXpEarned(totalXPEarned)\n      awardStudyXP(totalCardsStudied, correctAnswers)\n    }\n\n    // Process card update asynchronously without blocking UI\n    processCardUpdate().catch(error => {\n      console.error('Error processing card update:', error)\n    })\n  }\n\n  const resetSession = () => {\n    setCurrentCardIndex(0)\n    setShowAnswer(false)\n    setSessionComplete(false)\n    setStats({ total: studyCards.length, correct: 0, incorrect: 0 })\n    setXpEarned(0)\n    \n    // Clear existing session and start fresh\n    if (deckId) {\n      clearStudySession()\n      if (studyCards.length > 0) {\n        startStudySession(deckId, studyCards)\n      }\n    }\n  }\n\n  const goBackToDecks = () => {\n    // Don't clear session when exiting study - preserve it for resuming later\n    navigate('/decks')\n  }\n\n  const clearSessionAndGoBack = () => {\n    // Clear session when user explicitly wants to start fresh next time\n    if (deckId) {\n      clearStudySession()\n    }\n    navigate('/decks')\n  }\n\n  // If no deckId is provided, find the deck with the earliest review date\n  useEffect(() => {\n    if (!deckId && decks.length > 0) {\n      // Find the deck with cards that have the earliest review date\n      let earliestDeck = null\n      let earliestDate = new Date('2099-12-31') // Far future date as default\n      \n      for (const deck of decks) {\n        const deckCards = cards[deck.id] || []\n        if (deckCards.length === 0) continue\n        \n        // Find cards that are due for review or new cards\n        const dueCards = deckCards.filter(card => {\n          if (card.reviewCount === 0) return true // New cards\n          return new Date(card.nextReview) <= new Date() // Due cards\n        })\n        \n        if (dueCards.length > 0) {\n          // Find the earliest review date in this deck\n          const deckEarliestDate = dueCards.reduce((earliest, card) => {\n            const cardDate = card.reviewCount === 0 ? new Date(card.createdAt) : new Date(card.nextReview)\n            return cardDate < earliest ? cardDate : earliest\n          }, new Date('2099-12-31'))\n          \n          if (deckEarliestDate < earliestDate) {\n            earliestDate = deckEarliestDate\n            earliestDeck = deck\n          }\n        }\n      }\n      \n      if (earliestDeck) {\n        // Redirect to the deck with the earliest review date\n        navigate(`/study/${earliestDeck.id}`, { replace: true })\n        return\n      }\n    }\n  }, [deckId, decks, cards, navigate])\n\n  // If no deckId is provided and we're still here, show loading or no decks message\n  if (!deckId) {\n    if (decks.length === 0) {\n      return (\n        <div className=\"max-w-4xl mx-auto text-center py-12\">\n          <div className=\"text-6xl mb-4\">📚</div>\n          <h1 className=\"text-2xl font-bold mb-4\">No Decks Available</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n            You don't have any decks to study yet. Create your first deck to get started!\n          </p>\n          <button onClick={goBackToDecks} className=\"btn btn-primary\">\n            Go to My Decks\n          </button>\n        </div>\n      )\n    }\n    \n    // Show loading while finding the best deck\n    return (\n      <div className=\"max-w-4xl mx-auto text-center py-12\">\n        <div className=\"text-6xl mb-4\">🔍</div>\n        <h1 className=\"text-2xl font-bold mb-4\">Finding Your Next Study Session</h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n          Looking for the deck with the most urgent cards to review...\n        </p>\n      </div>\n    )\n  }\n\n  if (!deck || !studyCards) {\n    return (\n      <div className=\"max-w-4xl mx-auto text-center py-12\">\n        <div className=\"text-6xl mb-4\">❌</div>\n        <h1 className=\"text-2xl font-bold mb-4\">Deck Not Found</h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n          The deck you're trying to study doesn't exist.\n        </p>\n        <button onClick={goBackToDecks} className=\"btn btn-primary\">\n          Back to Decks\n        </button>\n      </div>\n    )\n  }\n\n  if (studyCards.length === 0) {\n    return (\n      <div className=\"max-w-4xl mx-auto text-center py-12\">\n        <div className=\"text-6xl mb-4\">📚</div>\n        <h1 className=\"text-2xl font-bold mb-4\">No Cards to Study</h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n          This deck doesn't have any cards to study right now.\n        </p>\n        <button onClick={goBackToDecks} className=\"btn btn-primary\">\n          Back to Decks\n        </button>\n      </div>\n    )\n  }\n\n  if (sessionComplete) {\n    const totalAnswered = stats.correct + stats.incorrect\n    const accuracy = totalAnswered > 0 ? Math.round((stats.correct / totalAnswered) * 100) : 0\n    \n    return (\n      <div className=\"max-w-4xl mx-auto text-center py-12\">\n        <div className=\"text-6xl mb-4\">🎉</div>\n        <h1 className=\"text-3xl font-bold mb-4\">Session Complete!</h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-8\">\n          Great job studying <strong>{deck.title}</strong>\n        </p>\n        \n        <div className=\"card p-6 mb-8 max-w-md mx-auto\">\n          <h2 className=\"text-xl font-semibold mb-4\">Session Stats</h2>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span>Cards Studied:</span>\n              <span className=\"font-medium\">{totalAnswered}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Correct:</span>\n              <span className=\"font-medium text-green-600\">{stats.correct}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Incorrect:</span>\n              <span className=\"font-medium text-red-600\">{stats.incorrect}</span>\n            </div>\n            <div className=\"flex justify-between border-t pt-2\">\n              <span>Accuracy:</span>\n              <span className=\"font-medium\">{accuracy}%</span>\n            </div>\n            {xpEarned > 0 && (\n              <div className=\"flex justify-between border-t pt-2 bg-yellow-50 dark:bg-yellow-900/20 -mx-2 px-2 py-2 rounded\">\n                <span className=\"flex items-center gap-1\">\n                  <span>🎉</span>\n                  <span className=\"font-medium\">XP Earned:</span>\n                </span>\n                <span className=\"font-bold text-yellow-600 dark:text-yellow-400\">+{xpEarned} XP</span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex flex-col gap-4 items-center\">\n          <div className=\"flex gap-4 justify-center\">\n            <button onClick={resetSession} className=\"btn btn-primary\">\n              Study Again\n            </button>\n            <button onClick={goBackToDecks} className=\"btn btn-secondary\">\n              Back to Decks\n            </button>\n          </div>\n          <button\n            onClick={clearSessionAndGoBack}\n            className=\"btn btn-outline btn-sm text-gray-500 hover:text-gray-700\"\n          >\n            Clear Progress & Start Fresh Next Time\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">{deck.title}</h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-2\">\n          Card {currentCardIndex + 1} of {studyCards.length}\n        </p>\n        \n        {/* Card State Indicator */}\n        {currentCard && (\n          <div className=\"flex justify-center mb-4\">\n            <CardStateIndicator\n              card={currentCard}\n              compact={true}\n              className=\"shadow-sm\"\n            />\n          </div>\n        )}\n        \n        {deckId && getStudySession(deckId) && currentCardIndex > 0 && (\n          <p className=\"text-sm text-blue-600 dark:text-blue-400 mb-4 flex items-center justify-center gap-2\">\n            <span>📍</span>\n            Resumed from where you left off\n          </p>\n        )}\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n          <div\n            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${((currentCardIndex + 1) / studyCards.length) * 100}%` }}\n          ></div>\n        </div>\n      </div>\n\n      {/* Flashcard */}\n      <div className=\"card p-8 mb-8 min-h-[300px] flex flex-col justify-center\">\n        {currentCard ? (\n          <>\n            <CardRenderer\n              card={currentCard}\n              showAnswer={showAnswer}\n            />\n\n            {!showAnswer ? (\n              <div className=\"text-center mt-6\">\n                <button\n                  onClick={() => setShowAnswer(true)}\n                  className=\"btn btn-primary btn-lg\"\n                >\n                  Show Answer\n                  <span className=\"ml-2 text-xs opacity-75\">(Space/Enter)</span>\n                </button>\n              </div>\n            ) : (\n              <div className=\"space-y-4 mt-6\">\n                <p className=\"text-gray-600 dark:text-gray-400 mb-6 text-center\">\n                  How well did you know this?\n                </p>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  <button\n                    onClick={() => handleAnswer('again')}\n                    className=\"btn bg-red-500 hover:bg-red-600 text-white py-3\"\n                  >\n                    <div className=\"text-sm font-medium\">Again</div>\n                    <div className=\"text-xs opacity-80\">&lt; 1 day</div>\n                    <div className=\"text-xs opacity-60 mt-1\">1 or A</div>\n                  </button>\n                  <button\n                    onClick={() => handleAnswer('hard')}\n                    className=\"btn bg-orange-500 hover:bg-orange-600 text-white py-3\"\n                  >\n                    <div className=\"text-sm font-medium\">Hard</div>\n                    <div className=\"text-xs opacity-80\">1-3 days</div>\n                    <div className=\"text-xs opacity-60 mt-1\">2 or H</div>\n                  </button>\n                  <button\n                    onClick={() => handleAnswer('good')}\n                    className=\"btn bg-green-500 hover:bg-green-600 text-white py-3\"\n                  >\n                    <div className=\"text-sm font-medium\">Good</div>\n                    <div className=\"text-xs opacity-80\">3-7 days</div>\n                    <div className=\"text-xs opacity-60 mt-1\">3 or G</div>\n                  </button>\n                  <button\n                    onClick={() => handleAnswer('easy')}\n                    className=\"btn bg-blue-500 hover:bg-blue-600 text-white py-3\"\n                  >\n                    <div className=\"text-sm font-medium\">Easy</div>\n                    <div className=\"text-xs opacity-80\">1+ weeks</div>\n                    <div className=\"text-xs opacity-60 mt-1\">4 or E</div>\n                  </button>\n                </div>\n              </div>\n            )}\n          </>\n        ) : (\n          <div className=\"text-center\">\n            <p className=\"text-gray-500\">Loading card...</p>\n          </div>\n        )}\n      </div>\n\n      {/* Keyboard Shortcuts Help */}\n      <StudyShortcutsHelp\n        showAnswer={showAnswer}\n        compact={true}\n        className=\"mb-4\"\n      />\n\n      {/* Session Stats */}\n      <div className=\"flex justify-between items-center text-sm text-gray-600 dark:text-gray-400\">\n        <div>\n          Correct: <span className=\"text-green-600 font-medium\">{stats.correct}</span> |\n          Incorrect: <span className=\"text-red-600 font-medium\">{stats.incorrect}</span>\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setShowShortcutsHelp(!showShortcutsHelp)}\n            className=\"btn btn-outline btn-sm\"\n            title=\"Toggle keyboard shortcuts help\"\n          >\n            ⌨️\n          </button>\n          <button\n            onClick={goBackToDecks}\n            className=\"btn btn-secondary btn-sm\"\n          >\n            Exit Study\n          </button>\n        </div>\n      </div>\n\n      {/* Detailed Shortcuts Help Modal */}\n      {showShortcutsHelp && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold\">Keyboard Shortcuts</h3>\n              <button\n                onClick={() => setShowShortcutsHelp(false)}\n                className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n              >\n                ✕\n              </button>\n            </div>\n            <StudyShortcutsHelp\n              showAnswer={showAnswer}\n              compact={false}\n            />\n            <div className=\"mt-4 text-xs text-gray-500 dark:text-gray-400\">\n              <p>💡 <strong>Tip:</strong> Use Space or Enter to flip cards, then 1-4 or A/H/G/E to answer!</p>\n              <p>Press Esc or Q to exit the study session anytime.</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default StudyPage","import { useState } from 'react'\r\nimport { useDeckStore } from '../../stores/deckStore'\r\nimport { Card } from '../../../../shared/types'\r\nimport { createNewCard } from '../../utils/cardDefaults'\r\n\r\ninterface CardManagerProps {\r\n  deckId: string\r\n  onClose: () => void\r\n}\r\n\r\nconst CardManager = ({ deckId, onClose }: CardManagerProps) => {\r\n  const { getCards, addCard, updateCard, deleteCard, getDeck } = useDeckStore()\r\n  const [showAddCard, setShowAddCard] = useState(false)\r\n  const [editingCard, setEditingCard] = useState<Card | null>(null)\r\n  const [frontContent, setFrontContent] = useState('')\r\n  const [backContent, setBackContent] = useState('')\r\n\r\n  const deck = getDeck(deckId)\r\n  const cards = getCards(deckId)\r\n\r\n  const handleAddCard = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    if (!frontContent.trim() || !backContent.trim()) return\r\n\r\n    try {\r\n      await addCard(deckId, createNewCard(\r\n        frontContent.trim(),\r\n        backContent.trim(),\r\n        { type: 'basic' },\r\n        []\r\n      ))\r\n      setFrontContent('')\r\n      setBackContent('')\r\n      setShowAddCard(false)\r\n    } catch (error) {\r\n      console.error('Failed to add card:', error)\r\n    }\r\n  }\r\n\r\n  const handleEditCard = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    if (!editingCard || !frontContent.trim() || !backContent.trim()) return\r\n\r\n    try {\r\n      await updateCard(editingCard.id, {\r\n        frontContent: frontContent.trim(),\r\n        backContent: backContent.trim()\r\n      })\r\n      setEditingCard(null)\r\n      setFrontContent('')\r\n      setBackContent('')\r\n    } catch (error) {\r\n      console.error('Failed to update card:', error)\r\n    }\r\n  }\r\n\r\n  const handleDeleteCard = async (cardId: string) => {\r\n    if (confirm('Are you sure you want to delete this card?')) {\r\n      try {\r\n        await deleteCard(cardId)\r\n      } catch (error) {\r\n        console.error('Failed to delete card:', error)\r\n      }\r\n    }\r\n  }\r\n\r\n  const startEdit = (card: Card) => {\r\n    setEditingCard(card)\r\n    setFrontContent(card.frontContent)\r\n    setBackContent(card.backContent)\r\n    setShowAddCard(false)\r\n  }\r\n\r\n  const cancelEdit = () => {\r\n    setEditingCard(null)\r\n    setFrontContent('')\r\n    setBackContent('')\r\n    setShowAddCard(false)\r\n  }\r\n\r\n  if (!deck) {\r\n    return (\r\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\r\n          <p className=\"text-red-600\">Deck not found</p>\r\n          <button onClick={onClose} className=\"btn btn-secondary mt-4\">Close</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg w-full max-w-4xl max-h-[90vh] flex flex-col\">\r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <div>\r\n            <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{deck.title}</h2>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">{cards.length} cards</p>\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <button\r\n              onClick={() => setShowAddCard(true)}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\r\n              </svg>\r\n              Add Card\r\n            </button>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"btn btn-secondary\"\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Add/Edit Card Form */}\r\n        {(showAddCard || editingCard) && (\r\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700\">\r\n            <h3 className=\"text-lg font-medium mb-4 text-gray-900 dark:text-white\">\r\n              {editingCard ? 'Edit Card' : 'Add New Card'}\r\n            </h3>\r\n            <form onSubmit={editingCard ? handleEditCard : handleAddCard} className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                    Front\r\n                  </label>\r\n                  <textarea\r\n                    value={frontContent}\r\n                    onChange={(e) => setFrontContent(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white\"\r\n                    rows={3}\r\n                    placeholder=\"Enter the question or front side...\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                    Back\r\n                  </label>\r\n                  <textarea\r\n                    value={backContent}\r\n                    onChange={(e) => setBackContent(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white\"\r\n                    rows={3}\r\n                    placeholder=\"Enter the answer or back side...\"\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary\"\r\n                >\r\n                  {editingCard ? 'Update Card' : 'Add Card'}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={cancelEdit}\r\n                  className=\"btn btn-secondary\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        )}\r\n\r\n        {/* Cards List */}\r\n        <div className=\"flex-1 overflow-y-auto p-6\">\r\n          {cards.length === 0 ? (\r\n            <div className=\"text-center py-12\">\r\n              <div className=\"text-4xl mb-4\">📝</div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No cards yet</h3>\r\n              <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n                Add your first card to start studying\r\n              </p>\r\n              <button\r\n                onClick={() => setShowAddCard(true)}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Add First Card\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              {cards.map((card, index) => (\r\n                <div\r\n                  key={card.id}\r\n                  className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow\"\r\n                >\r\n                  <div className=\"flex justify-between items-start mb-3\">\r\n                    <span className=\"text-sm text-gray-500 dark:text-gray-400\">Card #{index + 1}</span>\r\n                    <div className=\"flex gap-1\">\r\n                      <button\r\n                        onClick={() => startEdit(card)}\r\n                        className=\"p-1 text-gray-400 hover:text-blue-500 transition-colors\"\r\n                        title=\"Edit card\"\r\n                      >\r\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                        </svg>\r\n                      </button>\r\n                      <button\r\n                        onClick={() => handleDeleteCard(card.id)}\r\n                        className=\"p-1 text-gray-400 hover:text-red-500 transition-colors\"\r\n                        title=\"Delete card\"\r\n                      >\r\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                        </svg>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Front</div>\r\n                      <div className=\"p-3 bg-gray-50 dark:bg-gray-600 rounded border min-h-[60px] text-gray-900 dark:text-white\">\r\n                        {card.frontContent}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Back</div>\r\n                      <div className=\"p-3 bg-gray-50 dark:bg-gray-600 rounded border min-h-[60px] text-gray-900 dark:text-white\">\r\n                        {card.backContent}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Card Stats */}\r\n                  <div className=\"mt-3 pt-3 border-t border-gray-200 dark:border-gray-600\">\r\n                    <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400\">\r\n                      <span>Reviews: {card.reviewCount}</span>\r\n                      <span>Ease: {card.easeFactor.toFixed(1)}</span>\r\n                      <span>Interval: {card.intervalDays} days</span>\r\n                      {card.reviewCount > 0 && (\r\n                        <span>Next: {new Date(card.nextReview).toLocaleDateString()}</span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardManager","import React from 'react'\r\n\r\ninterface ProgressBarProps {\r\n  progress: number // 0-100\r\n  label?: string\r\n  showPercentage?: boolean\r\n  className?: string\r\n}\r\n\r\nconst ProgressBar: React.FC<ProgressBarProps> = ({\r\n  progress,\r\n  label,\r\n  showPercentage = true,\r\n  className = ''\r\n}) => {\r\n  const clampedProgress = Math.min(Math.max(progress, 0), 100)\r\n\r\n  return (\r\n    <div className={`w-full ${className}`}>\r\n      {label && (\r\n        <div className=\"flex justify-between items-center mb-2\">\r\n          <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n            {label}\r\n          </span>\r\n          {showPercentage && (\r\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n              {Math.round(clampedProgress)}%\r\n            </span>\r\n          )}\r\n        </div>\r\n      )}\r\n      <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\r\n        <div\r\n          className=\"bg-blue-600 h-2.5 rounded-full transition-all duration-300 ease-out\"\r\n          style={{ width: `${clampedProgress}%` }}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressBar","import { useState, useEffect, useRef } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useDeckStore } from '../stores/deckStore'\nimport { Deck, DeckSettings } from '../../../shared/types'\nimport CardManager from '../components/deck/CardManager'\nimport ProgressBar from '../components/ui/ProgressBar'\n\n\nconst DecksPage = () => {\n  // Main DecksPage component\n  const navigate = useNavigate()\n  const {\n    decks,\n    isLoading,\n    error,\n    importProgress,\n    importStatus,\n    createDeck,\n    deleteDeck,\n    loadExampleDecks,\n    importAnkiDeck,\n    importFromText,\n    clearError,\n    getCards,\n    resetImportProgress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addCard\n  } = useDeckStore()\n\n  \n  \n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedCategory, setSelectedCategory] = useState('all')\n  const [managingDeckId, setManagingDeckId] = useState<string | null>(null)\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  console.log('DecksPage: showCreateModal state initialized:', showCreateModal)\n  const [showImportModal, setShowImportModal] = useState(false)\n  const [showMapModal, setShowMapModal] = useState(false)\n  const [selectedMapType, setSelectedMapType] = useState('')\n  \n  // Available maps for geography deck creation\n  const availableMaps = [\n    {\n      id: 'world-countries',\n      name: 'World Countries',\n      description: 'Learn all countries of the world',\n      emoji: '🌍',\n      regions: [\n        'United States', 'Canada', 'Mexico', 'Brazil', 'Argentina', 'United Kingdom', \n        'France', 'Germany', 'Italy', 'Spain', 'Russia', 'China', 'Japan', 'India',\n        'Australia', 'South Africa', 'Egypt', 'Nigeria', 'Kenya', 'Morocco'\n      ]\n    },\n    {\n      id: 'us-states',\n      name: 'US States',\n      description: 'Learn all 50 US states',\n      emoji: '🇺🇸',\n      regions: [\n        'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut',\n        'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa',\n        'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan',\n        'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire',\n        'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio',\n        'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota',\n        'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia',\n        'Wisconsin', 'Wyoming'\n      ]\n    },\n    {\n      id: 'europe',\n      name: 'European Countries',\n      description: 'Learn countries in Europe',\n      emoji: '🇪🇺',\n      regions: [\n        'Albania', 'Andorra', 'Austria', 'Belarus', 'Belgium', 'Bosnia and Herzegovina',\n        'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland',\n        'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia',\n        'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malta', 'Moldova', 'Monaco', 'Montenegro',\n        'Netherlands', 'North Macedonia', 'Norway', 'Poland', 'Portugal', 'Romania', 'San Marino',\n        'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Ukraine', 'United Kingdom', 'Vatican City'\n      ]\n    }\n  ]\n\n  // Form states\n  const [newDeckTitle, setNewDeckTitle] = useState('')\n  const [newDeckDescription, setNewDeckDescription] = useState('')\n  const [newDeckCategory, setNewDeckCategory] = useState('')\n  const [importText, setImportText] = useState('')\n  const [importSeparator, setImportSeparator] = useState('\\t')\n\n  const hasLoadedExampleDecks = useRef(false)\n\n  useEffect(() => {\n    // Load example decks if no decks exist and we haven't already loaded them\n    // Add a small delay to allow Zustand to hydrate from localStorage first\n    const timer = setTimeout(() => {\n      if (decks.length === 0 && !hasLoadedExampleDecks.current) {\n        hasLoadedExampleDecks.current = true\n        loadExampleDecks()\n      }\n    }, 100)\n\n    return () => clearTimeout(timer)\n  }, [decks.length, loadExampleDecks])\n\n  const filteredDecks = decks.filter(deck => {\n    const matchesSearch = deck.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         deck.description.toLowerCase().includes(searchTerm.toLowerCase())\n    const matchesCategory = selectedCategory === 'all' || deck.category === selectedCategory\n    return matchesSearch && matchesCategory\n  })\n\n  const categories = ['all', ...Array.from(new Set(decks.map(deck => deck.category).filter(Boolean)))]\n\n  const handleCreateDeck = async (e: React.FormEvent) => {\n    e.preventDefault()\n    try {\n      await createDeck({\n        userId: 'current-user',\n        title: newDeckTitle,\n        description: newDeckDescription,\n        cardCount: 0,\n        isPublic: false,\n        settings: {\n          newCardsPerDay: 20,\n          maxReviewsPerDay: 100,\n          easyBonus: 1.3,\n          intervalModifier: 1.0,\n          maximumInterval: 36500,\n          minimumInterval: 1\n        },\n        category: newDeckCategory || 'general'\n      })\n      setShowCreateModal(false)\n      setNewDeckTitle('')\n      setNewDeckDescription('')\n      setNewDeckCategory('')\n    } catch (error) {\n      console.error('Failed to create deck:', error)\n    }\n  }\n\n  const handleDeleteDeck = async (deckId: string) => {\n    if (confirm('Are you sure you want to delete this deck? This action cannot be undone.')) {\n      try {\n        await deleteDeck(deckId)\n      } catch (error) {\n        console.error('Failed to delete deck:', error)\n      }\n    }\n  }\n\n  const handleFileImport = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file) return\n\n    try {\n      if (file.name.endsWith('.apkg') || file.name.endsWith('.txt')) {\n        await importAnkiDeck(file)\n      } else {\n        // Try to import as text\n        const text = await file.text()\n        await importFromText(file.name.replace(/\\.[^/.]+$/, \"\"), text, importSeparator)\n      }\n      setShowImportModal(false)\n    } catch (error) {\n      console.error('Failed to import file:', error)\n      resetImportProgress()\n    }\n  }\n\n  const handleTextImport = async (e: React.FormEvent) => {\n    e.preventDefault()\n    try {\n      const deck = await importFromText('Imported Deck', importText, importSeparator)\n      console.log('Successfully imported deck:', deck)\n      setShowImportModal(false)\n      setImportText('')\n      // Clear any previous errors\n      clearError()\n    } catch (error) {\n      console.error('Failed to import text:', error)\n      // The error should already be set in the store by importFromText\n    }\n  }\n\n  const getDeckStats = (deck: Deck) => {\n    const cards = getCards(deck.id)\n    const newCards = cards.filter(card => card.reviewCount === 0).length\n    const reviewCards = cards.filter(card => card.reviewCount > 0 && new Date(card.nextReview) <= new Date()).length\n    return { total: cards.length, new: newCards, review: reviewCards }\n  }\n\n  const handleStudyDeck = (deckId: string) => {\n    navigate(`/study/${deckId}`)\n  }\n\n  const handleCreateMapDeck = async () => {\n    const selectedMap = availableMaps.find(map => map.id === selectedMapType)\n    if (!selectedMap) return\n\n    try {\n      const deck = await createDeck({\n        userId: 'current-user',\n        title: selectedMap.name,\n        description: selectedMap.description,\n        cardCount: selectedMap.regions.length,\n        isPublic: false,\n        settings: {\n          newCardsPerDay: 20,\n          maxReviewsPerDay: 100,\n          easyBonus: 1.3,\n          intervalModifier: 1.0,\n          maximumInterval: 36500,\n          minimumInterval: 1\n        },\n        category: 'geography'\n      })\n\n      // Create cards for each region\n      for (const region of selectedMap.regions) {\n        await addCard({\n          deckId: deck.id,\n          front: `What is this region? [Map: ${selectedMap.id}]`,\n          back: region,\n          reviewCount: 0,\n          easeFactor: 2.5,\n          interval: 0,\n          nextReview: new Date(),\n          lastReviewed: new Date()\n        })\n      }\n\n      setShowMapModal(false)\n      setSelectedMapType('')\n    } catch (error) {\n      console.error('Failed to create map deck:', error)\n    }\n  }\n\n  \n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">My Decks</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage your flashcard decks</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => {\n              console.log('Create deck button clicked')\n              if (typeof setShowCreateModal === 'function') {\n                setShowCreateModal(true)\n              } else {\n                console.error('setShowCreateModal is not a function')\n              }\n            }}\n            className=\"btn btn-primary\"\n          >\n            <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n            </svg>\n            Create Deck\n          </button>\n          \n          <button\n            onClick={() => setShowImportModal(true)}\n            className=\"btn btn-secondary\"\n          >\n            <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n            </svg>\n            Import\n          </button>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\">\n          <span className=\"block sm:inline\">{error}</span>\n          <button\n            onClick={clearError}\n            className=\"absolute top-0 bottom-0 right-0 px-4 py-3\"\n          >\n            <svg className=\"fill-current h-6 w-6 text-red-500\" role=\"button\" viewBox=\"0 0 20 20\">\n              <path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"/>\n            </svg>\n          </button>\n        </div>\n      )}\n\n      {/* Search and Filter */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <input\n            type=\"text\"\n            placeholder=\"Search decks...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n          />\n        </div>\n        <select\n          value={selectedCategory}\n          onChange={(e) => setSelectedCategory(e.target.value)}\n          className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n        >\n          {categories.map(category => (\n            <option key={category} value={category}>\n              {category === 'all' ? 'All Categories' : (category || '').charAt(0).toUpperCase() + (category || '').slice(1)}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"flex justify-center items-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </div>\n      )}\n\n      {/* Decks Grid */}\n      {!isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredDecks.map(deck => {\n            const stats = getDeckStats(deck)\n            return (\n              <div key={deck.id} className=\"card p-6 hover:shadow-lg transition-shadow\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                      {deck.title}\n                    </h3>\n                    <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-3\">\n                      {deck.description}\n                    </p>\n                    {deck.category && (\n                      <span className=\"inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full\">\n                        {deck.category}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"flex gap-1 ml-4\">\n                    <button\n                      onClick={() => handleDeleteDeck(deck.id)}\n                      className=\"p-2 text-gray-400 hover:text-red-500 transition-colors\"\n                      title=\"Delete deck\"\n                    >\n                      <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Total Cards</span>\n                    <span className=\"font-medium text-gray-900 dark:text-white\">{stats.total}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">New</span>\n                    <span className=\"font-medium text-blue-600\">{stats.new}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Due for Review</span>\n                    <span className=\"font-medium text-orange-600\">{stats.review}</span>\n                  </div>\n                </div>\n\n                <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex gap-2\">\n                    <button\n                      onClick={() => handleStudyDeck(deck.id)}\n                      className=\"btn btn-primary btn-sm flex-1\"\n                    >\n                      Study Now\n                    </button>\n                    <button\n                      onClick={() => setManagingDeckId(deck.id)}\n                      className=\"btn btn-secondary btn-sm flex-1\"\n                    >\n                      Manage Cards\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredDecks.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"text-6xl mb-4\">📚</div>\n          <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n            {searchTerm || selectedCategory !== 'all' ? 'No decks found' : 'No decks yet'}\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n            {searchTerm || selectedCategory !== 'all' \n              ? 'Try adjusting your search or filter criteria'\n              : 'Create your first deck or import existing flashcards to get started'\n            }\n          </p>\n          {!searchTerm && selectedCategory === 'all' && (\n            <div className=\"flex justify-center gap-4\">\n              <button\n                onClick={() => setShowCreateModal(true)}\n                className=\"btn btn-primary\"\n              >\n                Create Your First Deck\n              </button>\n              <button\n                onClick={() => setShowImportModal(true)}\n                className=\"btn btn-secondary\"\n              >\n                Import Existing Deck\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Create Deck Modal */}\n      {(typeof showCreateModal !== 'undefined' && showCreateModal) && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md\">\n            <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Create New Deck</h2>\n            <form onSubmit={handleCreateDeck} className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Title *\n                </label>\n                <input\n                  type=\"text\"\n                  value={newDeckTitle}\n                  onChange={(e) => setNewDeckTitle(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Description\n                </label>\n                <textarea\n                  value={newDeckDescription}\n                  onChange={(e) => setNewDeckDescription(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  rows={3}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Category\n                </label>\n                <input\n                  type=\"text\"\n                  value={newDeckCategory}\n                  onChange={(e) => setNewDeckCategory(e.target.value)}\n                  placeholder=\"e.g., language, science, history\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                />\n              </div>\n              <div className=\"flex gap-3 pt-4\">\n                <button\n                  type=\"button\"\n                  onClick={() => setShowCreateModal(false)}\n                  className=\"flex-1 btn btn-secondary\"\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  className=\"flex-1 btn btn-primary\"\n                >\n                  Create Deck\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      {/* Import Modal */}\n      {showImportModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-lg\">\n            <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Import Deck</h2>\n            \n            <div className=\"space-y-6\">\n              {/* File Import */}\n              <div>\n                <h3 className=\"text-lg font-medium mb-2 text-gray-900 dark:text-white\">Import from File</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                  Upload an Anki deck (.apkg) or text file (.txt)\n                </p>\n                <input\n                  type=\"file\"\n                  accept=\".apkg,.txt,.csv\"\n                  onChange={handleFileImport}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  disabled={isLoading}\n                />\n                \n                {/* Progress Bar */}\n                {(isLoading && importProgress > 0) && (\n                  <div className=\"mt-4\">\n                    <ProgressBar\n                      progress={importProgress}\n                      label={importStatus || 'Importing...'}\n                      className=\"mb-2\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <div className=\"border-t border-gray-200 dark:border-gray-700 pt-6\">\n                <h3 className=\"text-lg font-medium mb-2 text-gray-900 dark:text-white\">Import from Text</h3>\n                <form onSubmit={handleTextImport} className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Separator\n                    </label>\n                    <select\n                      value={importSeparator}\n                      onChange={(e) => setImportSeparator(e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    >\n                      <option value=\"\\t\">Tab</option>\n                      <option value=\",\">Comma</option>\n                      <option value=\";\">Semicolon</option>\n                      <option value=\"|\">Pipe</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Text (Front{importSeparator}Back format)\n                    </label>\n                    <textarea\n                      value={importText}\n                      onChange={(e) => setImportText(e.target.value)}\n                      placeholder={`Example:\\nHello${importSeparator}Hola\\nGoodbye${importSeparator}Adiós`}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      rows={6}\n                    />\n                  </div>\n                  <button\n                    type=\"submit\"\n                    disabled={!importText.trim() || isLoading}\n                    className=\"w-full btn btn-primary disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isLoading ? 'Importing...' : 'Import Text'}\n                  </button>\n                  \n                  {/* Progress Bar for Text Import */}\n                  {(isLoading && importProgress > 0) && (\n                    <div className=\"mt-4\">\n                      <ProgressBar\n                        progress={importProgress}\n                        label={importStatus || 'Importing...'}\n                        className=\"mb-2\"\n                      />\n                    </div>\n                  )}\n                </form>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end pt-6 border-t border-gray-200 dark:border-gray-700 mt-6\">\n              <button\n                onClick={() => {\n                  setShowImportModal(false)\n                  resetImportProgress()\n                }}\n                disabled={isLoading}\n                className=\"btn btn-secondary disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isLoading ? 'Importing...' : 'Close'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      \n      {showMapModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-lg\">\n            <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Create Geography Deck</h2>\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <div className=\"text-6xl mb-4\">🗺️</div>\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                  Interactive Geography Learning\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                  Choose a map type to create an interactive geography deck. Each card will show a highlighted region,\n                  and you'll need to identify its name.\n                </p>\n              </div>\n\n              {/* Map Type Selection */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                  Select Map Type\n                </label>\n                <div className=\"grid grid-cols-1 gap-3 max-h-64 overflow-y-auto\">\n                  {availableMaps.map((map) => (\n                    <button\n                      key={map.id}\n                      onClick={() => setSelectedMapType(map.id)}\n                      className={`p-4 text-left border rounded-lg transition-colors ${\n                        selectedMapType === map.id\n                          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\n                          : 'border-gray-300 dark:border-gray-600 hover:border-gray-400'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">\n                            {map.name}\n                          </h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {map.description}\n                          </p>\n                          <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">\n                            {map.regions.length} {map.regions.length === 1 ? 'region' : 'regions'}\n                          </p>\n                        </div>\n                        <div className=\"text-2xl ml-4\">\n                          {map.emoji}\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n              \n              {selectedMapType && (\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">What you'll get:</h4>\n                  <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                    <li>• {availableMaps.find(m => m.id === selectedMapType)?.regions.length} interactive map cards</li>\n                    <li>• Visual region highlighting</li>\n                    <li>• Enhanced indicators for small regions</li>\n                    <li>• Immediate feedback</li>\n                    <li>• Spaced repetition learning</li>\n                  </ul>\n                </div>\n              )}\n\n              <div className=\"flex gap-3 pt-4\">\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    setShowMapModal(false)\n                    setSelectedMapType('')\n                  }}\n                  className=\"flex-1 btn btn-secondary\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleCreateMapDeck}\n                  disabled={isLoading || !selectedMapType}\n                  className=\"flex-1 btn btn-success disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isLoading ? 'Creating...' : `Create ${selectedMapType ? availableMaps.find(m => m.id === selectedMapType)?.name : ''} Deck`}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Card Manager Modal */}\n      {managingDeckId && (\n        <CardManager\n          deckId={managingDeckId}\n          onClose={() => setManagingDeckId(null)}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default DecksPage","interface ConfirmationDialogProps {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onConfirm: () => void\r\n  title: string\r\n  message: string\r\n  confirmText?: string\r\n  cancelText?: string\r\n  isDestructive?: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst ConfirmationDialog = ({\r\n  isOpen,\r\n  onClose,\r\n  onConfirm,\r\n  title,\r\n  message,\r\n  confirmText = 'Confirm',\r\n  cancelText = 'Cancel',\r\n  isDestructive = false,\r\n  isLoading = false\r\n}: ConfirmationDialogProps) => {\r\n  if (!isOpen) return null\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full\">\r\n        <div className=\"p-6\">\r\n          {/* Header */}\r\n          <div className=\"flex items-center mb-4\">\r\n            <div className={`w-12 h-12 rounded-full flex items-center justify-center mr-4 ${\r\n              isDestructive \r\n                ? 'bg-red-100 dark:bg-red-900' \r\n                : 'bg-blue-100 dark:bg-blue-900'\r\n            }`}>\r\n              <span className=\"text-2xl\">\r\n                {isDestructive ? '⚠️' : 'ℹ️'}\r\n              </span>\r\n            </div>\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              {title}\r\n            </h3>\r\n          </div>\r\n\r\n          {/* Message */}\r\n          <div className=\"mb-6\">\r\n            <p className=\"text-gray-600 dark:text-gray-400 leading-relaxed\">\r\n              {message}\r\n            </p>\r\n          </div>\r\n\r\n          {/* Actions */}\r\n          <div className=\"flex justify-end space-x-3\">\r\n            <button\r\n              onClick={onClose}\r\n              disabled={isLoading}\r\n              className=\"px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              {cancelText}\r\n            </button>\r\n            <button\r\n              onClick={onConfirm}\r\n              disabled={isLoading}\r\n              className={`px-4 py-2 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2 ${\r\n                isDestructive\r\n                  ? 'bg-red-600 hover:bg-red-700'\r\n                  : 'bg-blue-600 hover:bg-blue-700'\r\n              }`}\r\n            >\r\n              {isLoading && (\r\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\r\n              )}\r\n              <span>{confirmText}</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ConfirmationDialog","import { useState, useEffect, useCallback } from 'react'\r\nimport { useAuthStore } from '../stores/authStore'\r\nimport { useDeckStore } from '../stores/deckStore'\r\nimport { useGamificationStore } from '../stores/gamificationStore'\r\nimport { userDataService, type AuthenticatedUser, type UserStats as DynamicUserStats, type UserActivity, type UserAchievement, type UserChallenge } from '../services/userDataService'\r\nimport XPBar from '../components/gamification/XPBar'\r\nimport StreakCounter from '../components/gamification/StreakCounter'\r\nimport ConfirmationDialog from '../components/ui/ConfirmationDialog'\r\n\r\nconst ProfilePage = () => {\r\n  const { user, updateUser, isLoading, initializeAuth } = useAuthStore()\r\n  \r\n  // Dynamic data state\r\n  const [, setUserStats] = useState<DynamicUserStats | null>(null)\r\n  const [userActivity, setUserActivity] = useState<UserActivity[]>([])\r\n  const [userAchievements, setUserAchievements] = useState<UserAchievement[]>([])\r\n  const [userChallenges, setUserChallenges] = useState<UserChallenge[]>([])\r\n  const [dataLoading, setDataLoading] = useState(false)\r\n  const [dataError, setDataError] = useState<string | null>(null)\r\n  \r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [showResetDialog, setShowResetDialog] = useState(false)\r\n  const [isResetting, setIsResetting] = useState(false)\r\n  const [resetSuccess, setResetSuccess] = useState(false)\r\n  const [resetError, setResetError] = useState<string | null>(null)\r\n  \r\n  // Store actions and data\r\n  const { resetAllStudyData } = useDeckStore()\r\n  const { resetAllUserData, userStats: gamificationStats, isInitialized, userStreak, initializeUserData } = useGamificationStore()\r\n  \r\n  // Ensure auth is initialized when component mounts\r\n  useEffect(() => {\r\n    if (!user && !isLoading) {\r\n      initializeAuth()\r\n    }\r\n  }, [user, isLoading, initializeAuth])\r\n\r\n  // Load dynamic user data function\r\n  const loadUserData = useCallback(async () => {\r\n    if (!user) return\r\n    \r\n    setDataLoading(true)\r\n    setDataError(null)\r\n    \r\n    try {\r\n      // Check if user is demo user\r\n      const isDemo = user.email === 'demo@studymaster.com' || (user as AuthenticatedUser).tokenType === 'demo'\r\n      \r\n      // Initialize gamification data based on user type\r\n      initializeUserData(isDemo)\r\n      \r\n      if (isDemo) {\r\n        // For demo users, use mock data or empty data\r\n        setUserStats(null)\r\n        setUserActivity([])\r\n        setUserAchievements([])\r\n        setUserChallenges([])\r\n      } else {\r\n        // For authenticated users, try to load from API\r\n        const authenticatedUser: AuthenticatedUser = {\r\n          ...user,\r\n          token: (user as AuthenticatedUser).token,\r\n          tokenType: (user as AuthenticatedUser).tokenType\r\n        }\r\n        \r\n        try {\r\n          const [stats, activity, achievements, challenges] = await Promise.all([\r\n            userDataService.getUserStats(authenticatedUser),\r\n            userDataService.getUserActivity(authenticatedUser, 30),\r\n            userDataService.getUserAchievements(authenticatedUser),\r\n            userDataService.getUserChallenges(authenticatedUser)\r\n          ])\r\n          \r\n          setUserStats(stats)\r\n          setUserActivity(activity)\r\n          setUserAchievements(achievements)\r\n          setUserChallenges(challenges)\r\n          \r\n        } catch (apiError) {\r\n          console.warn('API data loading failed, using fallback:', apiError)\r\n          // Fallback to empty state for authenticated users when API fails\r\n          setUserStats(null)\r\n          setUserActivity([])\r\n          setUserAchievements([])\r\n          setUserChallenges([])\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to load user data:', error)\r\n      setDataError('Unable to load user statistics. Please try again later.')\r\n    } finally {\r\n      setDataLoading(false)\r\n    }\r\n  }, [user, initializeUserData])\r\n\r\n  // Load dynamic user data when user is available\r\n  useEffect(() => {\r\n    loadUserData()\r\n  }, [loadUserData])\r\n  \r\n  const [editForm, setEditForm] = useState({\r\n    username: user?.username || '',\r\n    email: user?.email || '',\r\n    dailyGoal: user?.preferences.dailyGoal || 50\r\n  })\r\n\r\n  const handleSaveProfile = () => {\r\n    if (user) {\r\n      updateUser({\r\n        username: editForm.username,\r\n        email: editForm.email,\r\n        preferences: {\r\n          ...user.preferences,\r\n          dailyGoal: editForm.dailyGoal\r\n        }\r\n      })\r\n    }\r\n    setIsEditing(false)\r\n  }\r\n\r\n  const handleResetAllData = async () => {\r\n    if (!user) return\r\n    \r\n    setIsResetting(true)\r\n    setResetError(null)\r\n    \r\n    try {\r\n      // Check if user is demo user\r\n      const isDemo = user.email === 'demo@studymaster.com' || (user as AuthenticatedUser).tokenType === 'demo'\r\n      \r\n      if (!isDemo) {\r\n        // For authenticated users, call API\r\n        const authenticatedUser: AuthenticatedUser = {\r\n          ...user,\r\n          token: (user as AuthenticatedUser).token,\r\n          tokenType: (user as AuthenticatedUser).tokenType\r\n        }\r\n        \r\n        try {\r\n          await userDataService.resetAllUserData(authenticatedUser)\r\n        } catch (apiError) {\r\n          console.warn('API reset failed, proceeding with local reset:', apiError)\r\n          // Continue with local reset even if API fails\r\n        }\r\n      }\r\n      \r\n      // Reset local store data\r\n      resetAllUserData()\r\n      resetAllStudyData()\r\n      \r\n      // Clear local user data state and reinitialize\r\n      setUserStats(null)\r\n      setUserActivity([])\r\n      setUserAchievements([])\r\n      setUserChallenges([])\r\n      setDataError(null)\r\n      \r\n      setResetSuccess(true)\r\n      setShowResetDialog(false)\r\n      \r\n      // Reload user data after reset\r\n      setTimeout(async () => {\r\n        setResetSuccess(false)\r\n        // Reinitialize gamification data and reload user data\r\n        const isDemo = user.email === 'demo@studymaster.com' || (user as AuthenticatedUser).tokenType === 'demo'\r\n        initializeUserData(isDemo)\r\n        await loadUserData()\r\n      }, 1500)\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to reset user data:', error)\r\n      setResetError('Failed to reset data. Please try again.')\r\n    } finally {\r\n      setIsResetting(false)\r\n    }\r\n  }\r\n\r\n  // Show loading state while auth is being initialized\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <h2 className=\"text-xl text-gray-900 dark:text-white\">\r\n            Loading profile...\r\n          </h2>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\r\n            Please log in to view your profile\r\n          </h2>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\r\n      {/* Header */}\r\n      <div className=\"text-center mb-8\">\r\n        <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-2\">\r\n          Profile\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          Track your progress and achievements\r\n        </p>\r\n      </div>\r\n\r\n      {/* User Info Card */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-2xl font-bold\">\r\n              {user.username.charAt(0).toUpperCase()}\r\n            </div>\r\n            <div>\r\n              {isEditing ? (\r\n                <div className=\"space-y-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editForm.username}\r\n                    onChange={(e) => setEditForm({ ...editForm, username: e.target.value })}\r\n                    className=\"text-2xl font-bold bg-transparent border-b border-gray-300 dark:border-gray-600 focus:outline-none focus:border-blue-500 text-gray-900 dark:text-white\"\r\n                  />\r\n                  <input\r\n                    type=\"email\"\r\n                    value={editForm.email}\r\n                    onChange={(e) => setEditForm({ ...editForm, email: e.target.value })}\r\n                    className=\"text-gray-600 dark:text-gray-400 bg-transparent border-b border-gray-300 dark:border-gray-600 focus:outline-none focus:border-blue-500\"\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    {user.username}\r\n                  </h2>\r\n                  <p className=\"text-gray-600 dark:text-gray-400\">{user.email}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"text-right\">\r\n              <div className=\"flex items-center space-x-2 text-yellow-600 dark:text-yellow-400\">\r\n                <span className=\"text-lg\">💰</span>\r\n                <span className=\"font-bold\">{gamificationStats.gold}</span>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 text-purple-600 dark:text-purple-400\">\r\n                <span className=\"text-lg\">💎</span>\r\n                <span className=\"font-bold\">{gamificationStats.diamonds}</span>\r\n              </div>\r\n            </div>\r\n            \r\n            {isEditing ? (\r\n              <div className=\"space-x-2\">\r\n                <button\r\n                  onClick={handleSaveProfile}\r\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n                >\r\n                  Save\r\n                </button>\r\n                <button\r\n                  onClick={() => setIsEditing(false)}\r\n                  className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              <button\r\n                onClick={() => setIsEditing(true)}\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n              >\r\n                Edit Profile\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* XP Bar */}\r\n        <XPBar\r\n          currentXP={gamificationStats.xp}\r\n          level={gamificationStats.level}\r\n          className=\"mb-4\"\r\n        />\r\n        \r\n        {/* Quick Stats */}\r\n        {dataLoading ? (\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\r\n            {[...Array(4)].map((_, i) => (\r\n              <div key={i} className=\"text-center\">\r\n                <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-8 w-16 mx-auto rounded mb-2\"></div>\r\n                <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-4 w-20 mx-auto rounded\"></div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : isInitialized ? (\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                {gamificationStats.totalCards.toLocaleString()}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Cards Studied</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\r\n                {Math.floor(gamificationStats.totalStudyTime / 60)}h {gamificationStats.totalStudyTime % 60}m\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Study Time</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\r\n                {gamificationStats.averageAccuracy.toFixed(1)}%\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\">\r\n                {gamificationStats.currentStreak}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Day Streak</div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"text-center py-4 text-gray-500 dark:text-gray-400\">\r\n            {dataError || 'Unable to load stats'}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Main Content Grid */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\r\n        {/* Left Column */}\r\n        <div className=\"lg:col-span-2 space-y-8\">\r\n          {/* Activity Chart */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n              Recent Activity\r\n            </h3>\r\n            \r\n            {dataLoading ? (\r\n              <div className=\"animate-pulse space-y-4\">\r\n                {[...Array(5)].map((_, i) => (\r\n                  <div key={i} className=\"flex justify-between items-center\">\r\n                    <div className=\"bg-gray-300 dark:bg-gray-600 h-4 w-20 rounded\"></div>\r\n                    <div className=\"bg-gray-300 dark:bg-gray-600 h-4 w-16 rounded\"></div>\r\n                    <div className=\"bg-gray-300 dark:bg-gray-600 h-4 w-12 rounded\"></div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : userActivity.length > 0 ? (\r\n              <div className=\"space-y-3\">\r\n                {userActivity.slice(0, 10).map((activity, index) => (\r\n                  <div key={index} className=\"flex justify-between items-center py-2 border-b border-gray-100 dark:border-gray-700 last:border-b-0\">\r\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                      {new Date(activity.date).toLocaleDateString()}\r\n                    </div>\r\n                    <div className=\"flex space-x-4 text-sm\">\r\n                      <span className=\"text-blue-600 dark:text-blue-400\">\r\n                        {activity.cardsStudied} cards\r\n                      </span>\r\n                      <span className=\"text-green-600 dark:text-green-400\">\r\n                        {activity.studyTime}m\r\n                      </span>\r\n                      <span className=\"text-purple-600 dark:text-purple-400\">\r\n                        {activity.accuracy}%\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center py-8\">\r\n                <div className=\"text-4xl mb-4\">📊</div>\r\n                <p className=\"text-gray-600 dark:text-gray-400\">\r\n                  No activity data available yet. Start studying to see your progress!\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Active Challenges */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n              Active Challenges\r\n            </h3>\r\n            \r\n            {dataLoading ? (\r\n              <div className=\"animate-pulse space-y-4\">\r\n                {[...Array(2)].map((_, i) => (\r\n                  <div key={i} className=\"border border-gray-200 dark:border-gray-600 rounded-lg p-4\">\r\n                    <div className=\"bg-gray-300 dark:bg-gray-600 h-6 w-3/4 rounded mb-2\"></div>\r\n                    <div className=\"bg-gray-300 dark:bg-gray-600 h-4 w-full rounded mb-3\"></div>\r\n                    <div className=\"bg-gray-300 dark:bg-gray-600 h-2 w-full rounded\"></div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : userChallenges.length > 0 ? (\r\n              <div className=\"space-y-4\">\r\n                {userChallenges.map((challenge) => {\r\n                  const progressPercentage = Math.min((challenge.current / challenge.target) * 100, 100)\r\n                  \r\n                  return (\r\n                    <div key={challenge.id} className=\"border border-gray-200 dark:border-gray-600 rounded-lg p-4\">\r\n                      <div className=\"flex justify-between items-start mb-2\">\r\n                        <div>\r\n                          <h4 className=\"font-semibold text-gray-900 dark:text-white\">\r\n                            {challenge.name}\r\n                          </h4>\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                            {challenge.description}\r\n                          </p>\r\n                        </div>\r\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                          challenge.completedAt \r\n                            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\r\n                            : 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'\r\n                        }`}>\r\n                          {challenge.completedAt ? 'Completed' : challenge.type}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex justify-between text-sm\">\r\n                          <span className=\"text-gray-600 dark:text-gray-400\">\r\n                            Progress\r\n                          </span>\r\n                          <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                            {challenge.current} / {challenge.target}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\r\n                          <div \r\n                            className=\"bg-blue-600 h-2 rounded-full transition-all duration-500\"\r\n                            style={{ width: `${progressPercentage}%` }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center space-x-4 mt-3 text-sm text-gray-600 dark:text-gray-400\">\r\n                        <span>+{challenge.reward.xp} XP</span>\r\n                        <span>+{challenge.reward.coins} coins</span>\r\n                        {challenge.reward.gems && <span>+{challenge.reward.gems} gems</span>}\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center py-8\">\r\n                <div className=\"text-4xl mb-4\">🎯</div>\r\n                <p className=\"text-gray-600 dark:text-gray-400\">\r\n                  No active challenges. Check the Challenges page to join some!\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right Column */}\r\n        <div className=\"space-y-8\">\r\n          {/* Streak Counter */}\r\n          <StreakCounter\r\n            currentStreak={gamificationStats.currentStreak}\r\n            longestStreak={gamificationStats.longestStreak}\r\n            lastStudyDate={userStreak?.lastStudyDate || new Date().toISOString()}\r\n          />\r\n          \r\n          {/* Achievements */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n              Achievements ({userAchievements.length})\r\n            </h3>\r\n            \r\n            {dataLoading ? (\r\n              <div className=\"animate-pulse grid grid-cols-4 gap-3\">\r\n                {[...Array(8)].map((_, i) => (\r\n                  <div key={i} className=\"bg-gray-300 dark:bg-gray-600 h-16 w-16 rounded-lg\"></div>\r\n                ))}\r\n              </div>\r\n            ) : userAchievements.length > 0 ? (\r\n              <div className=\"grid grid-cols-4 gap-3\">\r\n                {userAchievements.map((achievement) => (\r\n                  <div\r\n                    key={achievement.id}\r\n                    className=\"bg-gradient-to-br from-yellow-400 to-orange-500 rounded-lg p-3 text-center text-white shadow-lg\"\r\n                    title={`${achievement.name}: ${achievement.description}`}\r\n                  >\r\n                    <div className=\"text-2xl mb-1\">{achievement.icon}</div>\r\n                    <div className=\"text-xs font-medium truncate\">{achievement.name}</div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center py-8\">\r\n                <div className=\"text-4xl mb-4\">🏆</div>\r\n                <p className=\"text-gray-600 dark:text-gray-400\">\r\n                  No achievements yet. Keep studying to unlock them!\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Settings */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n              Study Settings\r\n            </h3>\r\n            \r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Daily Goal\r\n                </label>\r\n                {isEditing ? (\r\n                  <input\r\n                    type=\"number\"\r\n                    value={editForm.dailyGoal}\r\n                    onChange={(e) => setEditForm({ ...editForm, dailyGoal: parseInt(e.target.value) || 50 })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                    min=\"1\"\r\n                    max=\"500\"\r\n                  />\r\n                ) : (\r\n                  <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                    {user.preferences.dailyGoal} cards\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                  Notifications\r\n                </span>\r\n                <div className={`w-12 h-6 rounded-full transition-colors ${\r\n                  user.preferences.notifications \r\n                    ? 'bg-blue-600' \r\n                    : 'bg-gray-300 dark:bg-gray-600'\r\n                }`}>\r\n                  <div className={`w-5 h-5 bg-white rounded-full shadow-md transform transition-transform ${\r\n                    user.preferences.notifications ? 'translate-x-6' : 'translate-x-0.5'\r\n                  } mt-0.5`} />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                  Sound Effects\r\n                </span>\r\n                <div className={`w-12 h-6 rounded-full transition-colors ${\r\n                  user.preferences.soundEffects \r\n                    ? 'bg-blue-600' \r\n                    : 'bg-gray-300 dark:bg-gray-600'\r\n                }`}>\r\n                  <div className={`w-5 h-5 bg-white rounded-full shadow-md transform transition-transform ${\r\n                    user.preferences.soundEffects ? 'translate-x-6' : 'translate-x-0.5'\r\n                  } mt-0.5`} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Reset Data Section */}\r\n            <div className=\"mt-8 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n              <h4 className=\"text-md font-semibold text-gray-900 dark:text-white mb-3\">\r\n                Data Management\r\n              </h4>\r\n              <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\r\n                <div className=\"flex items-start space-x-3\">\r\n                  <div className=\"flex-shrink-0\">\r\n                    <span className=\"text-red-500 text-xl\">⚠️</span>\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <h5 className=\"text-sm font-medium text-red-800 dark:text-red-200 mb-1\">\r\n                      Reset All Statistics\r\n                    </h5>\r\n                    <p className=\"text-sm text-red-700 dark:text-red-300 mb-3\">\r\n                      This will permanently delete all your study progress, achievements, streaks, and performance data. This action cannot be undone.\r\n                    </p>\r\n                    <button\r\n                      onClick={() => setShowResetDialog(true)}\r\n                      disabled={isResetting}\r\n                      className=\"px-4 py-2 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\r\n                    >\r\n                      {isResetting && (\r\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\r\n                      )}\r\n                      <span>Reset All Data</span>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Success Message */}\r\n      {resetSuccess && (\r\n        <div className=\"fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center space-x-2\">\r\n          <span className=\"text-lg\">✅</span>\r\n          <span>All statistics have been reset successfully!</span>\r\n        </div>\r\n      )}\r\n\r\n      {/* Error Message */}\r\n      {resetError && (\r\n        <div className=\"fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center space-x-2\">\r\n          <span className=\"text-lg\">❌</span>\r\n          <span>{resetError}</span>\r\n          <button\r\n            onClick={() => setResetError(null)}\r\n            className=\"ml-2 text-white hover:text-gray-200\"\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Reset Confirmation Dialog */}\r\n      <ConfirmationDialog\r\n        isOpen={showResetDialog}\r\n        onClose={() => setShowResetDialog(false)}\r\n        onConfirm={handleResetAllData}\r\n        title=\"Reset All Statistics\"\r\n        message=\"Are you absolutely sure you want to reset all your statistics? This will permanently delete all your study progress, achievements, streaks, challenge progress, and performance data. This action cannot be undone and you will lose all your current progress.\"\r\n        confirmText=\"Yes, Reset Everything\"\r\n        cancelText=\"Cancel\"\r\n        isDestructive={true}\r\n        isLoading={isResetting}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfilePage","import React, { useState, useEffect } from 'react'\r\nimport { useAuthStore } from '../stores/authStore'\r\nimport { userDataService, type AuthenticatedUser, type UserChallenge } from '../services/userDataService'\r\nimport { MonthlyChallenge } from '../components/gamification/MonthlyChallenge'\r\nimport { CommunityLeaderboard } from '../components/gamification/CommunityLeaderboard'\r\n\r\nconst ChallengesPage: React.FC = () => {\r\n  const { user } = useAuthStore()\r\n  \r\n  // Dynamic data state\r\n  const [userChallenges, setUserChallenges] = useState<UserChallenge[]>([])\r\n  const [dataLoading, setDataLoading] = useState(false)\r\n  const [dataError, setDataError] = useState<string | null>(null)\r\n  \r\n  const [filter, setFilter] = useState<'all' | 'active' | 'completed' | 'available'>('all')\r\n  const [sortBy, setSortBy] = useState<'expiresAt' | 'reward' | 'progress'>('expiresAt')\r\n\r\n  // Load dynamic challenge data when user is available\r\n  useEffect(() => {\r\n    const loadChallengeData = async () => {\r\n      if (!user) return\r\n      \r\n      setDataLoading(true)\r\n      setDataError(null)\r\n      \r\n      try {\r\n        const authenticatedUser: AuthenticatedUser = {\r\n          ...user,\r\n          token: (user as AuthenticatedUser).token,\r\n          tokenType: (user as AuthenticatedUser).tokenType\r\n        }\r\n        \r\n        const challenges = await userDataService.getUserChallenges(authenticatedUser)\r\n        setUserChallenges(challenges)\r\n      } catch (error) {\r\n        console.error('Failed to load challenge data:', error)\r\n        setDataError('Failed to load challenge data')\r\n      } finally {\r\n        setDataLoading(false)\r\n      }\r\n    }\r\n    \r\n    loadChallengeData()\r\n  }, [user])\r\n\r\n  const getFilteredChallenges = () => {\r\n    let filtered = userChallenges\r\n\r\n    // Apply filter\r\n    switch (filter) {\r\n      case 'active':\r\n        filtered = userChallenges.filter(challenge => !challenge.completedAt && new Date(challenge.expiresAt) > new Date())\r\n        break\r\n      case 'completed':\r\n        filtered = userChallenges.filter(challenge => challenge.completedAt)\r\n        break\r\n      case 'available':\r\n        filtered = userChallenges.filter(challenge => !challenge.completedAt)\r\n        break\r\n      default:\r\n        // 'all' - no filtering\r\n        break\r\n    }\r\n\r\n    // Apply sorting\r\n    return filtered.sort((a, b) => {\r\n      switch (sortBy) {\r\n        case 'expiresAt':\r\n          return new Date(a.expiresAt).getTime() - new Date(b.expiresAt).getTime()\r\n        case 'reward': {\r\n          const aRewardValue = a.reward.xp + a.reward.coins + (a.reward.gems || 0) * 10\r\n          const bRewardValue = b.reward.xp + b.reward.coins + (b.reward.gems || 0) * 10\r\n          return bRewardValue - aRewardValue\r\n        }\r\n        case 'progress': {\r\n          const aProgress = (a.current / a.target) * 100\r\n          const bProgress = (b.current / b.target) * 100\r\n          return bProgress - aProgress\r\n        }\r\n        default:\r\n          return 0\r\n      }\r\n    })\r\n  }\r\n\r\n  const getFilterCount = (filterType: typeof filter) => {\r\n    switch (filterType) {\r\n      case 'active':\r\n        return userChallenges.filter(challenge => !challenge.completedAt && new Date(challenge.expiresAt) > new Date()).length\r\n      case 'completed':\r\n        return userChallenges.filter(challenge => challenge.completedAt).length\r\n      case 'available':\r\n        return userChallenges.filter(challenge => !challenge.completedAt).length\r\n      default:\r\n        return userChallenges.length\r\n    }\r\n  }\r\n\r\n  const getProgressPercentage = (challenge: UserChallenge) => {\r\n    return Math.min((challenge.current / challenge.target) * 100, 100)\r\n  }\r\n\r\n  const isExpired = (challenge: UserChallenge) => {\r\n    return new Date(challenge.expiresAt) < new Date()\r\n  }\r\n\r\n  const getTimeRemaining = (challenge: UserChallenge) => {\r\n    const now = new Date()\r\n    const expires = new Date(challenge.expiresAt)\r\n    const diff = expires.getTime() - now.getTime()\r\n    \r\n    if (diff <= 0) return 'Expired'\r\n    \r\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24))\r\n    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n    \r\n    if (days > 0) return `${days}d ${hours}h`\r\n    return `${hours}h`\r\n  }\r\n\r\n  const filteredChallenges = getFilteredChallenges()\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8\">\r\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n            🏆 Challenges\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Complete challenges to earn XP, achievements, and compete with other learners\r\n          </p>\r\n        </div>\r\n\r\n        {/* Stats Overview */}\r\n        {dataLoading ? (\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\r\n            {[...Array(4)].map((_, i) => (\r\n              <div key={i} className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\r\n                <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-8 w-12 rounded mb-2\"></div>\r\n                <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-4 w-16 rounded\"></div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\r\n              <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                {userChallenges.length}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Total</div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\r\n              <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\r\n                {userChallenges.filter(c => c.completedAt).length}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Completed</div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\r\n              <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\">\r\n                {userChallenges.filter(c => !c.completedAt && new Date(c.expiresAt) > new Date()).length}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Active</div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\r\n              <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\r\n                {userChallenges.filter(c => new Date(c.expiresAt) < new Date()).length}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Expired</div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Filters and Sorting */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 mb-6 border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\r\n            {/* Filter Tabs */}\r\n            <div className=\"flex space-x-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\r\n              {(['all', 'active', 'completed', 'available'] as const).map((filterType) => (\r\n                <button\r\n                  key={filterType}\r\n                  onClick={() => setFilter(filterType)}\r\n                  className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\r\n                    filter === filterType\r\n                      ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm'\r\n                      : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\r\n                  }`}\r\n                >\r\n                  {filterType.charAt(0).toUpperCase() + filterType.slice(1)} ({getFilterCount(filterType)})\r\n                </button>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Sort Dropdown */}\r\n            <div className=\"flex items-center space-x-2\">\r\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">Sort by:</span>\r\n              <select\r\n                value={sortBy}\r\n                onChange={(e) => setSortBy(e.target.value as typeof sortBy)}\r\n                className=\"bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 text-sm text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n              >\r\n                <option value=\"expiresAt\">Time Remaining</option>\r\n                <option value=\"reward\">Reward Value</option>\r\n                <option value=\"progress\">Progress</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Challenges Grid */}\r\n        {dataLoading ? (\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n            {[...Array(6)].map((_, i) => (\r\n              <div key={i} className=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700\">\r\n                <div className=\"animate-pulse space-y-4\">\r\n                  <div className=\"bg-gray-300 dark:bg-gray-600 h-6 w-3/4 rounded\"></div>\r\n                  <div className=\"bg-gray-300 dark:bg-gray-600 h-4 w-full rounded\"></div>\r\n                  <div className=\"bg-gray-300 dark:bg-gray-600 h-2 w-full rounded\"></div>\r\n                  <div className=\"bg-gray-300 dark:bg-gray-600 h-8 w-1/2 rounded\"></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : filteredChallenges.length === 0 ? (\r\n          <div className=\"text-center py-12\">\r\n            <div className=\"text-6xl mb-4\">🎯</div>\r\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\r\n              {dataError ? 'Unable to Load Challenges' : 'No challenges found'}\r\n            </h3>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              {dataError || (filter === 'all' \r\n                ? 'No challenges are currently available.'\r\n                : `No ${filter} challenges found. Try a different filter.`\r\n              )}\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n            {filteredChallenges.map((challenge) => {\r\n              const progressPercentage = getProgressPercentage(challenge)\r\n              const expired = isExpired(challenge)\r\n              \r\n              return (\r\n                <div\r\n                  key={challenge.id}\r\n                  className={`bg-white dark:bg-gray-800 rounded-lg p-6 border transition-all duration-200 hover:shadow-lg ${\r\n                    challenge.completedAt\r\n                      ? 'border-green-200 dark:border-green-800 bg-green-50 dark:bg-green-900/20'\r\n                      : expired\r\n                      ? 'border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-900/20'\r\n                      : 'border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600'\r\n                  }`}\r\n                >\r\n                  {/* Header */}\r\n                  <div className=\"flex items-start justify-between mb-4\">\r\n                    <div className=\"flex-1\">\r\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-1\">\r\n                        {challenge.name}\r\n                      </h3>\r\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                        {challenge.description}\r\n                      </p>\r\n                    </div>\r\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ml-2 ${\r\n                      challenge.completedAt\r\n                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\r\n                        : expired\r\n                        ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\r\n                        : challenge.type === 'daily'\r\n                        ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'\r\n                        : challenge.type === 'weekly'\r\n                        ? 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'\r\n                        : 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'\r\n                    }`}>\r\n                      {challenge.completedAt ? 'Completed' : expired ? 'Expired' : challenge.type}\r\n                    </span>\r\n                  </div>\r\n\r\n                  {/* Progress */}\r\n                  <div className=\"mb-4\">\r\n                    <div className=\"flex justify-between text-sm mb-2\">\r\n                      <span className=\"text-gray-600 dark:text-gray-400\">Progress</span>\r\n                      <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                        {challenge.current} / {challenge.target}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\r\n                      <div \r\n                        className={`h-2 rounded-full transition-all duration-500 ${\r\n                          challenge.completedAt\r\n                            ? 'bg-green-600'\r\n                            : expired\r\n                            ? 'bg-red-600'\r\n                            : 'bg-blue-600'\r\n                        }`}\r\n                        style={{ width: `${progressPercentage}%` }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Rewards */}\r\n                  <div className=\"mb-4\">\r\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">Rewards</div>\r\n                    <div className=\"flex items-center space-x-4 text-sm\">\r\n                      <span className=\"text-blue-600 dark:text-blue-400\">\r\n                        +{challenge.reward.xp} XP\r\n                      </span>\r\n                      <span className=\"text-yellow-600 dark:text-yellow-400\">\r\n                        +{challenge.reward.coins} coins\r\n                      </span>\r\n                      {challenge.reward.gems && (\r\n                        <span className=\"text-purple-600 dark:text-purple-400\">\r\n                          +{challenge.reward.gems} gems\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Time Remaining */}\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"text-sm\">\r\n                      <span className=\"text-gray-600 dark:text-gray-400\">\r\n                        {expired ? 'Expired' : 'Time remaining: '}\r\n                      </span>\r\n                      <span className={`font-medium ${\r\n                        expired \r\n                          ? 'text-red-600 dark:text-red-400'\r\n                          : 'text-gray-900 dark:text-white'\r\n                      }`}>\r\n                        {expired ? '' : getTimeRemaining(challenge)}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    {challenge.completedAt && (\r\n                      <div className=\"text-green-600 dark:text-green-400 text-2xl\">\r\n                        ✅\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        )}\r\n\r\n        {/* Monthly Challenge Section */}\r\n        <div className=\"mt-12\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">\r\n            🌟 Monthly Challenge\r\n          </h2>\r\n          <MonthlyChallenge challenge={{\r\n            id: \"monthly-2025-01\",\r\n            title: \"January Learning Marathon\",\r\n            description: \"Master new knowledge throughout January with progressive challenges\",\r\n            type: \"monthly\" as const,\r\n            requirements: [],\r\n            rewards: [],\r\n            startDate: \"2025-01-01T00:00:00Z\",\r\n            endDate: \"2025-01-31T23:59:59Z\",\r\n            isActive: true,\r\n            participantCount: 47892,\r\n            difficulty: \"intermediate\" as const,\r\n            storyArc: {\r\n              id: \"winter-learning-saga\",\r\n              title: \"Winter Learning Saga\",\r\n              description: \"Embark on a month-long journey of discovery\",\r\n              theme: \"winter\",\r\n              chapters: [],\r\n              totalWeeks: 4,\r\n              currentWeek: 2\r\n            }\r\n          }} />\r\n        </div>\r\n\r\n        {/* Community Leaderboard Section */}\r\n        <div className=\"mt-12\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">\r\n            🏆 Community Leaderboard\r\n          </h2>\r\n          <CommunityLeaderboard\r\n            challengeId=\"monthly-2025-01\"\r\n            challengeName=\"January Learning Marathon\"\r\n          />\r\n        </div>\r\n\r\n        {/* Help Section */}\r\n        <div className=\"mt-12 bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6 border border-blue-200 dark:border-blue-800\">\r\n          <h3 className=\"text-lg font-semibold text-blue-900 dark:text-blue-100 mb-3\">\r\n            💡 How Challenges Work\r\n          </h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800 dark:text-blue-200\">\r\n            <div>\r\n              <h4 className=\"font-medium mb-2\">🎯 Challenge Types</h4>\r\n              <ul className=\"space-y-1\">\r\n                <li>• <strong>Daily:</strong> Reset every 24 hours</li>\r\n                <li>• <strong>Weekly:</strong> Reset every Monday</li>\r\n                <li>• <strong>Monthly:</strong> Reset on the 1st</li>\r\n                <li>• <strong>Special:</strong> Limited-time events</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <h4 className=\"font-medium mb-2\">🏆 Rewards</h4>\r\n              <ul className=\"space-y-1\">\r\n                <li>• <strong>XP:</strong> Experience points for leveling up</li>\r\n                <li>• <strong>Coins:</strong> In-app currency</li>\r\n                <li>• <strong>Gems:</strong> Premium currency</li>\r\n                <li>• <strong>Achievements:</strong> Unlock special badges</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChallengesPage","import { useState, useEffect } from 'react'\r\nimport { useAuthStore } from '../stores/authStore'\r\nimport { userDataService, type AuthenticatedUser, type LeaderboardData, type LeaderboardEntry } from '../services/userDataService'\r\n\r\ntype LeaderboardType = 'global' | 'friends' | 'weekly' | 'monthly'\r\n\r\nconst LeaderboardPage = () => {\r\n  const { user } = useAuthStore()\r\n  \r\n  // Dynamic data state\r\n  const [leaderboardData, setLeaderboardData] = useState<LeaderboardData | null>(null)\r\n  const [dataLoading, setDataLoading] = useState(false)\r\n  const [dataError, setDataError] = useState<string | null>(null)\r\n  \r\n  const [selectedType, setSelectedType] = useState<LeaderboardType>('global')\r\n  \r\n  // Load dynamic leaderboard data when user is available\r\n  useEffect(() => {\r\n    const loadLeaderboardData = async () => {\r\n      if (!user) return\r\n      \r\n      setDataLoading(true)\r\n      setDataError(null)\r\n      \r\n      try {\r\n        const authenticatedUser: AuthenticatedUser = {\r\n          ...user,\r\n          token: (user as AuthenticatedUser).token,\r\n          tokenType: (user as AuthenticatedUser).tokenType\r\n        }\r\n        \r\n        const data = await userDataService.getLeaderboardData(authenticatedUser)\r\n        setLeaderboardData(data)\r\n      } catch (error) {\r\n        console.error('Failed to load leaderboard data:', error)\r\n        setDataError('Failed to load leaderboard data')\r\n      } finally {\r\n        setDataLoading(false)\r\n      }\r\n    }\r\n    \r\n    loadLeaderboardData()\r\n  }, [user])\r\n  \r\n  const leaderboardTypes: { value: LeaderboardType; label: string; icon: string; description: string }[] = [\r\n    { value: 'global', label: 'Global Rankings', icon: '🌍', description: 'Compete with all users worldwide' },\r\n    { value: 'friends', label: 'Friends', icon: '👥', description: 'Compare with your friends' },\r\n    { value: 'weekly', label: 'This Week', icon: '📅', description: 'Weekly performance rankings' },\r\n    { value: 'monthly', label: 'This Month', icon: '📊', description: 'Monthly achievement rankings' }\r\n  ]\r\n  \r\n  const getCurrentLeaderboard = (): LeaderboardEntry[] => {\r\n    if (!leaderboardData) return []\r\n    return leaderboardData[selectedType] || []\r\n  }\r\n  \r\n  const currentLeaderboard = getCurrentLeaderboard()\r\n  \r\n  const getRankIcon = (rank: number) => {\r\n    switch (rank) {\r\n      case 1: return '🥇'\r\n      case 2: return '🥈'\r\n      case 3: return '🥉'\r\n      default: return `#${rank}`\r\n    }\r\n  }\r\n  \r\n  const getRankColor = (rank: number) => {\r\n    switch (rank) {\r\n      case 1: return 'text-yellow-600 dark:text-yellow-400'\r\n      case 2: return 'text-gray-600 dark:text-gray-400'\r\n      case 3: return 'text-orange-600 dark:text-orange-400'\r\n      default: return 'text-gray-700 dark:text-gray-300'\r\n    }\r\n  }\r\n  \r\n  const getChangeIcon = (change: number) => {\r\n    if (change > 0) return '📈'\r\n    if (change < 0) return '📉'\r\n    return '➖'\r\n  }\r\n  \r\n  const getChangeColor = (change: number) => {\r\n    if (change > 0) return 'text-green-600 dark:text-green-400'\r\n    if (change < 0) return 'text-red-600 dark:text-red-400'\r\n    return 'text-gray-500 dark:text-gray-400'\r\n  }\r\n  \r\n  const formatScore = (score: number) => {\r\n    return score.toLocaleString() + ' XP'\r\n  }\r\n  \r\n  const currentUserEntry = currentLeaderboard.find(entry => entry.userId === user?.id)\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6 space-y-8\">\r\n      {/* Header */}\r\n      <div className=\"text-center mb-8\">\r\n        <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-2\">\r\n          🏆 Leaderboard\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          Compete with other learners and climb the ranks!\r\n        </p>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n          Leaderboard Category\r\n        </h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          {leaderboardTypes.map((type) => (\r\n            <button\r\n              key={type.value}\r\n              onClick={() => setSelectedType(type.value)}\r\n              className={`p-4 rounded-lg border-2 transition-all duration-200 text-left ${\r\n                selectedType === type.value\r\n                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\r\n                  : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'\r\n              }`}\r\n            >\r\n              <div className=\"flex items-center space-x-2 mb-2\">\r\n                <span className=\"text-2xl\">{type.icon}</span>\r\n                <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                  {type.label}\r\n                </span>\r\n              </div>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                {type.description}\r\n              </p>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Current User Position */}\r\n      {currentUserEntry && (\r\n        <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg shadow-lg p-6 text-white\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Your Position</h3>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center text-2xl font-bold\">\r\n                {currentUserEntry.username.charAt(0).toUpperCase()}\r\n              </div>\r\n              <div>\r\n                <div className=\"font-bold text-lg\">{currentUserEntry.username}</div>\r\n                <div className=\"text-blue-100\">\r\n                  {formatScore(currentUserEntry.score)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <div className=\"text-3xl font-bold\">\r\n                {getRankIcon(currentUserEntry.rank)}\r\n              </div>\r\n              <div className=\"text-sm text-blue-100 flex items-center space-x-1\">\r\n                <span>{getChangeIcon(currentUserEntry.change)}</span>\r\n                <span>\r\n                  {currentUserEntry.change === 0 \r\n                    ? 'No change' \r\n                    : `${Math.abs(currentUserEntry.change)} ${currentUserEntry.change > 0 ? 'up' : 'down'}`\r\n                  }\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Leaderboard */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden\">\r\n        <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              {leaderboardTypes.find(t => t.value === selectedType)?.label}\r\n            </h3>\r\n            {!dataLoading && leaderboardData && (\r\n              <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                Updated recently\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {dataLoading ? (\r\n          <div className=\"p-8\">\r\n            <div className=\"space-y-4\">\r\n              {[...Array(10)].map((_, i) => (\r\n                <div key={i} className=\"flex items-center justify-between p-4\">\r\n                  <div className=\"flex items-center space-x-4\">\r\n                    <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-8 w-8 rounded\"></div>\r\n                    <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-10 w-10 rounded-full\"></div>\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-4 w-24 rounded\"></div>\r\n                      <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-3 w-16 rounded\"></div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"animate-pulse bg-gray-300 dark:bg-gray-600 h-4 w-8 rounded\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ) : currentLeaderboard.length > 0 ? (\r\n          <div className=\"divide-y divide-gray-200 dark:divide-gray-700\">\r\n            {currentLeaderboard.map((entry) => (\r\n              <div\r\n                key={entry.userId}\r\n                className={`p-4 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors ${\r\n                  entry.userId === user?.id ? 'bg-blue-50 dark:bg-blue-900/20' : ''\r\n                }`}\r\n              >\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center space-x-4\">\r\n                    {/* Rank */}\r\n                    <div className={`text-2xl font-bold ${getRankColor(entry.rank)} min-w-[3rem] text-center`}>\r\n                      {getRankIcon(entry.rank)}\r\n                    </div>\r\n                    \r\n                    {/* User Info */}\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold\">\r\n                        {entry.username.charAt(0).toUpperCase()}\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"font-semibold text-gray-900 dark:text-white\">\r\n                          {entry.username}\r\n                          {entry.userId === user?.id && (\r\n                            <span className=\"ml-2 text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full\">\r\n                              You\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                          {formatScore(entry.score)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Change Indicator */}\r\n                  <div className={`text-sm font-medium ${getChangeColor(entry.change)} flex items-center space-x-1`}>\r\n                    <span className=\"text-lg\">{getChangeIcon(entry.change)}</span>\r\n                    <span>\r\n                      {entry.change === 0 \r\n                        ? '—' \r\n                        : `${Math.abs(entry.change)}`\r\n                      }\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"p-8 text-center\">\r\n            <div className=\"text-4xl mb-4\">📊</div>\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\r\n              {dataError ? 'Unable to Load Data' : 'No Data Available'}\r\n            </h3>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              {dataError || 'Leaderboard data for this category is not available yet.'}\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Info Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n            How Rankings Work\r\n          </h3>\r\n          <div className=\"space-y-3 text-sm text-gray-600 dark:text-gray-400\">\r\n            <div className=\"flex items-start space-x-2\">\r\n              <span className=\"text-blue-500 mt-1\">•</span>\r\n              <span>Rankings update regularly based on your study activity</span>\r\n            </div>\r\n            <div className=\"flex items-start space-x-2\">\r\n              <span className=\"text-blue-500 mt-1\">•</span>\r\n              <span>XP is earned through studying, accuracy bonuses, and streaks</span>\r\n            </div>\r\n            <div className=\"flex items-start space-x-2\">\r\n              <span className=\"text-blue-500 mt-1\">•</span>\r\n              <span>Global rankings include all StudyMaster users</span>\r\n            </div>\r\n            <div className=\"flex items-start space-x-2\">\r\n              <span className=\"text-blue-500 mt-1\">•</span>\r\n              <span>Weekly and monthly rankings reset at the start of each period</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n            Climb the Ranks\r\n          </h3>\r\n          <div className=\"space-y-3 text-sm text-gray-600 dark:text-gray-400\">\r\n            <div className=\"flex items-start space-x-2\">\r\n              <span className=\"text-green-500 mt-1\">•</span>\r\n              <span>Study consistently to maintain and improve your streak</span>\r\n            </div>\r\n            <div className=\"flex items-start space-x-2\">\r\n              <span className=\"text-green-500 mt-1\">•</span>\r\n              <span>Focus on accuracy to maximize your XP gains</span>\r\n            </div>\r\n            <div className=\"flex items-start space-x-2\">\r\n              <span className=\"text-green-500 mt-1\">•</span>\r\n              <span>Complete challenges for bonus XP and achievements</span>\r\n            </div>\r\n            <div className=\"flex items-start space-x-2\">\r\n              <span className=\"text-green-500 mt-1\">•</span>\r\n              <span>Invite friends to compete in the friends leaderboard</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LeaderboardPage","import RealTimeStatsCard from '../components/dashboard/RealTimeStatsCard'\r\nimport TrendingTopics from '../components/dashboard/TrendingTopics'\r\nimport MarketInsights from '../components/dashboard/MarketInsights'\r\nimport { useRealTimeData } from '../hooks/useRealTimeData'\r\n\r\nconst GlobalStatsPage = () => {\r\n  const {\r\n    globalStats,\r\n    liveMetrics,\r\n    isLoading,\r\n    error,\r\n    lastUpdated,\r\n    refresh,\r\n    formatNumber,\r\n    formatTime,\r\n    getTimeSinceUpdate\r\n  } = useRealTimeData()\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* Header */}\r\n      <div className=\"text-center\">\r\n        <h1 className=\"text-4xl font-bold text-gradient mb-4\">\r\n          🌍 Global Learning Statistics\r\n        </h1>\r\n        <p className=\"text-xl text-gray-600 dark:text-gray-400 mb-4\">\r\n          Real-time insights from the global learning community\r\n        </p>\r\n        \r\n        {/* Live Status Indicator */}\r\n        <div className=\"flex items-center justify-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n            <span>Live data</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <span>Last updated: {lastUpdated ? getTimeSinceUpdate() : 'Loading...'}</span>\r\n            <button\r\n              onClick={refresh}\r\n              className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors\"\r\n              disabled={isLoading}\r\n              title=\"Refresh all data\"\r\n            >\r\n              <span className={isLoading ? 'animate-spin' : ''}>🔄</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Error State */}\r\n      {error && (\r\n        <div className=\"card p-6 border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-900/20\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"text-2xl\">⚠️</div>\r\n              <div>\r\n                <h3 className=\"font-semibold text-red-800 dark:text-red-200\">\r\n                  Connection Issue\r\n                </h3>\r\n                <p className=\"text-sm text-red-600 dark:text-red-400\">\r\n                  {error}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <button\r\n              onClick={refresh}\r\n              className=\"btn btn-sm bg-red-600 hover:bg-red-700 text-white\"\r\n            >\r\n              Retry\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Global Overview Cards */}\r\n      {globalStats && liveMetrics && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <div className=\"card p-6 text-center\">\r\n            <div className=\"text-3xl font-bold text-blue-600 mb-2\">\r\n              {formatNumber(globalStats.totalLearners)}\r\n            </div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Total Learners</div>\r\n            <div className=\"text-xs text-green-600 dark:text-green-400 mt-1\">\r\n              +{Math.floor(Math.random() * 1000)} today\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"card p-6 text-center\">\r\n            <div className=\"text-3xl font-bold text-green-600 mb-2\">\r\n              {formatNumber(globalStats.cardsStudiedToday)}\r\n            </div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Cards Studied Today</div>\r\n            <div className=\"text-xs text-blue-600 dark:text-blue-400 mt-1\">\r\n              {formatTime(globalStats.studyTimeToday)} total time\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"card p-6 text-center\">\r\n            <div className=\"text-3xl font-bold text-orange-600 mb-2\">\r\n              {formatNumber(liveMetrics.onlineUsers)}\r\n            </div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Online Now</div>\r\n            <div className=\"text-xs text-purple-600 dark:text-purple-400 mt-1\">\r\n              {formatNumber(liveMetrics.studyingSessions)} studying\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"card p-6 text-center\">\r\n            <div className=\"text-3xl font-bold text-purple-600 mb-2\">\r\n              {globalStats.languagesBeingLearned}\r\n            </div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Languages</div>\r\n            <div className=\"text-xs text-orange-600 dark:text-orange-400 mt-1\">\r\n              {liveMetrics.averageAccuracy.toFixed(1)}% avg accuracy\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Top Subjects Global Ranking */}\r\n      {globalStats && (\r\n        <div className=\"card p-6\">\r\n          <h2 className=\"text-2xl font-bold mb-4 flex items-center gap-2\">\r\n            🏆 Most Popular Subjects Worldwide\r\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n          </h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\r\n            {globalStats.topSubjects.map((subject, index) => (\r\n              <div key={subject.name} className=\"text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-gray-800 dark:text-gray-200 mb-1\">\r\n                  #{index + 1}\r\n                </div>\r\n                <div className=\"font-semibold text-lg mb-2\">{subject.name}</div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  {formatNumber(subject.learners)} learners\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2 mt-2\">\r\n                  <div \r\n                    className=\"bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-300\"\r\n                    style={{ width: `${Math.max(20, 100 - index * 15)}%` }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Live Activity Dashboard */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        <RealTimeStatsCard\r\n          title=\"Live Activity Monitor\"\r\n          icon=\"📊\"\r\n          className=\"lg:col-span-1\"\r\n          showRefreshButton={true}\r\n        />\r\n        \r\n        {/* Top Performers */}\r\n        {liveMetrics && (\r\n          <div className=\"card p-6 lg:col-span-2\">\r\n            <h2 className=\"text-2xl font-bold mb-4 flex items-center gap-2\">\r\n              🌟 Top Performers Today\r\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n            </h2>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              {liveMetrics.topPerformers.map((performer, index) => (\r\n                <div key={performer.username} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className={`w-10 h-10 rounded-full flex items-center justify-center text-white font-bold ${\r\n                      index === 0 ? 'bg-gradient-to-r from-yellow-400 to-orange-500' :\r\n                      index === 1 ? 'bg-gradient-to-r from-gray-400 to-gray-600' :\r\n                      index === 2 ? 'bg-gradient-to-r from-orange-400 to-red-500' :\r\n                      'bg-gradient-to-r from-blue-400 to-purple-500'\r\n                    }`}>\r\n                      {index + 1}\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"font-semibold\">{performer.username}</div>\r\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center gap-1\">\r\n                        🌍 {performer.country}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <div className=\"font-bold text-blue-600 dark:text-blue-400\">\r\n                      {formatNumber(performer.score)}\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">XP</div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Trending Topics Section */}\r\n      <TrendingTopics\r\n        maxItems={8}\r\n        showGrowth={true}\r\n      />\r\n\r\n      {/* Market Insights Section */}\r\n      <MarketInsights\r\n        maxSkills={8}\r\n        maxIndustries={6}\r\n        showCertifications={true}\r\n      />\r\n\r\n      {/* Global Learning Insights */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <div className=\"card p-6\">\r\n          <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\r\n            📈 Learning Velocity\r\n          </h3>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Cards per minute (global)</span>\r\n              <span className=\"font-bold text-blue-600\">\r\n                {globalStats ? Math.floor(globalStats.cardsStudiedToday / (globalStats.studyTimeToday || 1)).toLocaleString() : '0'}\r\n              </span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Peak learning hour</span>\r\n              <span className=\"font-bold text-green-600\">7-9 PM UTC</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Most active timezone</span>\r\n              <span className=\"font-bold text-purple-600\">UTC+8 (Asia)</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Weekend vs Weekday</span>\r\n              <span className=\"font-bold text-orange-600\">+23% weekdays</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"card p-6\">\r\n          <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\r\n            🎯 Learning Effectiveness\r\n          </h3>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Global retention rate</span>\r\n              <span className=\"font-bold text-green-600\">\r\n                {liveMetrics ? liveMetrics.averageAccuracy.toFixed(1) : '0'}%\r\n              </span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Optimal session length</span>\r\n              <span className=\"font-bold text-blue-600\">25 minutes</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Spaced repetition usage</span>\r\n              <span className=\"font-bold text-purple-600\">78% of users</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Mobile vs Desktop</span>\r\n              <span className=\"font-bold text-orange-600\">65% mobile</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Global Learning Community */}\r\n      <div className=\"card p-6 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border border-blue-200 dark:border-blue-800\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h2 className=\"text-2xl font-bold text-blue-800 dark:text-blue-200 flex items-center gap-2\">\r\n            🌍 Global Learning Community\r\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n          </h2>\r\n        </div>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-center\">\r\n          <div>\r\n            <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n              {globalStats ? formatNumber(globalStats.totalLearners) : '2.8M+'}\r\n            </div>\r\n            <div className=\"text-sm text-blue-700 dark:text-blue-300\">Global Learners</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\r\n              {globalStats ? formatNumber(globalStats.cardsStudiedToday) : '15M+'}\r\n            </div>\r\n            <div className=\"text-sm text-green-700 dark:text-green-300\">Cards Studied Today</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\r\n              {liveMetrics ? formatNumber(liveMetrics.studyingSessions) : '23K+'}\r\n            </div>\r\n            <div className=\"text-sm text-purple-700 dark:text-purple-300\">Active Sessions</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\">\r\n              {globalStats ? globalStats.languagesBeingLearned : '127'}\r\n            </div>\r\n            <div className=\"text-sm text-orange-700 dark:text-orange-300\">Languages</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Skills in Demand */}\r\n      <div className=\"card p-6\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h2 className=\"text-2xl font-bold mb-0\">💼 Skills in Demand</h2>\r\n        </div>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\r\n          <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg text-center\">\r\n            <div className=\"text-lg font-bold text-red-600 dark:text-red-400\">🚀 AI/ML</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">+156% growth</div>\r\n          </div>\r\n          <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg text-center\">\r\n            <div className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">☁️ Cloud</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">+134% growth</div>\r\n          </div>\r\n          <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg text-center\">\r\n            <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">🔒 Security</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">+129% growth</div>\r\n          </div>\r\n          <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg text-center\">\r\n            <div className=\"text-lg font-bold text-purple-600 dark:text-purple-400\">📊 Data Science</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">+118% growth</div>\r\n          </div>\r\n          <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg text-center\">\r\n            <div className=\"text-lg font-bold text-indigo-600 dark:text-indigo-400\">🌐 DevOps</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">+112% growth</div>\r\n          </div>\r\n          <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg text-center\">\r\n            <div className=\"text-lg font-bold text-pink-600 dark:text-pink-400\">🎨 UX/UI</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">+98% growth</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Data Sources Footer */}\r\n      <div className=\"card p-6 bg-gradient-to-r from-gray-50 to-blue-50 dark:from-gray-800 dark:to-blue-900/20 border border-gray-200 dark:border-gray-700\">\r\n        <h3 className=\"text-lg font-semibold mb-3 text-gray-800 dark:text-gray-200 flex items-center gap-2\">\r\n          📡 Data Sources & Methodology\r\n        </h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-600 dark:text-gray-400\">\r\n          <div>\r\n            <div className=\"font-semibold text-gray-800 dark:text-gray-200 mb-1\">Learning Platforms</div>\r\n            <div>• Educational APIs</div>\r\n            <div>• Learning Management Systems</div>\r\n            <div>• Online Course Providers</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"font-semibold text-gray-800 dark:text-gray-200 mb-1\">Market Data</div>\r\n            <div>• Job Market APIs</div>\r\n            <div>• Skills Demand Analytics</div>\r\n            <div>• Industry Reports</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"font-semibold text-gray-800 dark:text-gray-200 mb-1\">Real-time Metrics</div>\r\n            <div>• User Activity Streams</div>\r\n            <div>• Performance Analytics</div>\r\n            <div>• Engagement Tracking</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"font-semibold text-gray-800 dark:text-gray-200 mb-1\">Update Frequency</div>\r\n            <div>• Live metrics: 10s</div>\r\n            <div>• Global stats: 30s</div>\r\n            <div>• Market data: 5m</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GlobalStatsPage","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { \r\n  LineChart, Line, BarChart, Bar, ScatterChart, Scatter, \r\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\r\n  PieChart, Pie, Cell, Area, AreaChart, RadarChart, PolarGrid, \r\n  PolarAngleAxis, PolarRadiusAxis, Radar\r\n} from 'recharts';\r\n\r\ninterface AnalyticsDashboardProps {\r\n  userId: string;\r\n  timeRange: '7d' | '30d' | '90d' | '1y';\r\n}\r\n\r\ninterface DSRMetrics {\r\n  date: string;\r\n  averageDifficulty: number;\r\n  averageStability: number;\r\n  averageRetrievability: number;\r\n  cardsReviewed: number;\r\n}\r\n\r\ninterface SessionAnalytics {\r\n  date: string;\r\n  momentum: number;\r\n  fatigue: number;\r\n  flowTime: number;\r\n  cognitiveLoad: number;\r\n  satisfaction: number;\r\n  cardsPerSession: number;\r\n  accuracy: number;\r\n}\r\n\r\ninterface LearningPattern {\r\n  timeOfDay: string;\r\n  performance: number;\r\n  confidence: number;\r\n  responseTime: number;\r\n  sessions: number;\r\n}\r\n\r\ninterface EnvironmentalInsights {\r\n  condition: string;\r\n  averagePerformance: number;\r\n  sessionCount: number;\r\n  preferenceScore: number;\r\n}\r\n\r\ninterface PersonalizationData {\r\n  optimalDifficulty: number;\r\n  optimalSessionLength: number;\r\n  bestPerformanceTimes: string[];\r\n  cognitiveLoadProfile: {\r\n    baseCapacity: number;\r\n    fatigueRate: number;\r\n    recoveryRate: number;\r\n  };\r\n  fsrsParameters: number[];\r\n}\r\n\r\nexport const AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({ userId, timeRange }) => {\r\n  const [dsrData, setDsrData] = useState<DSRMetrics[]>([]);\r\n  const [sessionData, setSessionData] = useState<SessionAnalytics[]>([]);\r\n  const [learningPatterns, setLearningPatterns] = useState<LearningPattern[]>([]);\r\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalInsights[]>([]);\r\n  const [personalizationData, setPersonalizationData] = useState<PersonalizationData | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedMetric, setSelectedMetric] = useState<'momentum' | 'difficulty' | 'cognitive'>('momentum');\r\n\r\n  // Load analytics data\r\n  useEffect(() => {\r\n    loadAnalyticsData();\r\n  }, [userId, timeRange]);\r\n\r\n  const loadAnalyticsData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // In a real implementation, these would be API calls\r\n      // For now, we'll generate sample data\r\n      setDsrData(generateSampleDSRData());\r\n      setSessionData(generateSampleSessionData());\r\n      setLearningPatterns(generateSampleLearningPatterns());\r\n      setEnvironmentalData(generateSampleEnvironmentalData());\r\n      setPersonalizationData(generateSamplePersonalizationData());\r\n    } catch (error) {\r\n      console.error('Failed to load analytics data:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Computed metrics\r\n  const insights = useMemo(() => {\r\n    if (!sessionData.length) return null;\r\n\r\n    const avgMomentum = sessionData.reduce((sum, s) => sum + s.momentum, 0) / sessionData.length;\r\n    const avgAccuracy = sessionData.reduce((sum, s) => sum + s.accuracy, 0) / sessionData.length;\r\n    const totalCardsReviewed = sessionData.reduce((sum, s) => sum + s.cardsPerSession, 0);\r\n    const avgFlowTime = sessionData.reduce((sum, s) => sum + s.flowTime, 0) / sessionData.length;\r\n    \r\n    return {\r\n      avgMomentum,\r\n      avgAccuracy,\r\n      totalCardsReviewed,\r\n      avgFlowTime,\r\n      improvementTrend: sessionData.length > 1 ? \r\n        (sessionData[sessionData.length - 1].momentum - sessionData[0].momentum) > 0 ? 'improving' : 'declining' : 'stable'\r\n    };\r\n  }, [sessionData]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Loading advanced analytics...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      {/* Header */}\r\n      <div className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold text-gray-900\">UAMS v3.0 Analytics</h1>\r\n              <p className=\"mt-1 text-sm text-gray-600\">Advanced Learning Intelligence Dashboard</p>\r\n            </div>\r\n            <div className=\"flex space-x-4\">\r\n              <select \r\n                value={timeRange} \r\n                onChange={(e) => {/* Handle time range change */}}\r\n                className=\"px-4 py-2 border border-gray-300 rounded-md bg-white\"\r\n              >\r\n                <option value=\"7d\">Last 7 days</option>\r\n                <option value=\"30d\">Last 30 days</option>\r\n                <option value=\"90d\">Last 90 days</option>\r\n                <option value=\"1y\">Last year</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Key Insights Cards */}\r\n        {insights && (\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n            <InsightCard\r\n              title=\"Average Momentum\"\r\n              value={`${(insights.avgMomentum * 100).toFixed(1)}%`}\r\n              trend={insights.improvementTrend}\r\n              color=\"blue\"\r\n            />\r\n            <InsightCard\r\n              title=\"Accuracy Rate\"\r\n              value={`${(insights.avgAccuracy * 100).toFixed(1)}%`}\r\n              trend=\"stable\"\r\n              color=\"green\"\r\n            />\r\n            <InsightCard\r\n              title=\"Cards Reviewed\"\r\n              value={insights.totalCardsReviewed.toString()}\r\n              trend=\"stable\"\r\n              color=\"purple\"\r\n            />\r\n            <InsightCard\r\n              title=\"Avg Flow Time\"\r\n              value={`${insights.avgFlowTime.toFixed(0)}min`}\r\n              trend=\"stable\"\r\n              color=\"orange\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* DSR Metrics Section */}\r\n        <section className=\"mb-12\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Memory Metrics (DSR)</h2>\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8\">\r\n            <DSRTrendsChart data={dsrData} />\r\n            <StabilityDistribution data={dsrData} />\r\n            <RetrievabilityPrediction data={dsrData} />\r\n          </div>\r\n        </section>\r\n\r\n        {/* Session Performance Section */}\r\n        <section className=\"mb-12\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Session Performance</h2>\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\r\n            <MomentumTrendsChart data={sessionData} />\r\n            <FlowStateAnalysis data={sessionData} />\r\n          </div>\r\n          <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-8\">\r\n            <CognitiveLoadPatterns data={sessionData} />\r\n            <SessionQualityMatrix data={sessionData} />\r\n          </div>\r\n        </section>\r\n\r\n        {/* Personal Learning Patterns */}\r\n        <section className=\"mb-12\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Personal Learning Patterns</h2>\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8\">\r\n            <OptimalStudyTimes data={learningPatterns} />\r\n            <EnvironmentalPreferences data={environmentalData} />\r\n            <PersonalizedInsights data={personalizationData} />\r\n          </div>\r\n        </section>\r\n\r\n        {/* Advanced Insights */}\r\n        <section className=\"mb-12\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">AI-Powered Insights</h2>\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n            <LearningRecommendations insights={insights} patterns={learningPatterns} />\r\n            <ParameterOptimizationStatus data={personalizationData} />\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Sub-components\r\n\r\nconst InsightCard: React.FC<{\r\n  title: string;\r\n  value: string;\r\n  trend: 'improving' | 'declining' | 'stable';\r\n  color: 'blue' | 'green' | 'purple' | 'orange';\r\n}> = ({ title, value, trend, color }) => {\r\n  const colorClasses = {\r\n    blue: 'bg-blue-50 text-blue-600 border-blue-200',\r\n    green: 'bg-green-50 text-green-600 border-green-200',\r\n    purple: 'bg-purple-50 text-purple-600 border-purple-200',\r\n    orange: 'bg-orange-50 text-orange-600 border-orange-200'\r\n  };\r\n\r\n  const trendIcons = {\r\n    improving: '📈',\r\n    declining: '📉',\r\n    stable: '➡️'\r\n  };\r\n\r\n  return (\r\n    <div className={`${colorClasses[color]} p-6 rounded-lg border`}>\r\n      <div className=\"flex items-center justify-between\">\r\n        <h3 className=\"text-sm font-medium\">{title}</h3>\r\n        <span className=\"text-lg\">{trendIcons[trend]}</span>\r\n      </div>\r\n      <div className=\"mt-2\">\r\n        <div className=\"text-2xl font-bold\">{value}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DSRTrendsChart: React.FC<{ data: DSRMetrics[] }> = ({ data }) => {\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">DSR Trends Over Time</h3>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis domain={[0, 10]} />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"averageDifficulty\" \r\n            stroke=\"#8884d8\" \r\n            name=\"Difficulty\" \r\n            strokeWidth={2}\r\n          />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"averageStability\" \r\n            stroke=\"#82ca9d\" \r\n            name=\"Stability\" \r\n            strokeWidth={2}\r\n          />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"averageRetrievability\" \r\n            stroke=\"#ffc658\" \r\n            name=\"Retrievability\" \r\n            strokeWidth={2}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StabilityDistribution: React.FC<{ data: DSRMetrics[] }> = ({ data }) => {\r\n  // Process data to show stability distribution\r\n  const distributionData = [\r\n    { range: '0-1 days', count: 12, fill: '#ff6b6b' },\r\n    { range: '1-7 days', count: 28, fill: '#4ecdc4' },\r\n    { range: '7-30 days', count: 45, fill: '#45b7d1' },\r\n    { range: '30+ days', count: 23, fill: '#96ceb4' }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Memory Stability Distribution</h3>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <PieChart>\r\n          <Pie\r\n            data={distributionData}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            outerRadius={80}\r\n            dataKey=\"count\"\r\n            label={({ range, percent }) => `${range}: ${(percent * 100).toFixed(0)}%`}\r\n          >\r\n            {distributionData.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={entry.fill} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RetrievabilityPrediction: React.FC<{ data: DSRMetrics[] }> = ({ data }) => {\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Retrievability Forecast</h3>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <AreaChart data={data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis domain={[0, 1]} />\r\n          <Tooltip formatter={(value) => `${(Number(value) * 100).toFixed(1)}%`} />\r\n          <Area \r\n            type=\"monotone\" \r\n            dataKey=\"averageRetrievability\" \r\n            stroke=\"#8884d8\" \r\n            fill=\"#8884d8\" \r\n            fillOpacity={0.3}\r\n          />\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MomentumTrendsChart: React.FC<{ data: SessionAnalytics[] }> = ({ data }) => {\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Momentum & Flow Trends</h3>\r\n      <ResponsiveContainer width=\"100%\" height={350}>\r\n        <LineChart data={data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis domain={[0, 1]} />\r\n          <Tooltip formatter={(value) => `${(Number(value) * 100).toFixed(1)}%`} />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"momentum\" \r\n            stroke=\"#8884d8\" \r\n            name=\"Session Momentum\" \r\n            strokeWidth={2}\r\n          />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"satisfaction\" \r\n            stroke=\"#82ca9d\" \r\n            name=\"Satisfaction\" \r\n            strokeWidth={2}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FlowStateAnalysis: React.FC<{ data: SessionAnalytics[] }> = ({ data }) => {\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Flow State Analysis</h3>\r\n      <ResponsiveContainer width=\"100%\" height={350}>\r\n        <ScatterChart data={data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"cognitiveLoad\" name=\"Cognitive Load\" />\r\n          <YAxis dataKey=\"momentum\" name=\"Momentum\" />\r\n          <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n          <Scatter \r\n            dataKey=\"flowTime\" \r\n            fill=\"#8884d8\"\r\n            name=\"Flow Time (size indicates duration)\"\r\n          />\r\n        </ScatterChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CognitiveLoadPatterns: React.FC<{ data: SessionAnalytics[] }> = ({ data }) => {\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Cognitive Load vs Fatigue</h3>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis domain={[0, 1]} />\r\n          <Tooltip formatter={(value) => `${(Number(value) * 100).toFixed(1)}%`} />\r\n          <Bar dataKey=\"cognitiveLoad\" fill=\"#8884d8\" name=\"Cognitive Load\" />\r\n          <Bar dataKey=\"fatigue\" fill=\"#82ca9d\" name=\"Fatigue\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SessionQualityMatrix: React.FC<{ data: SessionAnalytics[] }> = ({ data }) => {\r\n  const radarData = [\r\n    { subject: 'Momentum', value: 0.8, fullMark: 1 },\r\n    { subject: 'Flow Time', value: 0.7, fullMark: 1 },\r\n    { subject: 'Accuracy', value: 0.9, fullMark: 1 },\r\n    { subject: 'Satisfaction', value: 0.85, fullMark: 1 },\r\n    { subject: 'Efficiency', value: 0.75, fullMark: 1 }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Session Quality Matrix</h3>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <RadarChart data={radarData}>\r\n          <PolarGrid />\r\n          <PolarAngleAxis dataKey=\"subject\" />\r\n          <PolarRadiusAxis domain={[0, 1]} />\r\n          <Radar\r\n            name=\"Performance\"\r\n            dataKey=\"value\"\r\n            stroke=\"#8884d8\"\r\n            fill=\"#8884d8\"\r\n            fillOpacity={0.3}\r\n          />\r\n        </RadarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst OptimalStudyTimes: React.FC<{ data: LearningPattern[] }> = ({ data }) => {\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Optimal Study Times</h3>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"timeOfDay\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Bar dataKey=\"performance\" fill=\"#8884d8\" name=\"Performance Score\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EnvironmentalPreferences: React.FC<{ data: EnvironmentalInsights[] }> = ({ data }) => {\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Environmental Performance</h3>\r\n      <div className=\"space-y-4\">\r\n        {data.map((item, index) => (\r\n          <div key={index} className=\"flex items-center justify-between\">\r\n            <span className=\"text-sm font-medium\">{item.condition}</span>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"w-24 bg-gray-200 rounded-full h-2\">\r\n                <div \r\n                  className=\"bg-blue-500 h-2 rounded-full\"\r\n                  style={{ width: `${item.averagePerformance * 100}%` }}\r\n                />\r\n              </div>\r\n              <span className=\"text-sm text-gray-600\">\r\n                {(item.averagePerformance * 100).toFixed(0)}%\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PersonalizedInsights: React.FC<{ data: PersonalizationData | null }> = ({ data }) => {\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">AI Personalization Profile</h3>\r\n      <div className=\"space-y-3\">\r\n        <div className=\"flex justify-between\">\r\n          <span className=\"text-sm text-gray-600\">Optimal Difficulty</span>\r\n          <span className=\"font-medium\">{data.optimalDifficulty.toFixed(1)}/10</span>\r\n        </div>\r\n        <div className=\"flex justify-between\">\r\n          <span className=\"text-sm text-gray-600\">Optimal Session Length</span>\r\n          <span className=\"font-medium\">{data.optimalSessionLength}min</span>\r\n        </div>\r\n        <div className=\"flex justify-between\">\r\n          <span className=\"text-sm text-gray-600\">Cognitive Capacity</span>\r\n          <span className=\"font-medium\">{(data.cognitiveLoadProfile.baseCapacity * 100).toFixed(0)}%</span>\r\n        </div>\r\n        <div className=\"mt-4\">\r\n          <span className=\"text-sm text-gray-600 block mb-2\">Best Study Times</span>\r\n          <div className=\"flex flex-wrap gap-1\">\r\n            {data.bestPerformanceTimes.map((time, idx) => (\r\n              <span key={idx} className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs\">\r\n                {time}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LearningRecommendations: React.FC<{ \r\n  insights: any; \r\n  patterns: LearningPattern[] \r\n}> = ({ insights, patterns }) => {\r\n  const recommendations = [\r\n    \"Your momentum peaks around 2-4 PM. Schedule challenging reviews during this window.\",\r\n    \"Consider shorter sessions (20-25 min) to maintain optimal cognitive load.\",\r\n    \"Desktop sessions show 15% better performance than mobile - use for difficult cards.\",\r\n    \"Quiet environments improve your accuracy by 12%. Find a distraction-free space.\",\r\n    \"Your FSRS parameters are 85% optimized. Continue current study pattern for best results.\"\r\n  ];\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">AI Recommendations</h3>\r\n      <div className=\"space-y-3\">\r\n        {recommendations.map((rec, index) => (\r\n          <div key={index} className=\"flex items-start space-x-3\">\r\n            <span className=\"flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-medium\">\r\n              {index + 1}\r\n            </span>\r\n            <p className=\"text-sm text-gray-700\">{rec}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ParameterOptimizationStatus: React.FC<{ data: PersonalizationData | null }> = ({ data }) => {\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">FSRS Parameter Optimization</h3>\r\n      <div className=\"space-y-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <span className=\"text-sm text-gray-600\">Optimization Progress</span>\r\n          <span className=\"font-medium text-green-600\">87% Complete</span>\r\n        </div>\r\n        <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n          <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '87%' }}></div>\r\n        </div>\r\n        <div className=\"text-xs text-gray-500 space-y-1\">\r\n          <div>• Parameters updated based on 1,247 reviews</div>\r\n          <div>• Accuracy improved by 12% since last optimization</div>\r\n          <div>• Next optimization: 150 more reviews needed</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Sample data generators (replace with actual API calls)\r\nconst generateSampleDSRData = (): DSRMetrics[] => {\r\n  return Array.from({ length: 30 }, (_, i) => ({\r\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toLocaleDateString(),\r\n    averageDifficulty: 4.5 + Math.sin(i / 5) * 1.5,\r\n    averageStability: 8 + Math.cos(i / 7) * 3,\r\n    averageRetrievability: 0.7 + Math.sin(i / 3) * 0.2,\r\n    cardsReviewed: 15 + Math.floor(Math.random() * 20)\r\n  }));\r\n};\r\n\r\nconst generateSampleSessionData = (): SessionAnalytics[] => {\r\n  return Array.from({ length: 30 }, (_, i) => ({\r\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toLocaleDateString(),\r\n    momentum: 0.6 + Math.sin(i / 4) * 0.3,\r\n    fatigue: 0.3 + Math.random() * 0.4,\r\n    flowTime: 15 + Math.random() * 20,\r\n    cognitiveLoad: 0.5 + Math.random() * 0.3,\r\n    satisfaction: 0.7 + Math.sin(i / 6) * 0.2,\r\n    cardsPerSession: 20 + Math.floor(Math.random() * 15),\r\n    accuracy: 0.75 + Math.random() * 0.2\r\n  }));\r\n};\r\n\r\nconst generateSampleLearningPatterns = (): LearningPattern[] => {\r\n  const hours = Array.from({ length: 24 }, (_, i) => i);\r\n  return hours.map(hour => ({\r\n    timeOfDay: `${hour}:00`,\r\n    performance: 0.3 + (Math.sin((hour - 6) * Math.PI / 12) + 1) * 0.35,\r\n    confidence: 0.5 + Math.random() * 0.3,\r\n    responseTime: 3000 + Math.random() * 4000,\r\n    sessions: Math.floor(Math.random() * 10)\r\n  }));\r\n};\r\n\r\nconst generateSampleEnvironmentalData = (): EnvironmentalInsights[] => {\r\n  return [\r\n    { condition: 'Desktop + Quiet', averagePerformance: 0.89, sessionCount: 45, preferenceScore: 0.9 },\r\n    { condition: 'Desktop + Moderate Noise', averagePerformance: 0.82, sessionCount: 32, preferenceScore: 0.7 },\r\n    { condition: 'Mobile + Quiet', averagePerformance: 0.76, sessionCount: 28, preferenceScore: 0.6 },\r\n    { condition: 'Mobile + Noisy', averagePerformance: 0.68, sessionCount: 15, preferenceScore: 0.4 },\r\n    { condition: 'Tablet + Optimal Light', averagePerformance: 0.84, sessionCount: 20, preferenceScore: 0.8 }\r\n  ];\r\n};\r\n\r\nconst generateSamplePersonalizationData = (): PersonalizationData => {\r\n  return {\r\n    optimalDifficulty: 6.2,\r\n    optimalSessionLength: 25,\r\n    bestPerformanceTimes: ['9:00-11:00', '14:00-16:00'],\r\n    cognitiveLoadProfile: {\r\n      baseCapacity: 0.85,\r\n      fatigueRate: 0.02,\r\n      recoveryRate: 0.05\r\n    },\r\n    fsrsParameters: Array.from({ length: 21 }, () => Math.random() * 5)\r\n  };\r\n};\r\n\r\nexport default AnalyticsDashboard;","import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { UnifiedQueueManager } from '../services/unifiedQueueManager';\r\nimport { EnvironmentalContextService } from '../services/environmental/environmentalContextService';\r\nimport { \r\n  UnifiedSessionState, \r\n  CardSelectionResult, \r\n  EnhancedResponseLog, \r\n  FlowStateMetrics,\r\n  CognitiveLoadAnalysis\r\n} from '../../../shared/types/enhanced-types';\r\n\r\ninterface EnhancedReviewPageProps {\r\n  deckId: string;\r\n  userId: string;\r\n}\r\n\r\ninterface SessionMetrics {\r\n  cardsReviewed: number;\r\n  accuracy: number;\r\n  averageResponseTime: number;\r\n  sessionDuration: number;\r\n}\r\n\r\nconst RATING_DESCRIPTIONS = {\r\n  'again': { label: 'Again', color: 'bg-red-500', description: 'I need to review this again' },\r\n  'hard': { label: 'Hard', color: 'bg-orange-500', description: 'It was difficult but I got it' },\r\n  'good': { label: 'Good', color: 'bg-green-500', description: 'Good, normal effort' },\r\n  'easy': { label: 'Easy', color: 'bg-blue-500', description: 'Easy, no effort required' }\r\n};\r\n\r\nexport const EnhancedReviewPage: React.FC<EnhancedReviewPageProps> = ({ deckId, userId }) => {\r\n  // Core state\r\n  const [sessionState, setSessionState] = useState<UnifiedSessionState | null>(null);\r\n  const [currentCard, setCurrentCard] = useState<CardSelectionResult | null>(null);\r\n  const [responseStartTime, setResponseStartTime] = useState<number>(0);\r\n  const [sessionMetrics, setSessionMetrics] = useState<SessionMetrics>({\r\n    cardsReviewed: 0,\r\n    accuracy: 0,\r\n    averageResponseTime: 0,\r\n    sessionDuration: 0\r\n  });\r\n  \r\n  // UI state\r\n  const [showExplanation, setShowExplanation] = useState(false);\r\n  const [showAnswer, setShowAnswer] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showMetricsPanel, setShowMetricsPanel] = useState(true);\r\n  const [showCognitiveLoadDetail, setShowCognitiveLoadDetail] = useState(false);\r\n  \r\n  // Advanced state\r\n  const [cognitiveLoadAnalysis, setCognitiveLoadAnalysis] = useState<CognitiveLoadAnalysis | null>(null);\r\n  const [environmentalAdaptations, setEnvironmentalAdaptations] = useState<any>(null);\r\n  \r\n  // Services\r\n  const queueManagerRef = useRef(new UnifiedQueueManager());\r\n  const environmentalServiceRef = useRef(new EnvironmentalContextService());\r\n  const intervalRef = useRef<NodeJS.Timeout>();\r\n  \r\n  const queueManager = queueManagerRef.current;\r\n  const environmentalService = environmentalServiceRef.current;\r\n\r\n  /**\r\n   * Initialize session\r\n   */\r\n  useEffect(() => {\r\n    const initializeSession = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        console.log('Initializing UAMS v3.0 session...');\r\n        \r\n        const newSession = await queueManager.initializeSession(userId, deckId);\r\n        setSessionState(newSession);\r\n        \r\n        const firstCard = await queueManager.getNextCard(newSession);\r\n        setCurrentCard(firstCard);\r\n        setResponseStartTime(Date.now());\r\n        \r\n        // Start environmental monitoring\r\n        await startEnvironmentalMonitoring();\r\n        \r\n        console.log('Session initialized successfully');\r\n      } catch (err) {\r\n        console.error('Failed to initialize session:', err);\r\n        setError(err instanceof Error ? err.message : 'Failed to initialize session');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeSession();\r\n\r\n    // Cleanup\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, [userId, deckId]);\r\n\r\n  /**\r\n   * Start environmental context monitoring\r\n   */\r\n  const startEnvironmentalMonitoring = async () => {\r\n    try {\r\n      const context = await environmentalService.getCurrentContext();\r\n      const adaptations = environmentalService.getEnvironmentalAdaptations(context);\r\n      setEnvironmentalAdaptations(adaptations);\r\n      \r\n      // Set up periodic context monitoring\r\n      intervalRef.current = setInterval(async () => {\r\n        await environmentalService.trackContextChanges();\r\n      }, 30000); // Check every 30 seconds\r\n      \r\n      // Listen for context changes\r\n      environmentalService.onContextChange = (current, previous) => {\r\n        console.log('Environmental context changed:', { current, previous });\r\n        const newAdaptations = environmentalService.getEnvironmentalAdaptations(current);\r\n        setEnvironmentalAdaptations(newAdaptations);\r\n      };\r\n    } catch (error) {\r\n      console.warn('Environmental monitoring setup failed:', error);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle card response\r\n   */\r\n  const handleCardResponse = useCallback(async (rating: 'again' | 'hard' | 'good' | 'easy') => {\r\n    if (!sessionState || !currentCard) return;\r\n    \r\n    try {\r\n      const responseTime = Date.now() - responseStartTime;\r\n      const environmentalContext = await environmentalService.getCurrentContext();\r\n      \r\n      const enhancedResponse: EnhancedResponseLog = {\r\n        timestamp: new Date().toISOString(),\r\n        rating,\r\n        responseTime,\r\n        contextualFactors: {\r\n          sessionTime: Date.now() - new Date(sessionState.sessionStartTime).getTime(),\r\n          timeOfDay: new Date().toISOString(),\r\n          sessionFatigueIndex: sessionState.sessionFatigueIndex,\r\n          cognitiveLoadAtTime: sessionState.cognitiveLoadCapacity,\r\n          environmentalFactors: environmentalContext\r\n        },\r\n        momentumImpact: calculateMomentumImpact(rating, sessionState),\r\n        confidenceChange: calculateConfidenceChange(rating, currentCard.card),\r\n        previousCardSimilarity: 0.0, // Would be calculated based on content\r\n        clusteringContext: 'general'\r\n      };\r\n      \r\n      console.log('Processing response:', { rating, responseTime, cardId: currentCard.card.id });\r\n      \r\n      // Process response and update session\r\n      const updatedSession = await queueManager.processCardResponse(\r\n        sessionState,\r\n        currentCard.card.id,\r\n        enhancedResponse\r\n      );\r\n      \r\n      setSessionState(updatedSession);\r\n      \r\n      // Update session metrics\r\n      updateSessionMetrics(rating, responseTime);\r\n      \r\n      // Get next card\r\n      const nextCard = await queueManager.getNextCard(updatedSession);\r\n      setCurrentCard(nextCard);\r\n      setResponseStartTime(Date.now());\r\n      setShowAnswer(false);\r\n      \r\n    } catch (err) {\r\n      console.error('Error processing response:', err);\r\n      setError('Failed to process your response. Please try again.');\r\n    }\r\n  }, [sessionState, currentCard, responseStartTime]);\r\n\r\n  /**\r\n   * Update session metrics\r\n   */\r\n  const updateSessionMetrics = (rating: string, responseTime: number) => {\r\n    setSessionMetrics(prev => {\r\n      const isCorrect = rating !== 'again';\r\n      const newCardsReviewed = prev.cardsReviewed + 1;\r\n      const newCorrectAnswers = isCorrect ? (prev.accuracy * prev.cardsReviewed + 1) : (prev.accuracy * prev.cardsReviewed);\r\n      const newAccuracy = newCorrectAnswers / newCardsReviewed;\r\n      const newAverageResponseTime = ((prev.averageResponseTime * prev.cardsReviewed) + responseTime) / newCardsReviewed;\r\n      \r\n      return {\r\n        cardsReviewed: newCardsReviewed,\r\n        accuracy: newAccuracy,\r\n        averageResponseTime: newAverageResponseTime,\r\n        sessionDuration: sessionState ? Date.now() - new Date(sessionState.sessionStartTime).getTime() : 0\r\n      };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Show answer\r\n   */\r\n  const handleShowAnswer = () => {\r\n    setShowAnswer(true);\r\n  };\r\n\r\n  /**\r\n   * Handle keyboard shortcuts\r\n   */\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      if (!showAnswer) {\r\n        if (e.code === 'Space' || e.code === 'Enter') {\r\n          e.preventDefault();\r\n          handleShowAnswer();\r\n        }\r\n        return;\r\n      }\r\n      \r\n      // Response shortcuts (when answer is shown)\r\n      switch (e.key) {\r\n        case '1':\r\n          e.preventDefault();\r\n          handleCardResponse('again');\r\n          break;\r\n        case '2':\r\n          e.preventDefault();\r\n          handleCardResponse('hard');\r\n          break;\r\n        case '3':\r\n          e.preventDefault();\r\n          handleCardResponse('good');\r\n          break;\r\n        case '4':\r\n          e.preventDefault();\r\n          handleCardResponse('easy');\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => window.removeEventListener('keydown', handleKeyPress);\r\n  }, [showAnswer, handleCardResponse]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Initializing UAMS v3.0 session...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-red-100 flex items-center justify-center\">\r\n        <div className=\"text-center p-8 bg-white rounded-lg shadow-lg max-w-md\">\r\n          <div className=\"text-red-500 text-5xl mb-4\">⚠️</div>\r\n          <h2 className=\"text-xl font-semibold text-red-700 mb-2\">Session Error</h2>\r\n          <p className=\"text-red-600 mb-4\">{error}</p>\r\n          <button \r\n            onClick={() => window.location.reload()}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n          >\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\r\n      {/* Header with Session Metrics */}\r\n      {showMetricsPanel && (\r\n        <SessionMetricsHeader \r\n          sessionState={sessionState} \r\n          sessionMetrics={sessionMetrics}\r\n          environmentalAdaptations={environmentalAdaptations}\r\n          onToggleCognitiveDetail={() => setShowCognitiveLoadDetail(!showCognitiveLoadDetail)}\r\n        />\r\n      )}\r\n      \r\n      {/* Cognitive Load Detail Panel */}\r\n      {showCognitiveLoadDetail && cognitiveLoadAnalysis && (\r\n        <CognitiveLoadDetailPanel analysis={cognitiveLoadAnalysis} />\r\n      )}\r\n      \r\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\r\n        {/* Main Card Display */}\r\n        <div className=\"bg-white rounded-xl shadow-lg p-8 mb-6\">\r\n          {currentCard && (\r\n            <CardDisplay \r\n              card={currentCard.card} \r\n              showAnswer={showAnswer}\r\n              onShowAnswer={handleShowAnswer}\r\n            />\r\n          )}\r\n        </div>\r\n        \r\n        {/* Response Buttons */}\r\n        {showAnswer && currentCard && (\r\n          <ResponseButtons \r\n            onResponse={handleCardResponse}\r\n            disabled={!showAnswer}\r\n          />\r\n        )}\r\n        \r\n        {/* Explanation Panel */}\r\n        {showExplanation && currentCard && (\r\n          <ExplanationPanel \r\n            explanation={currentCard.explanation}\r\n            reasoning={currentCard.reasoning}\r\n            confidence={currentCard.confidence}\r\n            sessionState={sessionState}\r\n          />\r\n        )}\r\n        \r\n        {/* Flow State Indicator */}\r\n        <FlowStateIndicator sessionState={sessionState} />\r\n        \r\n        {/* Session Controls */}\r\n        <SessionControls \r\n          sessionState={sessionState}\r\n          showMetricsPanel={showMetricsPanel}\r\n          showExplanation={showExplanation}\r\n          onToggleMetrics={() => setShowMetricsPanel(!showMetricsPanel)}\r\n          onToggleExplanation={() => setShowExplanation(!showExplanation)}\r\n          onEndSession={() => {/* Implement session end */}}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Sub-components\r\n\r\nconst SessionMetricsHeader: React.FC<{\r\n  sessionState: UnifiedSessionState | null;\r\n  sessionMetrics: SessionMetrics;\r\n  environmentalAdaptations: any;\r\n  onToggleCognitiveDetail: () => void;\r\n}> = ({ sessionState, sessionMetrics, environmentalAdaptations, onToggleCognitiveDetail }) => {\r\n  if (!sessionState) return null;\r\n  \r\n  const formatDuration = (ms: number) => {\r\n    const minutes = Math.floor(ms / 60000);\r\n    const seconds = Math.floor((ms % 60000) / 1000);\r\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 text-sm\">\r\n          {/* Momentum */}\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\r\n            <span className=\"font-medium\">Momentum</span>\r\n            <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\r\n              <div \r\n                className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\r\n                style={{ width: `${sessionState.sessionMomentumScore * 100}%` }}\r\n              />\r\n            </div>\r\n            <span className=\"text-xs font-mono\">\r\n              {(sessionState.sessionMomentumScore * 100).toFixed(0)}%\r\n            </span>\r\n          </div>\r\n          \r\n          {/* Energy */}\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\r\n            <span className=\"font-medium\">Energy</span>\r\n            <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\r\n              <div \r\n                className=\"bg-green-500 h-2 rounded-full transition-all duration-300\"\r\n                style={{ width: `${(1 - sessionState.sessionFatigueIndex) * 100}%` }}\r\n              />\r\n            </div>\r\n            <span className=\"text-xs font-mono\">\r\n              {((1 - sessionState.sessionFatigueIndex) * 100).toFixed(0)}%\r\n            </span>\r\n          </div>\r\n          \r\n          {/* Cognitive Load */}\r\n          <button \r\n            onClick={onToggleCognitiveDetail}\r\n            className=\"flex items-center space-x-2 hover:bg-gray-50 rounded px-2 py-1\"\r\n          >\r\n            <div className=\"w-3 h-3 bg-purple-500 rounded-full\"></div>\r\n            <span className=\"font-medium\">Cognitive</span>\r\n            <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\r\n              <div \r\n                className=\"bg-purple-500 h-2 rounded-full transition-all duration-300\"\r\n                style={{ width: `${sessionState.cognitiveLoadCapacity * 100}%` }}\r\n              />\r\n            </div>\r\n            <span className=\"text-xs font-mono\">\r\n              {(sessionState.cognitiveLoadCapacity * 100).toFixed(0)}%\r\n            </span>\r\n          </button>\r\n          \r\n          {/* Session Stats */}\r\n          <div className=\"flex items-center space-x-4 text-xs\">\r\n            <span><strong>{sessionMetrics.cardsReviewed}</strong> cards</span>\r\n            <span><strong>{(sessionMetrics.accuracy * 100).toFixed(0)}%</strong> accuracy</span>\r\n          </div>\r\n          \r\n          {/* Duration */}\r\n          <div className=\"flex items-center space-x-2 text-xs\">\r\n            <span className=\"font-medium\">Duration:</span>\r\n            <span className=\"font-mono\">{formatDuration(sessionMetrics.sessionDuration)}</span>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Flow State Indicator */}\r\n        <div className=\"mt-3 flex items-center justify-between\">\r\n          <FlowStateIndicator sessionState={sessionState} />\r\n          \r\n          {environmentalAdaptations && (\r\n            <EnvironmentalIndicator adaptations={environmentalAdaptations} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CardDisplay: React.FC<{\r\n  card: any;\r\n  showAnswer: boolean;\r\n  onShowAnswer: () => void;\r\n}> = ({ card, showAnswer, onShowAnswer }) => {\r\n  return (\r\n    <div className=\"text-center\">\r\n      {/* Front Content */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"prose prose-lg mx-auto\">\r\n          <div dangerouslySetInnerHTML={{ __html: card.frontContent }} />\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Show Answer Button or Back Content */}\r\n      {!showAnswer ? (\r\n        <button\r\n          onClick={onShowAnswer}\r\n          className=\"px-8 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors text-lg font-medium\"\r\n        >\r\n          Show Answer\r\n        </button>\r\n      ) : (\r\n        <div className=\"border-t pt-8\">\r\n          <div className=\"prose prose-lg mx-auto\">\r\n            <div dangerouslySetInnerHTML={{ __html: card.backContent }} />\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"mt-4 text-sm text-gray-500 space-x-4\">\r\n        <span>Difficulty: {card.difficulty?.toFixed(1) || 'N/A'}</span>\r\n        <span>•</span>\r\n        <span>Success Rate: {((card.retrievability || 0.5) * 100).toFixed(0)}%</span>\r\n        <span>•</span>\r\n        <span>Confidence: {card.confidenceLevel || 'Unknown'}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ResponseButtons: React.FC<{\r\n  onResponse: (rating: 'again' | 'hard' | 'good' | 'easy') => void;\r\n  disabled: boolean;\r\n}> = ({ onResponse, disabled }) => {\r\n  return (\r\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\r\n      {Object.entries(RATING_DESCRIPTIONS).map(([rating, config]) => (\r\n        <button\r\n          key={rating}\r\n          onClick={() => onResponse(rating as any)}\r\n          disabled={disabled}\r\n          className={`\r\n            p-4 rounded-lg text-white font-medium transition-all duration-200\r\n            ${config.color} hover:scale-105 hover:shadow-lg\r\n            disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100\r\n          `}\r\n        >\r\n          <div className=\"text-lg mb-1\">{config.label}</div>\r\n          <div className=\"text-xs opacity-90\">{config.description}</div>\r\n          <div className=\"text-xs mt-2 opacity-75\">\r\n            Press {Object.keys(RATING_DESCRIPTIONS).indexOf(rating) + 1}\r\n          </div>\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FlowStateIndicator: React.FC<{ sessionState: UnifiedSessionState | null }> = ({ sessionState }) => {\r\n  if (!sessionState) return null;\r\n  \r\n  const { challengeSkillBalance, engagementLevel, momentumMaintenance } = sessionState.flowStateMetrics;\r\n  \r\n  const getFlowZone = (balance: number): { zone: string; color: string } => {\r\n    if (balance < 0.3) return { zone: 'Bored', color: 'text-yellow-600' };\r\n    if (balance > 0.7) return { zone: 'Anxious', color: 'text-red-600' };\r\n    return { zone: 'Flow Zone', color: 'text-green-600' };\r\n  };\r\n  \r\n  const flowZone = getFlowZone(challengeSkillBalance);\r\n  \r\n  return (\r\n    <div className=\"flex items-center space-x-4 text-sm\">\r\n      <div className={`font-medium ${flowZone.color}`}>\r\n        {flowZone.zone}\r\n      </div>\r\n      <div className=\"text-gray-600\">\r\n        Engagement: {(engagementLevel * 100).toFixed(0)}%\r\n      </div>\r\n      {momentumMaintenance && (\r\n        <div className=\"text-green-600\">✓ Optimal Learning</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EnvironmentalIndicator: React.FC<{ adaptations: any }> = ({ adaptations }) => {\r\n  if (!adaptations) return null;\r\n  \r\n  return (\r\n    <div className=\"flex items-center space-x-2 text-xs text-gray-600\">\r\n      {adaptations.difficultyAdjustment !== 0 && (\r\n        <span className={`px-2 py-1 rounded ${\r\n          adaptations.difficultyAdjustment > 0 ? 'bg-orange-100 text-orange-700' : 'bg-blue-100 text-blue-700'\r\n        }`}>\r\n          Difficulty {adaptations.difficultyAdjustment > 0 ? '+' : ''}{adaptations.difficultyAdjustment.toFixed(1)}\r\n        </span>\r\n      )}\r\n      {adaptations.visualOptimizations.colorScheme !== 'auto' && (\r\n        <span className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded\">\r\n          {adaptations.visualOptimizations.colorScheme} mode\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ExplanationPanel: React.FC<{\r\n  explanation: string;\r\n  reasoning: string;\r\n  confidence: number;\r\n  sessionState: UnifiedSessionState | null;\r\n}> = ({ explanation, reasoning, confidence, sessionState }) => {\r\n  return (\r\n    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6\">\r\n      <h4 className=\"text-lg font-semibold text-blue-900 mb-3\">Why this card?</h4>\r\n      <p className=\"text-blue-800 mb-4\">{explanation}</p>\r\n      \r\n      <div className=\"flex items-center justify-between text-sm\">\r\n        <div className=\"flex space-x-4\">\r\n          <span className=\"px-3 py-1 bg-blue-200 text-blue-800 rounded-full\">\r\n            {reasoning.replace('_', ' ')}\r\n          </span>\r\n          <span className=\"text-blue-700\">\r\n            Confidence: {(confidence * 100).toFixed(0)}%\r\n          </span>\r\n        </div>\r\n        \r\n        {sessionState && (\r\n          <div className=\"text-blue-600 text-xs\">\r\n            Queue: {sessionState.lookaheadBuffer.length} cards ahead\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CognitiveLoadDetailPanel: React.FC<{ analysis: CognitiveLoadAnalysis }> = ({ analysis }) => {\r\n  return (\r\n    <div className=\"bg-purple-50 border-b border-purple-200 px-6 py-4\">\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        <h3 className=\"text-lg font-semibold text-purple-900 mb-3\">Cognitive Load Analysis</h3>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-sm\">\r\n          <div>\r\n            <h4 className=\"font-medium text-purple-800 mb-2\">Current Status</h4>\r\n            <div className=\"space-y-1 text-purple-700\">\r\n              <div>Load: {(analysis.currentLoad * 100).toFixed(0)}%</div>\r\n              <div>Capacity: {(analysis.capacity * 100).toFixed(0)}%</div>\r\n              <div>Utilization: {(analysis.utilizationRate * 100).toFixed(0)}%</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div>\r\n            <h4 className=\"font-medium text-purple-800 mb-2\">Predictions</h4>\r\n            <div className=\"space-y-1 text-purple-700\">\r\n              <div>Attention Remaining: {analysis.attentionRemainingMinutes.toFixed(0)}min</div>\r\n              <div>Sustainability: {(analysis.sustainabilityScore * 100).toFixed(0)}%</div>\r\n              <div className={`font-medium ${\r\n                analysis.alertLevel === 'red' ? 'text-red-600' :\r\n                analysis.alertLevel === 'orange' ? 'text-orange-600' :\r\n                analysis.alertLevel === 'yellow' ? 'text-yellow-600' : 'text-green-600'\r\n              }`}>\r\n                Status: {analysis.alertLevel.toUpperCase()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div>\r\n            <h4 className=\"font-medium text-purple-800 mb-2\">Recommendations</h4>\r\n            <div className=\"text-xs text-purple-600 space-y-1\">\r\n              {analysis.recommendations.slice(0, 3).map((rec, idx) => (\r\n                <div key={idx}>• {rec}</div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SessionControls: React.FC<{\r\n  sessionState: UnifiedSessionState | null;\r\n  showMetricsPanel: boolean;\r\n  showExplanation: boolean;\r\n  onToggleMetrics: () => void;\r\n  onToggleExplanation: () => void;\r\n  onEndSession: () => void;\r\n}> = ({ sessionState, showMetricsPanel, showExplanation, onToggleMetrics, onToggleExplanation, onEndSession }) => {\r\n  return (\r\n    <div className=\"fixed bottom-6 right-6 flex flex-col space-y-2\">\r\n      <button\r\n        onClick={onToggleMetrics}\r\n        className=\"px-4 py-2 bg-white rounded-full shadow-lg hover:shadow-xl transition-shadow text-sm font-medium\"\r\n      >\r\n        {showMetricsPanel ? 'Hide' : 'Show'} Metrics\r\n      </button>\r\n      \r\n      <button\r\n        onClick={onToggleExplanation}\r\n        className=\"px-4 py-2 bg-white rounded-full shadow-lg hover:shadow-xl transition-shadow text-sm font-medium\"\r\n      >\r\n        {showExplanation ? 'Hide' : 'Show'} AI Reasoning\r\n      </button>\r\n      \r\n      <button\r\n        onClick={onEndSession}\r\n        className=\"px-4 py-2 bg-red-500 text-white rounded-full shadow-lg hover:shadow-xl transition-shadow text-sm font-medium\"\r\n      >\r\n        End Session\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper functions\r\nconst calculateMomentumImpact = (rating: string, sessionState: UnifiedSessionState): number => {\r\n  const baseImpact = { 'again': -0.2, 'hard': -0.05, 'good': 0.1, 'easy': 0.15 };\r\n  return baseImpact[rating as keyof typeof baseImpact] || 0;\r\n};\r\n\r\nconst calculateConfidenceChange = (rating: string, card: any): number => {\r\n  const baseChange = { 'again': -0.1, 'hard': -0.02, 'good': 0.05, 'easy': 0.08 };\r\n  return baseChange[rating as keyof typeof baseChange] || 0;\r\n};\r\n\r\nconst getCurrentUserId = (): string => {\r\n  // This would get the current user ID from your auth system\r\n  return 'user-123';\r\n};\r\n\r\nconst getCurrentDeckId = (): string => {\r\n  // This would get the current deck ID from your routing/state\r\n  return 'deck-456';\r\n};\r\n\r\nexport default EnhancedReviewPage;","import { useNavigate } from 'react-router-dom';\n\nfunction ResetPasswordPage() {\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white\">\n            Password Reset\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600 dark:text-gray-400\">\n            Password reset functionality will be implemented with PocketBase integration.\n          </p>\n        </div>\n        \n        <div className=\"rounded-md shadow-sm space-y-4\">\n          <button\n            onClick={() => navigate('/')}\n            className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            Back to Home\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ResetPasswordPage;","import { Routes, Route, Navigate } from 'react-router-dom'\r\nimport { useAuthStore } from './stores/authStore'\r\nimport Layout from './components/layout/Layout'\r\nimport HomePage from './pages/HomePage'\r\nimport StudyPage from './pages/StudyPage'\r\nimport DecksPage from './pages/DecksPage'\r\nimport ProfilePage from './pages/ProfilePage'\r\nimport ChallengesPage from './pages/ChallengesPage'\r\nimport LeaderboardPage from './pages/LeaderboardPage'\r\nimport GlobalStatsPage from './pages/GlobalStatsPage'\r\nimport AnalyticsDashboard from './pages/AnalyticsDashboard'\r\nimport EnhancedReviewPage from './pages/EnhancedReviewPage'\r\nimport TestResetPage from './pages/TestResetPage'\r\nimport ResetPasswordPage from './pages/ResetPasswordPage'\r\nimport MapTestPage from './pages/MapTestPage'\r\nimport DebugLogTestPage from './pages/DebugLogTestPage'\r\n\r\n// Development/testing pages - can be removed in production\r\nconst isDev = import.meta.env.DEV\r\n\r\nfunction App() {\r\n  const { isAuthenticated } = useAuthStore()\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Layout />}>\r\n        <Route index element={<HomePage />} />\r\n        <Route \r\n          path=\"/study/:deckId\" \r\n          element={isAuthenticated ? <StudyPage /> : <Navigate to=\"/\" replace />} \r\n        />\r\n        <Route \r\n          path=\"/enhanced-review/:deckId\" \r\n          element={isAuthenticated ? <EnhancedReviewPage /> : <Navigate to=\"/\" replace />} \r\n        />\r\n        <Route \r\n          path=\"/decks\" \r\n          element={isAuthenticated ? <DecksPage /> : <Navigate to=\"/\" replace />} \r\n        />\r\n        <Route \r\n          path=\"/profile\" \r\n          element={isAuthenticated ? <ProfilePage /> : <Navigate to=\"/\" replace />} \r\n        />\r\n        <Route \r\n          path=\"/challenges\" \r\n          element={isAuthenticated ? <ChallengesPage /> : <Navigate to=\"/\" replace />} \r\n        />\r\n        <Route \r\n          path=\"/leaderboard\" \r\n          element={<LeaderboardPage />} \r\n        />\r\n        <Route \r\n          path=\"/stats\" \r\n          element={<GlobalStatsPage />} \r\n        />\r\n        <Route \r\n          path=\"/analytics\" \r\n          element={isAuthenticated ? <AnalyticsDashboard /> : <Navigate to=\"/\" replace />} \r\n        />\r\n        <Route \r\n          path=\"/reset-password\" \r\n          element={<ResetPasswordPage />} \r\n        />\r\n        \r\n        {/* Development/Testing Routes */}\r\n        {isDev && (\r\n          <>\r\n            <Route path=\"/test/reset\" element={<TestResetPage />} />\r\n            <Route path=\"/test/map\" element={<MapTestPage />} />\r\n            <Route path=\"/test/debug\" element={<DebugLogTestPage />} />\r\n          </>\r\n        )}\r\n        \r\n        {/* Catch all route */}\r\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\r\n      </Route>\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App.tsx'\r\nimport './index.css'\r\n\r\n// PWA functionality is handled by Vite PWA plugin\r\n\r\n// Create a client for React Query\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      staleTime: 1000 * 60 * 5, // 5 minutes\r\n      cacheTime: 1000 * 60 * 30, // 30 minutes\r\n      retry: 2,\r\n      refetchOnWindowFocus: false,\r\n    },\r\n  },\r\n})\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n    <QueryClientProvider client={queryClient}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </QueryClientProvider>\r\n  </React.StrictMode>,\r\n)"],"names":["Navbar","onMenuClick","theme","toggleTheme","useThemeStore","user","logout","useAuthStore","jsx","className","children","jsxs","onClick","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","username","level","title","Sidebar","isOpen","onClose","userStats","useGamificationStore","navigation","name","href","icon","formatNumber","num","toFixed","toString","xpForCurrentLevel","xpForNextLevel","progressPercentage","xp","map","item","NavLink","to","isActive","currentStreak","style","width","Math","min","max","AuthModal","mode","onModeChange","email","setEmail","useState","setUsername","password","setPassword","login","register","isLoading","error","clearError","isAuthenticated","resetEmailSent","setResetEmailSent","useEffect","handleModeChange","newMode","handleSubmit","async","e","preventDefault","alert","console","log","timestamp","Date","toISOString","handleDemoLogin","signIn","onSubmit","type","placeholder","value","onChange","target","required","disabled","Fragment","Layout","memo","sidebarOpen","setSidebarOpen","authModalOpen","setAuthModalOpen","authMode","setAuthMode","handleMenuClick","useCallback","handleSidebarClose","handleSignIn","handleCreateAccount","handleAuthModalClose","handleAuthModeChange","Outlet","displayName","HomePage","navigate","useNavigate","decks","getCards","useDeckStore","userAchievements","achievements","getRecentAchievements","ua","achievement","find","a","id","achievementId","earnedAt","filter","Boolean","sort","b","getTime","slice","dueDecks","DAILY_STUDY_LIMIT_PER_DECK","deck","dueCountRaw","card","reviewCount","nextReview","length","dueCount","getDueDecks","recentAchievements","gold","description","Link","SMALL_REGIONS_BY_MAP","europe","world","africa","us","SvgMapCard","options","showAnswer","onAnswer","isStudyMode","svgContent","setSvgContent","userAnswer","setUserAnswer","showResult","setShowResult","zoom","setZoom","panX","setPanX","panY","setPanY","isDragging","setIsDragging","dragStart","setDragStart","x","y","initialZoomCalculated","setInitialZoomCalculated","mapContainerRef","useRef","loadSvgContent","response","fetch","svgPath","svgText","text","countryId","countryName","calculateInitialZoom","svgElement","countryElement","containerRect","current","getBoundingClientRect","getAttribute","svgWidth","svgHeight","height","split","Number","containerWidth","containerHeight","baseZoomX","baseZoomY","baseZoom","enhancedBaseZoom","bbox","getBBox","warn","minPixelSize","minSvgWidth","minSvgHeight","zoomForWidth","zoomForHeight","countryZoom","finalZoom","minZoom","clampedZoom","containerSize","svgSize","countryBBox","handleZoomIn","prev","handleZoomOut","handleResetView","handleMouseDown","clientX","clientY","handleMouseMove","handleMouseUp","handleWheel","delta","deltaY","handleTouchStart","touches","touch","handleTouchMove","handleTouchEnd","getMapType","pop","replace","processedSvgContent","React","useMemo","svgDoc","DOMParser","parseFromString","querySelector","setAttribute","maxWidth","maxHeight","mapType","targetCountry","includes","querySelectorAll","forEach","region","XMLSerializer","serializeToString","timer","setTimeout","mapContainer","toLowerCase","toUpperCase","optimalZoom","clearTimeout","handleSubmitAnswer","isCorrect","trim","handleKeyPress","key","ZoomIn","size","ZoomOut","RotateCcw","round","ref","cursor","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onWheel","onTouchStart","onTouchMove","onTouchEnd","transform","transformOrigin","dangerouslySetInnerHTML","__html","onKeyPress","autoFocus","CardRenderer","onAnswerSubmit","cardType","correct","backContent","frontContent","useKeyboardShortcuts","shortcuts","enabled","stopPropagation","debugMode","shortcutsRef","enabledRef","handleKeyDown","event","tagName","isContentEditable","ctrlKey","metaKey","altKey","shiftKey","code","matchingShortcut","shortcut","keyMatches","ctrlMatches","altMatches","shiftMatches","action","document","addEventListener","s","modifiers","ctrl","alt","shift","removeEventListener","useStudyKeyboardShortcuts","onFlipCard","onAnswerAgain","onAnswerHard","onAnswerGood","onAnswerEasy","onExitStudy","KeyboardShortcutsHelp","compact","formatKey","parts","push","join","enabledShortcuts","index","StudyShortcutsHelp","getCardStateDescription","state","ivl","getCardStateColor","getNextReviewDate","now","left","due","getDaysOverdue","currentDate","currentDay","floor","CardStateIndicator","showDescription","stateColor","daysOverdue","getStateIcon","getStateLabel","getAdditionalInfo","learningStep","backgroundColor","color","border","factor","reps","lapses","toLocaleDateString","testStatsLogic","testStats","total","incorrect","pattern","i","difficulty","cardNum","expectedIncorrect","expectedCorrect","correctMatch","incorrectMatch","window","StudyPage","deckId","useParams","getDeck","updateCard","cards","startStudySession","updateStudySession","clearStudySession","currentStudySession","getStudySession","awardStudyXP","setShowAnswer","sessionComplete","setSessionComplete","xpEarned","setXpEarned","sessionInitialized","setSessionInitialized","showShortcutsHelp","setShowShortcutsHelp","currentCardIndex","setCurrentCardIndex","stats","setStats","studyCards","sessionStats","allCards","dueCards","MAX_CARDS_PER_SESSION","cardsToStudy","currentCard","useCurrentCard","handleAnswer","goBackToDecks","isIncorrect","newStats","flushSync","isLastCard","nextCardIndex","processCardUpdate","newInterval","intervalDays","newEaseFactor","easeFactor","newReviewCount","totalCardsStudied","correctAnswers","baseXP","bonusXP","milestoneBonus","totalXPEarned","catch","resetSession","clearSessionAndGoBack","earliestDeck","earliestDate","deckCards","deckEarliestDate","reduce","earliest","cardDate","createdAt","totalAnswered","accuracy","CardManager","addCard","deleteCard","showAddCard","setShowAddCard","editingCard","setEditingCard","setFrontContent","setBackContent","handleAddCard","createNewCard","handleEditCard","handleDeleteCard","cardId","confirm","startEdit","cancelEdit","rows","ProgressBar","progress","label","showPercentage","clampedProgress","DecksPage","importProgress","importStatus","createDeck","deleteDeck","loadExampleDecks","importAnkiDeck","importFromText","resetImportProgress","searchTerm","setSearchTerm","selectedCategory","setSelectedCategory","managingDeckId","setManagingDeckId","showCreateModal","setShowCreateModal","showImportModal","setShowImportModal","showMapModal","setShowMapModal","selectedMapType","setSelectedMapType","availableMaps","emoji","regions","newDeckTitle","setNewDeckTitle","newDeckDescription","setNewDeckDescription","newDeckCategory","setNewDeckCategory","importText","setImportText","importSeparator","setImportSeparator","hasLoadedExampleDecks","filteredDecks","matchesSearch","matchesCategory","category","categories","Array","from","Set","handleCreateDeck","userId","cardCount","isPublic","settings","newCardsPerDay","maxReviewsPerDay","easyBonus","intervalModifier","maximumInterval","minimumInterval","handleDeleteDeck","handleFileImport","file","files","endsWith","handleTextImport","getDeckStats","newCards","reviewCards","new","review","handleStudyDeck","handleCreateMapDeck","selectedMap","front","back","interval","lastReviewed","role","charAt","accept","m","ConfirmationDialog","onConfirm","message","confirmText","cancelText","isDestructive","ProfilePage","updateUser","initializeAuth","setUserStats","userActivity","setUserActivity","setUserAchievements","userChallenges","setUserChallenges","dataLoading","setDataLoading","dataError","setDataError","isEditing","setIsEditing","showResetDialog","setShowResetDialog","isResetting","setIsResetting","resetSuccess","setResetSuccess","resetError","setResetError","resetAllStudyData","resetAllUserData","gamificationStats","isInitialized","userStreak","initializeUserData","loadUserData","isDemo","tokenType","authenticatedUser","token","activity","challenges","Promise","all","userDataService","getUserStats","getUserActivity","getUserAchievements","getUserChallenges","apiError","editForm","setEditForm","dailyGoal","preferences","handleSaveProfile","handleResetAllData","diamonds","XPBar","currentXP","_","totalCards","toLocaleString","totalStudyTime","averageAccuracy","date","cardsStudied","studyTime","challenge","completedAt","reward","coins","gems","StreakCounter","longestStreak","lastStudyDate","parseInt","notifications","soundEffects","ChallengesPage","setFilter","sortBy","setSortBy","loadChallengeData","getFilterCount","filterType","expiresAt","getProgressPercentage","isExpired","getTimeRemaining","diff","days","hours","filteredChallenges","filtered","aRewardValue","aProgress","getFilteredChallenges","c","expired","MonthlyChallenge","requirements","rewards","startDate","endDate","participantCount","storyArc","chapters","totalWeeks","currentWeek","CommunityLeaderboard","challengeId","challengeName","LeaderboardPage","leaderboardData","setLeaderboardData","selectedType","setSelectedType","data","getLeaderboardData","loadLeaderboardData","leaderboardTypes","currentLeaderboard","getCurrentLeaderboard","getRankIcon","rank","getRankColor","getChangeIcon","change","getChangeColor","formatScore","score","currentUserEntry","entry","abs","t","GlobalStatsPage","globalStats","liveMetrics","lastUpdated","refresh","formatTime","getTimeSinceUpdate","useRealTimeData","totalLearners","random","cardsStudiedToday","studyTimeToday","onlineUsers","studyingSessions","languagesBeingLearned","topSubjects","subject","learners","RealTimeStatsCard","showRefreshButton","topPerformers","performer","country","TrendingTopics","maxItems","showGrowth","MarketInsights","maxSkills","maxIndustries","showCertifications","AnalyticsDashboard","timeRange","dsrData","setDsrData","sessionData","setSessionData","learningPatterns","setLearningPatterns","environmentalData","setEnvironmentalData","personalizationData","setPersonalizationData","setIsLoading","selectedMetric","setSelectedMetric","loadAnalyticsData","generateSampleDSRData","generateSampleSessionData","generateSampleLearningPatterns","generateSampleEnvironmentalData","generateSamplePersonalizationData","insights","avgMomentum","sum","momentum","avgAccuracy","totalCardsReviewed","cardsPerSession","avgFlowTime","flowTime","improvementTrend","InsightCard","trend","DSRTrendsChart","StabilityDistribution","RetrievabilityPrediction","MomentumTrendsChart","FlowStateAnalysis","CognitiveLoadPatterns","SessionQualityMatrix","OptimalStudyTimes","EnvironmentalPreferences","PersonalizedInsights","LearningRecommendations","patterns","ParameterOptimizationStatus","colorClasses","blue","green","purple","orange","trendIcons","improving","declining","stable","ResponsiveContainer","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","Legend","Line","distributionData","range","count","PieChart","Pie","cx","cy","outerRadius","percent","Cell","AreaChart","formatter","Area","fillOpacity","ScatterChart","Scatter","BarChart","Bar","radarData","fullMark","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","Radar","condition","averagePerformance","optimalDifficulty","optimalSessionLength","cognitiveLoadProfile","baseCapacity","bestPerformanceTimes","time","idx","recommendations","rec","averageDifficulty","sin","averageStability","cos","averageRetrievability","cardsReviewed","fatigue","cognitiveLoad","satisfaction","hour","timeOfDay","performance","PI","confidence","responseTime","sessions","sessionCount","preferenceScore","fatigueRate","recoveryRate","fsrsParameters","RATING_DESCRIPTIONS","again","hard","good","easy","EnhancedReviewPage","sessionState","setSessionState","setCurrentCard","responseStartTime","setResponseStartTime","sessionMetrics","setSessionMetrics","averageResponseTime","sessionDuration","showExplanation","setShowExplanation","setError","showMetricsPanel","setShowMetricsPanel","showCognitiveLoadDetail","setShowCognitiveLoadDetail","cognitiveLoadAnalysis","setCognitiveLoadAnalysis","environmentalAdaptations","setEnvironmentalAdaptations","queueManagerRef","UnifiedQueueManager","environmentalServiceRef","EnvironmentalContextService","intervalRef","queueManager","environmentalService","newSession","initializeSession","firstCard","getNextCard","startEnvironmentalMonitoring","err","Error","clearInterval","context","getCurrentContext","adaptations","getEnvironmentalAdaptations","setInterval","trackContextChanges","onContextChange","previous","newAdaptations","handleCardResponse","rating","environmentalContext","enhancedResponse","contextualFactors","sessionTime","sessionStartTime","sessionFatigueIndex","cognitiveLoadAtTime","cognitiveLoadCapacity","environmentalFactors","momentumImpact","calculateMomentumImpact","confidenceChange","calculateConfidenceChange","previousCardSimilarity","clusteringContext","updatedSession","processCardResponse","updateSessionMetrics","nextCard","newCardsReviewed","handleShowAnswer","location","reload","SessionMetricsHeader","onToggleCognitiveDetail","CognitiveLoadDetailPanel","analysis","CardDisplay","onShowAnswer","ResponseButtons","onResponse","ExplanationPanel","explanation","reasoning","FlowStateIndicator","SessionControls","onToggleMetrics","onToggleExplanation","onEndSession","formatDuration","ms","padStart","sessionMomentumScore","EnvironmentalIndicator","retrievability","confidenceLevel","Object","entries","config","keys","indexOf","challengeSkillBalance","engagementLevel","momentumMaintenance","flowStateMetrics","flowZone","balance","zone","getFlowZone","difficultyAdjustment","visualOptimizations","colorScheme","lookaheadBuffer","currentLoad","capacity","utilizationRate","attentionRemainingMinutes","sustainabilityScore","alertLevel","ResetPasswordPage","isDev","App","Routes","Route","path","element","Navigate","queryClient","QueryClient","defaultOptions","queries","staleTime","cacheTime","retry","refetchOnWindowFocus","ReactDOM","createRoot","getElementById","render","StrictMode","QueryClientProvider","client","BrowserRouter"],"mappings":"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"}