{"version":3,"file":"heavy-components-AeGFbXRf.js","sources":["../../src/components/gamification/XPBar.tsx","../../src/components/gamification/StreakCounter.tsx","../../src/components/gamification/MonthlyChallenge.tsx","../../src/components/gamification/CommunityLeaderboard.tsx","../../src/hooks/useRealTimeData.ts","../../src/components/dashboard/RealTimeStatsCard.tsx","../../src/components/dashboard/TrendingTopics.tsx","../../src/components/dashboard/MarketInsights.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ninterface XPBarProps {\r\n  currentXP: number\r\n  level: number\r\n  className?: string\r\n}\r\n\r\nconst XPBar: React.FC<XPBarProps> = ({ currentXP, level, className = '' }) => {\r\n  // Calculate XP needed for current level and next level using the same formula as gamification store\r\n  const getXPForLevel = (lvl: number) => Math.pow(lvl - 1, 2) * 100\r\n  const getXPForNextLevel = (lvl: number) => Math.pow(lvl, 2) * 100\r\n  \r\n  const currentLevelXP = getXPForLevel(level)\r\n  const nextLevelXP = getXPForNextLevel(level)\r\n  const xpInCurrentLevel = currentXP - currentLevelXP\r\n  const xpNeededForNextLevel = nextLevelXP - currentLevelXP\r\n  \r\n  const progressPercentage = Math.max(0, Math.min((xpInCurrentLevel / xpNeededForNextLevel) * 100, 100))\r\n\r\n  return (\r\n    <div className={`space-y-2 ${className}`}>\r\n      <div className=\"flex items-center justify-between text-sm\">\r\n        <span className=\"font-medium text-gray-700 dark:text-gray-300\">\r\n          Level {level}\r\n        </span>\r\n        <span className=\"text-gray-500 dark:text-gray-400\">\r\n          {xpInCurrentLevel.toLocaleString()} / {xpNeededForNextLevel.toLocaleString()} XP\r\n        </span>\r\n      </div>\r\n      \r\n      <div className=\"relative\">\r\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden\">\r\n          <div \r\n            className=\"h-full bg-gradient-to-r from-blue-500 to-purple-600 rounded-full transition-all duration-500 ease-out relative\"\r\n            style={{ width: `${progressPercentage}%` }}\r\n          >\r\n            <div className=\"absolute inset-0 bg-white/20 animate-pulse rounded-full\"></div>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Level indicator */}\r\n        <div className=\"absolute -top-1 -left-1 w-5 h-5 bg-blue-600 rounded-full flex items-center justify-center text-xs font-bold text-white border-2 border-white dark:border-gray-800\">\r\n          {level}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\r\n        {nextLevelXP - currentXP > 0 ? (\r\n          <>\r\n            {(nextLevelXP - currentXP).toLocaleString()} XP to level {level + 1}\r\n          </>\r\n        ) : (\r\n          'Max level reached!'\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default XPBar","import React from 'react'\r\n\r\ninterface StreakCounterProps {\r\n  currentStreak: number\r\n  longestStreak: number\r\n  lastStudyDate?: string\r\n  className?: string\r\n}\r\n\r\nconst StreakCounter: React.FC<StreakCounterProps> = ({ \r\n  currentStreak, \r\n  longestStreak, \r\n  lastStudyDate,\r\n  className = '' \r\n}) => {\r\n  const isStreakActive = () => {\r\n    if (!lastStudyDate) return false\r\n    const lastStudy = new Date(lastStudyDate)\r\n    const today = new Date()\r\n    const diffTime = Math.abs(today.getTime() - lastStudy.getTime())\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\r\n    return diffDays <= 1\r\n  }\r\n\r\n  const getStreakStatus = () => {\r\n    if (currentStreak === 0) return 'inactive'\r\n    if (isStreakActive()) return 'active'\r\n    return 'broken'\r\n  }\r\n\r\n  const status = getStreakStatus()\r\n\r\n  const getStreakColor = () => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'text-green-600 dark:text-green-400'\r\n      case 'broken':\r\n        return 'text-orange-600 dark:text-orange-400'\r\n      default:\r\n        return 'text-gray-600 dark:text-gray-400'\r\n    }\r\n  }\r\n\r\n  const getStreakIcon = () => {\r\n    switch (status) {\r\n      case 'active':\r\n        return '🔥'\r\n      case 'broken':\r\n        return '💔'\r\n      default:\r\n        return '⭐'\r\n    }\r\n  }\r\n\r\n  const getStreakMessage = () => {\r\n    switch (status) {\r\n      case 'active':\r\n        return currentStreak === 1 ? 'Great start!' : 'Keep it up!'\r\n      case 'broken':\r\n        return 'Start a new streak today!'\r\n      default:\r\n        return 'Begin your streak!'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 ${className}`}>\r\n      <div className=\"flex items-center justify-between mb-3\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          Study Streak\r\n        </h3>\r\n        <span className=\"text-2xl\">{getStreakIcon()}</span>\r\n      </div>\r\n      \r\n      <div className=\"space-y-3\">\r\n        <div className=\"text-center\">\r\n          <div className={`text-3xl font-bold ${getStreakColor()}`}>\r\n            {currentStreak}\r\n          </div>\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n            {currentStreak === 1 ? 'day' : 'days'}\r\n          </div>\r\n          <div className={`text-sm font-medium ${getStreakColor()}`}>\r\n            {getStreakMessage()}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"border-t border-gray-200 dark:border-gray-600 pt-3\">\r\n          <div className=\"flex justify-between items-center text-sm\">\r\n            <span className=\"text-gray-600 dark:text-gray-400\">\r\n              Longest streak:\r\n            </span>\r\n            <span className=\"font-semibold text-gray-900 dark:text-white\">\r\n              {longestStreak} {longestStreak === 1 ? 'day' : 'days'}\r\n            </span>\r\n          </div>\r\n          \r\n          {lastStudyDate && (\r\n            <div className=\"flex justify-between items-center text-sm mt-1\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">\r\n                Last study:\r\n              </span>\r\n              <span className=\"font-medium text-gray-700 dark:text-gray-300\">\r\n                {new Date(lastStudyDate).toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Streak visualization */}\r\n        <div className=\"flex justify-center space-x-1 pt-2\">\r\n          {Array.from({ length: Math.min(currentStreak, 7) }, (_, i) => (\r\n            <div\r\n              key={i}\r\n              className={`w-3 h-3 rounded-full ${\r\n                status === 'active' \r\n                  ? 'bg-green-500' \r\n                  : status === 'broken'\r\n                  ? 'bg-orange-500'\r\n                  : 'bg-gray-300 dark:bg-gray-600'\r\n              }`}\r\n            />\r\n          ))}\r\n          {currentStreak > 7 && (\r\n            <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-2\">\r\n              +{currentStreak - 7}\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StreakCounter","import React from 'react'\r\nimport type { Challenge, ChallengeParticipation } from '@shared/types'\r\nimport { useGamificationStore } from '../../stores/gamificationStore'\r\n\r\ninterface MonthlyChallengeProps {\r\n  challenge: Challenge\r\n  participation?: ChallengeParticipation\r\n}\r\n\r\nexport const MonthlyChallenge: React.FC<MonthlyChallengeProps> = ({\r\n  challenge,\r\n  participation\r\n}) => {\r\n  const {\r\n    claimMilestoneReward\r\n  } = useGamificationStore()\r\n\r\n  const progress = participation?.progress || {}\r\n  const milestoneProgress = participation?.milestoneProgress || {}\r\n  const weeklyProgress = participation?.weeklyProgress || []\r\n  const currentStreak = participation?.currentStreak || 0\r\n  const bestWeek = participation?.bestWeek || 0\r\n\r\n  // Calculate overall progress percentage\r\n  const totalTarget = challenge.requirements.reduce((sum, req) => sum + req.target, 0)\r\n  const totalCurrent = challenge.requirements.reduce((sum, req) => {\r\n    const key = req.type\r\n    return sum + (progress[key] || 0)\r\n  }, 0)\r\n  const progressPercentage = Math.min((totalCurrent / totalTarget) * 100, 100)\r\n\r\n  // Mock milestone data (would come from challenge definition in real implementation)\r\n  const milestones = [\r\n    { id: 'milestone_1', name: 'First Week', target: 25, reward: '100 XP + 20 Gold' },\r\n    { id: 'milestone_2', name: 'Consistency', target: 50, reward: '200 XP + 50 Gold' },\r\n    { id: 'milestone_3', name: 'Dedication', target: 75, reward: '300 XP + 100 Gold + 5 Gems' },\r\n    { id: 'milestone_4', name: 'Mastery', target: 100, reward: '500 XP + 200 Gold + 10 Gems + Badge' }\r\n  ]\r\n\r\n  // Mock story chapters (would come from challenge definition)\r\n  const storyChapters = [\r\n    { week: 1, title: 'The Journey Begins', unlocked: weeklyProgress.some(w => w.week === 1 && w.storyUnlocked) },\r\n    { week: 2, title: 'Building Momentum', unlocked: weeklyProgress.some(w => w.week === 2 && w.storyUnlocked) },\r\n    { week: 3, title: 'Overcoming Challenges', unlocked: weeklyProgress.some(w => w.week === 3 && w.storyUnlocked) },\r\n    { week: 4, title: 'The Final Push', unlocked: weeklyProgress.some(w => w.week === 4 && w.storyUnlocked) }\r\n  ]\r\n\r\n  const handleClaimMilestone = (milestoneId: string) => {\r\n    claimMilestoneReward(challenge.id, milestoneId)\r\n  }\r\n\r\n  const getWeekProgress = (week: number) => {\r\n    return weeklyProgress.find(w => w.week === week)\r\n  }\r\n\r\n  const getDifficultyColor = (week: number) => {\r\n    const colors = ['bg-green-500', 'bg-yellow-500', 'bg-orange-500', 'bg-red-500']\r\n    return colors[Math.min(week - 1, 3)]\r\n  }\r\n\r\n  const getDifficultyLabel = (week: number) => {\r\n    const labels = ['Beginner', 'Intermediate', 'Advanced', 'Expert']\r\n    return labels[Math.min(week - 1, 3)]\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border-l-4 border-purple-500\">\r\n      {/* Header */}\r\n      <div className=\"flex items-start justify-between mb-6\">\r\n        <div>\r\n          <div className=\"flex items-center gap-2 mb-2\">\r\n            <span className=\"text-2xl\">🏆</span>\r\n            <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n              {challenge.title}\r\n            </h3>\r\n            <span className=\"px-2 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 text-xs font-medium rounded-full\">\r\n              Monthly Epic\r\n            </span>\r\n          </div>\r\n          <p className=\"text-gray-600 dark:text-gray-300 mb-2\">\r\n            {challenge.description}\r\n          </p>\r\n          <div className=\"flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\r\n            <span>🔥 Streak: {currentStreak} days</span>\r\n            <span>⭐ Best Week: {bestWeek}</span>\r\n            <span>📅 {Math.ceil((new Date(challenge.endDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24))} days left</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\r\n            {progressPercentage.toFixed(0)}%\r\n          </div>\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">Complete</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Overall Progress Bar */}\r\n      <div className=\"mb-6\">\r\n        <div className=\"flex justify-between text-sm text-gray-600 dark:text-gray-300 mb-2\">\r\n          <span>Overall Progress</span>\r\n          <span>{totalCurrent} / {totalTarget}</span>\r\n        </div>\r\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\r\n          <div \r\n            className=\"bg-gradient-to-r from-purple-500 to-pink-500 h-3 rounded-full transition-all duration-300\"\r\n            style={{ width: `${progressPercentage}%` }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Weekly Progress with Difficulty Scaling */}\r\n      <div className=\"mb-6\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          Weekly Progress & Difficulty Scaling\r\n        </h4>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3\">\r\n          {[1, 2, 3, 4].map(week => {\r\n            const weekData = getWeekProgress(week)\r\n            const isCompleted = weekData?.completed || false\r\n            const isCurrentWeek = Math.ceil((Date.now() - new Date(challenge.startDate).getTime()) / (1000 * 60 * 60 * 24 * 7)) === week\r\n            \r\n            return (\r\n              <div \r\n                key={week}\r\n                className={`p-3 rounded-lg border-2 ${\r\n                  isCompleted \r\n                    ? 'border-green-500 bg-green-50 dark:bg-green-900/20' \r\n                    : isCurrentWeek\r\n                    ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/20'\r\n                    : 'border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800'\r\n                }`}\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <span className=\"font-medium text-gray-900 dark:text-white\">Week {week}</span>\r\n                  {isCompleted && <span className=\"text-green-500\">✓</span>}\r\n                  {isCurrentWeek && !isCompleted && <span className=\"text-purple-500\">📍</span>}\r\n                </div>\r\n                <div className={`text-xs px-2 py-1 rounded-full text-white ${getDifficultyColor(week)} mb-2`}>\r\n                  {getDifficultyLabel(week)}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n                  Target: {25 * week} cards\r\n                </div>\r\n                {weekData && (\r\n                  <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                    Progress: {Object.values(weekData.progress).reduce((a, b) => a + b, 0)}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Story Arc Progress */}\r\n      <div className=\"mb-6\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          📖 Story Arc: \"The Path to Mastery\"\r\n        </h4>\r\n        <div className=\"space-y-2\">\r\n          {storyChapters.map(chapter => (\r\n            <div \r\n              key={chapter.week}\r\n              className={`flex items-center gap-3 p-3 rounded-lg ${\r\n                chapter.unlocked \r\n                  ? 'bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800' \r\n                  : 'bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700'\r\n              }`}\r\n            >\r\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\r\n                chapter.unlocked ? 'bg-blue-500 text-white' : 'bg-gray-300 dark:bg-gray-600 text-gray-500'\r\n              }`}>\r\n                {chapter.unlocked ? '📖' : '🔒'}\r\n              </div>\r\n              <div className=\"flex-1\">\r\n                <div className={`font-medium ${\r\n                  chapter.unlocked ? 'text-blue-900 dark:text-blue-100' : 'text-gray-500 dark:text-gray-400'\r\n                }`}>\r\n                  Chapter {chapter.week}: {chapter.title}\r\n                </div>\r\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                  {chapter.unlocked ? 'Unlocked! Click to read' : `Complete Week ${chapter.week} to unlock`}\r\n                </div>\r\n              </div>\r\n              {chapter.unlocked && (\r\n                <button className=\"px-3 py-1 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600 transition-colors\">\r\n                  Read\r\n                </button>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Milestones */}\r\n      <div className=\"mb-6\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          🎯 Milestones & Rewards\r\n        </h4>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n          {milestones.map(milestone => {\r\n            const isCompleted = milestoneProgress[milestone.id] === true\r\n            const isClaimed = milestoneProgress[`${milestone.id}_claimed`] === true\r\n            const canClaim = isCompleted && !isClaimed\r\n            \r\n            return (\r\n              <div \r\n                key={milestone.id}\r\n                className={`p-4 rounded-lg border-2 ${\r\n                  isClaimed \r\n                    ? 'border-green-500 bg-green-50 dark:bg-green-900/20' \r\n                    : isCompleted\r\n                    ? 'border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20'\r\n                    : 'border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800'\r\n                }`}\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                    {milestone.name}\r\n                  </span>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {isClaimed && <span className=\"text-green-500\">✅</span>}\r\n                    {isCompleted && !isClaimed && <span className=\"text-yellow-500\">🎁</span>}\r\n                    {!isCompleted && <span className=\"text-gray-400\">⏳</span>}\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\">\r\n                  Target: {milestone.target}% completion\r\n                </div>\r\n                <div className=\"text-sm text-purple-600 dark:text-purple-400 mb-3\">\r\n                  Reward: {milestone.reward}\r\n                </div>\r\n                {canClaim && (\r\n                  <button \r\n                    onClick={() => handleClaimMilestone(milestone.id)}\r\n                    className=\"w-full px-3 py-2 bg-yellow-500 text-white text-sm font-medium rounded-lg hover:bg-yellow-600 transition-colors\"\r\n                  >\r\n                    Claim Reward\r\n                  </button>\r\n                )}\r\n                {isClaimed && (\r\n                  <div className=\"w-full px-3 py-2 bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 text-sm font-medium rounded-lg text-center\">\r\n                    Claimed\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Community Goals */}\r\n      <div className=\"mb-6\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          🌍 Community Goals\r\n        </h4>\r\n        <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\r\n          <div className=\"flex items-center justify-between mb-3\">\r\n            <span className=\"font-medium text-gray-900 dark:text-white\">\r\n              Global Study Challenge\r\n            </span>\r\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n              12,847 / 50,000 participants\r\n            </span>\r\n          </div>\r\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-3\">\r\n            <div \r\n              className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full\"\r\n              style={{ width: '25.7%' }}\r\n            />\r\n          </div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\r\n            Help the community reach 50,000 participants to unlock exclusive rewards for everyone!\r\n          </div>\r\n          <div className=\"text-sm text-purple-600 dark:text-purple-400\">\r\n            Community Reward: Exclusive \"Unity\" badge + 100 bonus gems for all participants\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Exclusive Rewards Preview */}\r\n      <div className=\"border-t border-gray-200 dark:border-gray-700 pt-4\">\r\n        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n          💎 Exclusive Monthly Rewards\r\n        </h4>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\r\n          <div className=\"p-3 bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl mb-2\">🏅</div>\r\n              <div className=\"font-medium text-gray-900 dark:text-white\">Monthly Master</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">Exclusive Badge</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"p-3 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg border border-purple-200 dark:border-purple-800\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl mb-2\">👑</div>\r\n              <div className=\"font-medium text-gray-900 dark:text-white\">Royal Title</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">Profile Enhancement</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"p-3 bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl mb-2\">🎨</div>\r\n              <div className=\"font-medium text-gray-900 dark:text-white\">Custom Theme</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">UI Customization</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport type { LeaderboardEntry } from '@shared/types'\r\n\r\ninterface ExtendedLeaderboardEntry extends LeaderboardEntry {\r\n  seasonalRewards?: Record<string, number>\r\n}\r\n\r\ninterface CommunityLeaderboardProps {\r\n  challengeId: string\r\n  challengeName: string\r\n}\r\n\r\nexport const CommunityLeaderboard: React.FC<CommunityLeaderboardProps> = ({\r\n  challengeName\r\n}) => {\r\n  const [selectedTier, setSelectedTier] = useState<'bronze' | 'silver' | 'gold' | 'diamond'>('gold')\r\n  const [timeFilter, setTimeFilter] = useState<'daily' | 'weekly' | 'monthly'>('weekly')\r\n\r\n  // Mock leaderboard data with tiers\r\n  const mockLeaderboardData: Record<string, ExtendedLeaderboardEntry[]> = {\r\n    bronze: [\r\n      { userId: '101', username: 'NewLearner', score: 150, rank: 1, change: 0, seasonalRewards: { bronze: 1 } },\r\n      { userId: '102', username: 'StudyBuddy', score: 140, rank: 2, change: 1, seasonalRewards: { bronze: 1 } },\r\n      { userId: '103', username: 'FlashFan', score: 135, rank: 3, change: -1, seasonalRewards: { bronze: 1 } },\r\n      { userId: '104', username: 'CardMaster', score: 130, rank: 4, change: 2, seasonalRewards: { bronze: 1 } },\r\n      { userId: '105', username: 'QuickStudy', score: 125, rank: 5, change: 0, seasonalRewards: { bronze: 1 } }\r\n    ],\r\n    silver: [\r\n      { userId: '201', username: 'SilverStar', score: 450, rank: 1, change: 0, seasonalRewards: { silver: 1 } },\r\n      { userId: '202', username: 'StudyPro', score: 420, rank: 2, change: 1, seasonalRewards: { silver: 1 } },\r\n      { userId: '203', username: 'FlashExpert', score: 400, rank: 3, change: -1, seasonalRewards: { silver: 1 } },\r\n      { userId: '204', username: 'MemoryMaster', score: 380, rank: 4, change: 2, seasonalRewards: { silver: 1 } },\r\n      { userId: '205', username: 'StudyElite', score: 360, rank: 5, change: -1, seasonalRewards: { silver: 1 } }\r\n    ],\r\n    gold: [\r\n      { userId: '301', username: 'GoldChampion', score: 850, rank: 1, change: 0, seasonalRewards: { gold: 1 } },\r\n      { userId: '302', username: 'StudyLegend', score: 820, rank: 2, change: 1, seasonalRewards: { gold: 1 } },\r\n      { userId: '303', username: 'FlashMaster', score: 800, rank: 3, change: -1, seasonalRewards: { gold: 1 } },\r\n      { userId: '304', username: 'MemoryGuru', score: 780, rank: 4, change: 2, seasonalRewards: { gold: 1 } },\r\n      { userId: '305', username: 'StudyKing', score: 760, rank: 5, change: -1, seasonalRewards: { gold: 1 } }\r\n    ],\r\n    diamond: [\r\n      { userId: '401', username: 'DiamondElite', score: 1500, rank: 1, change: 0, seasonalRewards: { diamond: 1 } },\r\n      { userId: '402', username: 'StudyGod', score: 1450, rank: 2, change: 0, seasonalRewards: { diamond: 1 } },\r\n      { userId: '403', username: 'FlashLegend', score: 1400, rank: 3, change: 1, seasonalRewards: { diamond: 1 } },\r\n      { userId: '404', username: 'MemoryTitan', score: 1350, rank: 4, change: -1, seasonalRewards: { diamond: 1 } },\r\n      { userId: '405', username: 'StudyEmperor', score: 1300, rank: 5, change: 0, seasonalRewards: { diamond: 1 } }\r\n    ]\r\n  }\r\n\r\n  const currentLeaderboard = mockLeaderboardData[selectedTier] || []\r\n\r\n  const getTierColor = (tier: string) => {\r\n    const colors = {\r\n      bronze: 'from-orange-400 to-orange-600',\r\n      silver: 'from-gray-400 to-gray-600',\r\n      gold: 'from-yellow-400 to-yellow-600',\r\n      diamond: 'from-blue-400 to-purple-600'\r\n    }\r\n    return colors[tier as keyof typeof colors] || colors.gold\r\n  }\r\n\r\n  const getTierIcon = (tier: string) => {\r\n    const icons = {\r\n      bronze: '🥉',\r\n      silver: '🥈',\r\n      gold: '🥇',\r\n      diamond: '💎'\r\n    }\r\n    return icons[tier as keyof typeof icons] || icons.gold\r\n  }\r\n\r\n  const getRankIcon = (rank: number) => {\r\n    if (rank === 1) return '👑'\r\n    if (rank === 2) return '🥈'\r\n    if (rank === 3) return '🥉'\r\n    return `#${rank}`\r\n  }\r\n\r\n  const getChangeIcon = (change: number) => {\r\n    if (change > 0) return <span className=\"text-green-500\">↗️ +{change}</span>\r\n    if (change < 0) return <span className=\"text-red-500\">↘️ {change}</span>\r\n    return <span className=\"text-gray-500\">➡️ 0</span>\r\n  }\r\n\r\n  const getTierRequirement = (tier: string) => {\r\n    const requirements = {\r\n      bronze: '0-200 points',\r\n      silver: '201-500 points',\r\n      gold: '501-1000 points',\r\n      diamond: '1000+ points'\r\n    }\r\n    return requirements[tier as keyof typeof requirements]\r\n  }\r\n\r\n  const getTierRewards = (tier: string) => {\r\n    const rewards = {\r\n      bronze: '50 XP, 10 Gold',\r\n      silver: '150 XP, 50 Gold, 5 Gems',\r\n      gold: '300 XP, 150 Gold, 15 Gems, Badge',\r\n      diamond: '500 XP, 300 Gold, 30 Gems, Exclusive Badge, Custom Theme'\r\n    }\r\n    return rewards[tier as keyof typeof rewards]\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div>\r\n          <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">\r\n            🌍 Community Leaderboard\r\n          </h3>\r\n          <p className=\"text-gray-600 dark:text-gray-300\">\r\n            {challengeName} - Compete with players worldwide\r\n          </p>\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">Updated</div>\r\n          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">2 min ago</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Time Filter */}\r\n      <div className=\"flex gap-2 mb-6\">\r\n        {(['daily', 'weekly', 'monthly'] as const).map(filter => (\r\n          <button\r\n            key={filter}\r\n            onClick={() => setTimeFilter(filter)}\r\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n              timeFilter === filter\r\n                ? 'bg-purple-500 text-white'\r\n                : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'\r\n            }`}\r\n          >\r\n            {filter.charAt(0).toUpperCase() + filter.slice(1)}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Tier Selection */}\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mb-6\">\r\n        {(['bronze', 'silver', 'gold', 'diamond'] as const).map(tier => (\r\n          <button\r\n            key={tier}\r\n            onClick={() => setSelectedTier(tier)}\r\n            className={`p-4 rounded-lg border-2 transition-all ${\r\n              selectedTier === tier\r\n                ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/20'\r\n                : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\r\n            }`}\r\n          >\r\n            <div className={`text-2xl mb-2 bg-gradient-to-r ${getTierColor(tier)} bg-clip-text text-transparent`}>\r\n              {getTierIcon(tier)}\r\n            </div>\r\n            <div className=\"font-medium text-gray-900 dark:text-white capitalize\">\r\n              {tier} Tier\r\n            </div>\r\n            <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n              {getTierRequirement(tier)}\r\n            </div>\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Tier Info */}\r\n      <div className={`p-4 rounded-lg bg-gradient-to-r ${getTierColor(selectedTier)} bg-opacity-10 border border-opacity-20 mb-6`}>\r\n        <div className=\"flex items-center gap-3 mb-2\">\r\n          <span className=\"text-2xl\">{getTierIcon(selectedTier)}</span>\r\n          <div>\r\n            <h4 className=\"font-bold text-gray-900 dark:text-white capitalize\">\r\n              {selectedTier} Tier Rewards\r\n            </h4>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n              {getTierRewards(selectedTier)}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n          Requirement: {getTierRequirement(selectedTier)}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Leaderboard */}\r\n      <div className=\"space-y-3\">\r\n        {currentLeaderboard.map((entry) => (\r\n          <div\r\n            key={entry.userId}\r\n            className={`flex items-center gap-4 p-4 rounded-lg border transition-all hover:shadow-md ${\r\n              entry.rank <= 3\r\n                ? 'bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-200 dark:border-yellow-800'\r\n                : 'bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600'\r\n            }`}\r\n          >\r\n            {/* Rank */}\r\n            <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-white dark:bg-gray-800 shadow-sm\">\r\n              <span className=\"text-lg font-bold\">\r\n                {typeof getRankIcon(entry.rank) === 'string' && getRankIcon(entry.rank).includes('#') \r\n                  ? getRankIcon(entry.rank) \r\n                  : getRankIcon(entry.rank)\r\n                }\r\n              </span>\r\n            </div>\r\n\r\n            {/* User Info */}\r\n            <div className=\"flex-1\">\r\n              <div className=\"flex items-center gap-2 mb-1\">\r\n                <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                  {entry.username}\r\n                </span>\r\n                <span className={`text-xs px-2 py-1 rounded-full bg-gradient-to-r ${getTierColor(selectedTier)} text-white`}>\r\n                  {selectedTier.toUpperCase()}\r\n                </span>\r\n                {entry.seasonalRewards && Object.keys(entry.seasonalRewards).length > 0 && (\r\n                  <span className=\"text-xs px-2 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 rounded-full\">\r\n                    🏆 Seasonal Winner\r\n                  </span>\r\n                )}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                {entry.score.toLocaleString()} points this {timeFilter}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Change Indicator */}\r\n            <div className=\"text-sm\">\r\n              {getChangeIcon(entry.change)}\r\n            </div>\r\n\r\n            {/* Score */}\r\n            <div className=\"text-right\">\r\n              <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\r\n                {entry.score.toLocaleString()}\r\n              </div>\r\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                points\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Promotion/Demotion Info */}\r\n      <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\r\n        <div className=\"flex items-center gap-2 mb-2\">\r\n          <span className=\"text-blue-500\">ℹ️</span>\r\n          <span className=\"font-medium text-blue-900 dark:text-blue-100\">\r\n            Tier Progression\r\n          </span>\r\n        </div>\r\n        <div className=\"text-sm text-blue-800 dark:text-blue-200\">\r\n          • Reach the next tier's point threshold to get promoted\r\n          • Fall below your current tier's minimum to get demoted\r\n          • Tier changes happen at the end of each weekly period\r\n          • Higher tiers unlock better rewards and exclusive features\r\n        </div>\r\n      </div>\r\n\r\n      {/* Global Stats */}\r\n      <div className=\"mt-6 grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n        <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n          <div className=\"text-lg font-bold text-gray-900 dark:text-white\">47,892</div>\r\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">Total Players</div>\r\n        </div>\r\n        <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n          <div className=\"text-lg font-bold text-gray-900 dark:text-white\">2.4M</div>\r\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">Cards Studied</div>\r\n        </div>\r\n        <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n          <div className=\"text-lg font-bold text-gray-900 dark:text-white\">89.2%</div>\r\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">Avg Accuracy</div>\r\n        </div>\r\n        <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n          <div className=\"text-lg font-bold text-gray-900 dark:text-white\">156h</div>\r\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">Study Time</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useState, useEffect, useCallback } from 'react'\r\nimport { realTimeDataService, type GlobalLearningStats, type EducationalTrends, type LiveUserMetrics, type MarketInsights } from '../services/realTimeDataService'\r\n\r\ninterface RealTimeDataState {\r\n  globalStats: GlobalLearningStats | null\r\n  educationalTrends: EducationalTrends | null\r\n  liveMetrics: LiveUserMetrics | null\r\n  marketInsights: MarketInsights | null\r\n  isLoading: boolean\r\n  error: string | null\r\n  lastUpdated: Date | null\r\n}\r\n\r\ninterface UseRealTimeDataOptions {\r\n  autoRefresh?: boolean\r\n  refreshInterval?: number\r\n  enableSubscriptions?: boolean\r\n}\r\n\r\nexport const useRealTimeData = (options: UseRealTimeDataOptions = {}) => {\r\n  const {\r\n    autoRefresh = true,\r\n    refreshInterval = 30000, // 30 seconds\r\n    enableSubscriptions = true\r\n  } = options\r\n\r\n  const [state, setState] = useState<RealTimeDataState>({\r\n    globalStats: null,\r\n    educationalTrends: null,\r\n    liveMetrics: null,\r\n    marketInsights: null,\r\n    isLoading: true,\r\n    error: null,\r\n    lastUpdated: null\r\n  })\r\n\r\n  // Load all real-time data\r\n  const loadData = useCallback(async () => {\r\n    try {\r\n      setState(prev => ({ ...prev, isLoading: true, error: null }))\r\n      \r\n      const [globalStats, educationalTrends, liveMetrics, marketInsights] = await Promise.all([\r\n        realTimeDataService.getGlobalLearningStats(),\r\n        realTimeDataService.getEducationalTrends(),\r\n        realTimeDataService.getLiveUserMetrics(),\r\n        realTimeDataService.getMarketInsights()\r\n      ])\r\n\r\n      setState({\r\n        globalStats,\r\n        educationalTrends,\r\n        liveMetrics,\r\n        marketInsights,\r\n        isLoading: false,\r\n        error: null,\r\n        lastUpdated: new Date()\r\n      })\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: error instanceof Error ? error.message : 'Failed to load real-time data'\r\n      }))\r\n    }\r\n  }, [])\r\n\r\n  // Refresh specific data type\r\n  const refreshGlobalStats = useCallback(async () => {\r\n    try {\r\n      const globalStats = await realTimeDataService.getGlobalLearningStats()\r\n      setState(prev => ({ ...prev, globalStats, lastUpdated: new Date() }))\r\n    } catch (error) {\r\n      console.error('Failed to refresh global stats:', error)\r\n    }\r\n  }, [])\r\n\r\n  const refreshEducationalTrends = useCallback(async () => {\r\n    try {\r\n      const educationalTrends = await realTimeDataService.getEducationalTrends()\r\n      setState(prev => ({ ...prev, educationalTrends, lastUpdated: new Date() }))\r\n    } catch (error) {\r\n      console.error('Failed to refresh educational trends:', error)\r\n    }\r\n  }, [])\r\n\r\n  const refreshLiveMetrics = useCallback(async () => {\r\n    try {\r\n      const liveMetrics = await realTimeDataService.getLiveUserMetrics()\r\n      setState(prev => ({ ...prev, liveMetrics, lastUpdated: new Date() }))\r\n    } catch (error) {\r\n      console.error('Failed to refresh live metrics:', error)\r\n    }\r\n  }, [])\r\n\r\n  const refreshMarketInsights = useCallback(async () => {\r\n    try {\r\n      const marketInsights = await realTimeDataService.getMarketInsights()\r\n      setState(prev => ({ ...prev, marketInsights, lastUpdated: new Date() }))\r\n    } catch (error) {\r\n      console.error('Failed to refresh market insights:', error)\r\n    }\r\n  }, [])\r\n\r\n  // Manual refresh all data\r\n  const refresh = useCallback(() => {\r\n    loadData()\r\n  }, [loadData])\r\n\r\n  // Set up subscriptions and auto-refresh\r\n  useEffect(() => {\r\n    // Initial load\r\n    loadData()\r\n\r\n    let refreshTimer: NodeJS.Timeout | null = null\r\n    const unsubscribeFunctions: (() => void)[] = []\r\n    let stopRealTimeUpdates: (() => void) | null = null\r\n    let isCleanedUp = false\r\n\r\n    // Cleanup function to prevent memory leaks\r\n    const cleanup = () => {\r\n      if (isCleanedUp) return\r\n      isCleanedUp = true\r\n\r\n      // Cleanup subscriptions\r\n      unsubscribeFunctions.forEach(unsubscribe => {\r\n        try {\r\n          unsubscribe()\r\n        } catch (error) {\r\n          console.warn('Error during subscription cleanup:', error)\r\n        }\r\n      })\r\n      unsubscribeFunctions.length = 0\r\n      \r\n      // Stop real-time updates (reference counting will handle when to actually stop)\r\n      if (stopRealTimeUpdates) {\r\n        try {\r\n          stopRealTimeUpdates()\r\n        } catch (error) {\r\n          console.warn('Error stopping real-time updates:', error)\r\n        }\r\n        stopRealTimeUpdates = null\r\n      }\r\n      \r\n      // Clear refresh timer\r\n      if (refreshTimer) {\r\n        clearInterval(refreshTimer)\r\n        refreshTimer = null\r\n      }\r\n    }\r\n\r\n    if (enableSubscriptions) {\r\n      try {\r\n        // Set up real-time subscriptions\r\n        const unsubscribeGlobal = realTimeDataService.subscribe('globalStats', (data: GlobalLearningStats) => {\r\n          if (!isCleanedUp) {\r\n            setState(prev => ({ ...prev, globalStats: data, lastUpdated: new Date() }))\r\n          }\r\n        })\r\n\r\n        const unsubscribeTrends = realTimeDataService.subscribe('educationalTrends', (data: EducationalTrends) => {\r\n          if (!isCleanedUp) {\r\n            setState(prev => ({ ...prev, educationalTrends: data, lastUpdated: new Date() }))\r\n          }\r\n        })\r\n\r\n        const unsubscribeLive = realTimeDataService.subscribe('liveMetrics', (data: LiveUserMetrics) => {\r\n          if (!isCleanedUp) {\r\n            setState(prev => ({ ...prev, liveMetrics: data, lastUpdated: new Date() }))\r\n          }\r\n        })\r\n\r\n        const unsubscribeMarket = realTimeDataService.subscribe('marketInsights', (data: MarketInsights) => {\r\n          if (!isCleanedUp) {\r\n            setState(prev => ({ ...prev, marketInsights: data, lastUpdated: new Date() }))\r\n          }\r\n        })\r\n\r\n        unsubscribeFunctions.push(unsubscribeGlobal, unsubscribeTrends, unsubscribeLive, unsubscribeMarket)\r\n\r\n        // Start real-time updates service with reference counting\r\n        stopRealTimeUpdates = realTimeDataService.startRealTimeUpdates()\r\n      } catch (error) {\r\n        console.error('Error setting up real-time subscriptions:', error)\r\n      }\r\n    }\r\n\r\n    if (autoRefresh && refreshInterval > 0) {\r\n      // Set up auto-refresh timer with safe interval\r\n      refreshTimer = setInterval(() => {\r\n        if (!isCleanedUp) {\r\n          loadData()\r\n        }\r\n      }, refreshInterval)\r\n    }\r\n\r\n    return cleanup\r\n  }, [loadData, autoRefresh, refreshInterval, enableSubscriptions])\r\n\r\n  return {\r\n    ...state,\r\n    refresh,\r\n    refreshGlobalStats,\r\n    refreshEducationalTrends,\r\n    refreshLiveMetrics,\r\n    refreshMarketInsights,\r\n    // Utility functions\r\n    formatNumber: (num: number): string => {\r\n      if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`\r\n      if (num >= 1000) return `${(num / 1000).toFixed(1)}K`\r\n      return num.toString()\r\n    },\r\n    formatTime: (minutes: number): string => {\r\n      const hours = Math.floor(minutes / 60)\r\n      const mins = minutes % 60\r\n      if (hours > 0) return `${hours}h ${mins}m`\r\n      return `${mins}m`\r\n    },\r\n    getTimeSinceUpdate: (): string => {\r\n      if (!state.lastUpdated) return 'Never'\r\n      const now = new Date()\r\n      const diff = now.getTime() - state.lastUpdated.getTime()\r\n      const seconds = Math.floor(diff / 1000)\r\n      const minutes = Math.floor(seconds / 60)\r\n      \r\n      if (minutes > 0) return `${minutes}m ago`\r\n      return `${seconds}s ago`\r\n    }\r\n  }\r\n}\r\n\r\n// Hook for specific data types\r\nexport const useGlobalStats = () => {\r\n  const { globalStats, isLoading, error, refreshGlobalStats } = useRealTimeData({\r\n    enableSubscriptions: true,\r\n    autoRefresh: true,\r\n    refreshInterval: 15000 // More frequent updates for global stats\r\n  })\r\n\r\n  return {\r\n    data: globalStats,\r\n    isLoading,\r\n    error,\r\n    refresh: refreshGlobalStats\r\n  }\r\n}\r\n\r\nexport const useEducationalTrends = () => {\r\n  const { educationalTrends, isLoading, error, refreshEducationalTrends } = useRealTimeData({\r\n    enableSubscriptions: true,\r\n    autoRefresh: true,\r\n    refreshInterval: 60000 // Less frequent updates for trends\r\n  })\r\n\r\n  return {\r\n    data: educationalTrends,\r\n    isLoading,\r\n    error,\r\n    refresh: refreshEducationalTrends\r\n  }\r\n}\r\n\r\nexport const useLiveMetrics = () => {\r\n  const { liveMetrics, isLoading, error, refreshLiveMetrics } = useRealTimeData({\r\n    enableSubscriptions: true,\r\n    autoRefresh: true,\r\n    refreshInterval: 10000 // Very frequent updates for live metrics\r\n  })\r\n\r\n  return {\r\n    data: liveMetrics,\r\n    isLoading,\r\n    error,\r\n    refresh: refreshLiveMetrics\r\n  }\r\n}\r\n\r\nexport const useMarketInsights = () => {\r\n  const { marketInsights, isLoading, error, refreshMarketInsights } = useRealTimeData({\r\n    enableSubscriptions: true,\r\n    autoRefresh: true,\r\n    refreshInterval: 300000 // Less frequent updates for market data (5 minutes)\r\n  })\r\n\r\n  return {\r\n    data: marketInsights,\r\n    isLoading,\r\n    error,\r\n    refresh: refreshMarketInsights\r\n  }\r\n}","import { useState } from 'react'\r\nimport { useRealTimeData } from '../../hooks/useRealTimeData'\r\n\r\ninterface RealTimeStatsCardProps {\r\n  title: string\r\n  icon: string\r\n  className?: string\r\n  showRefreshButton?: boolean\r\n  compact?: boolean\r\n}\r\n\r\nconst RealTimeStatsCard: React.FC<RealTimeStatsCardProps> = ({\r\n  title,\r\n  icon,\r\n  className = '',\r\n  showRefreshButton = true,\r\n  compact = false\r\n}) => {\r\n  const {\r\n    globalStats,\r\n    liveMetrics,\r\n    isLoading,\r\n    error,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    lastUpdated,\r\n    refresh,\r\n    formatNumber,\r\n    formatTime,\r\n    getTimeSinceUpdate\r\n  } = useRealTimeData()\r\n\r\n  const [isRefreshing, setIsRefreshing] = useState(false)\r\n\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true)\r\n    await refresh()\r\n    setTimeout(() => setIsRefreshing(false), 1000) // Visual feedback\r\n  }\r\n\r\n  if (isLoading && !globalStats) {\r\n    return (\r\n      <div className={`card p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"h-6 bg-gray-300 dark:bg-gray-600 rounded w-32\"></div>\r\n            <div className=\"h-4 w-4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n          </div>\r\n          <div className=\"space-y-3\">\r\n            <div className=\"h-8 bg-gray-300 dark:bg-gray-600 rounded w-20\"></div>\r\n            <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-24\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`card p-6 border-red-200 dark:border-red-800 ${className}`}>\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h3 className=\"text-lg font-semibold text-red-600 dark:text-red-400\">\r\n            {icon} {title}\r\n          </h3>\r\n          {showRefreshButton && (\r\n            <button\r\n              onClick={handleRefresh}\r\n              className=\"text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300\"\r\n              disabled={isRefreshing}\r\n            >\r\n              <span className={isRefreshing ? 'animate-spin' : ''}>🔄</span>\r\n            </button>\r\n          )}\r\n        </div>\r\n        <div className=\"text-sm text-red-600 dark:text-red-400\">\r\n          Failed to load real-time data\r\n        </div>\r\n        <button\r\n          onClick={handleRefresh}\r\n          className=\"mt-2 text-sm text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 underline\"\r\n        >\r\n          Try again\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={`card p-6 ${className}`}>\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className={`font-semibold flex items-center gap-2 ${compact ? 'text-base' : 'text-lg'}`}>\r\n          {icon} {title}\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n        </h3>\r\n        {showRefreshButton && (\r\n          <button\r\n            onClick={handleRefresh}\r\n            className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n            disabled={isRefreshing}\r\n            title=\"Refresh data\"\r\n          >\r\n            <span className={isRefreshing ? 'animate-spin' : ''}>🔄</span>\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {globalStats && liveMetrics && (\r\n        <div className={`space-y-${compact ? '2' : '4'}`}>\r\n          {/* Key Metrics */}\r\n          <div className={`grid grid-cols-2 ${compact ? 'gap-2' : 'gap-4'}`}>\r\n            <div className=\"text-center\">\r\n              <div className={`font-bold text-blue-600 ${compact ? 'text-lg' : 'text-2xl'}`}>\r\n                {formatNumber(globalStats.activeStudySessions)}\r\n              </div>\r\n              <div className={`text-gray-600 dark:text-gray-400 ${compact ? 'text-xs' : 'text-sm'}`}>\r\n                Active Sessions\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className={`font-bold text-green-600 ${compact ? 'text-lg' : 'text-2xl'}`}>\r\n                {formatNumber(liveMetrics.onlineUsers)}\r\n              </div>\r\n              <div className={`text-gray-600 dark:text-gray-400 ${compact ? 'text-xs' : 'text-sm'}`}>\r\n                Online Users\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {!compact && (\r\n            <>\r\n              {/* Additional Stats */}\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-lg font-bold text-purple-600\">\r\n                    {formatNumber(globalStats.cardsStudiedToday)}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    Cards Today\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-lg font-bold text-orange-600\">\r\n                    {liveMetrics.averageAccuracy.toFixed(1)}%\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    Avg Accuracy\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Study Time */}\r\n              <div className=\"text-center\">\r\n                <div className=\"text-lg font-bold text-red-600\">\r\n                  {formatTime(globalStats.studyTimeToday)}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  Global Study Time Today\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          {/* Last Updated */}\r\n          <div className={`text-center text-gray-500 dark:text-gray-400 ${compact ? 'text-xs' : 'text-sm'}`}>\r\n            Updated {getTimeSinceUpdate()}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RealTimeStatsCard","import { useEducationalTrends } from '../../hooks/useRealTimeData'\r\n\r\ninterface TrendingTopicsProps {\r\n  className?: string\r\n  maxItems?: number\r\n  showGrowth?: boolean\r\n}\r\n\r\nconst TrendingTopics: React.FC<TrendingTopicsProps> = ({\r\n  className = '',\r\n  maxItems = 8,\r\n  showGrowth = true\r\n}) => {\r\n  const { data: trends, isLoading, error, refresh } = useEducationalTrends()\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`card p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-6 bg-gray-300 dark:bg-gray-600 rounded w-48 mb-4\"></div>\r\n          <div className=\"space-y-3\">\r\n            {[...Array(4)].map((_, i) => (\r\n              <div key={i} className=\"flex justify-between items-center\">\r\n                <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-32\"></div>\r\n                <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-16\"></div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error || !trends) {\r\n    return (\r\n      <div className={`card p-6 border-red-200 dark:border-red-800 ${className}`}>\r\n        <h3 className=\"text-lg font-semibold text-red-600 dark:text-red-400 mb-4\">\r\n          📈 Trending Topics\r\n        </h3>\r\n        <div className=\"text-sm text-red-600 dark:text-red-400 mb-2\">\r\n          Failed to load trending data\r\n        </div>\r\n        <button\r\n          onClick={refresh}\r\n          className=\"text-sm text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 underline\"\r\n        >\r\n          Try again\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const formatNumber = (num: number): string => {\r\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`\r\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`\r\n    return num.toString()\r\n  }\r\n\r\n  const getGrowthColor = (growth: number): string => {\r\n    if (growth >= 100) return 'text-green-600 dark:text-green-400'\r\n    if (growth >= 50) return 'text-blue-600 dark:text-blue-400'\r\n    if (growth >= 20) return 'text-yellow-600 dark:text-yellow-400'\r\n    return 'text-gray-600 dark:text-gray-400'\r\n  }\r\n\r\n  const getGrowthIcon = (growth: number): string => {\r\n    if (growth >= 100) return '🚀'\r\n    if (growth >= 50) return '📈'\r\n    if (growth >= 20) return '⬆️'\r\n    return '➡️'\r\n  }\r\n\r\n  return (\r\n    <div className={`card p-6 ${className}`}>\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\r\n          📈 Trending Topics\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n        </h3>\r\n        <button\r\n          onClick={refresh}\r\n          className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n          title=\"Refresh trends\"\r\n        >\r\n          🔄\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"space-y-3\">\r\n        {trends.popularSubjects.slice(0, maxItems).map((subject, index) => (\r\n          <div\r\n            key={subject.subject}\r\n            className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\r\n          >\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm\">\r\n                {index + 1}\r\n              </div>\r\n              <div>\r\n                <div className=\"font-semibold text-gray-800 dark:text-gray-200\">\r\n                  {subject.subject}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  {formatNumber(subject.learners)} learners\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {showGrowth && (\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className=\"text-lg\">{getGrowthIcon(subject.growth)}</span>\r\n                <div className=\"text-right\">\r\n                  <div className={`font-bold ${getGrowthColor(subject.growth)}`}>\r\n                    +{subject.growth.toFixed(1)}%\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                    growth\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Learning Methods Section */}\r\n      <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n        <h4 className=\"text-md font-semibold mb-3 text-gray-800 dark:text-gray-200\">\r\n          🎯 Most Effective Methods\r\n        </h4>\r\n        <div className=\"space-y-2\">\r\n          {trends.learningMethods.slice(0, 3).map((method) => (\r\n            <div key={method.method} className=\"flex items-center justify-between\">\r\n              <span className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                {method.method}\r\n              </span>\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"w-16 bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\r\n                  <div\r\n                    className=\"bg-blue-600 h-2 rounded-full\"\r\n                    style={{ width: `${method.effectiveness}%` }}\r\n                  ></div>\r\n                </div>\r\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">\r\n                  {method.effectiveness.toFixed(0)}%\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Peak Hours Visualization */}\r\n      <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n        <h4 className=\"text-md font-semibold mb-3 text-gray-800 dark:text-gray-200\">\r\n          ⏰ Peak Study Hours Today\r\n        </h4>\r\n        <div className=\"flex items-end justify-between gap-1 h-16\">\r\n          {trends.studyPatterns.peakHours.filter((_, i) => i % 2 === 0).map((hour) => (\r\n            <div key={hour.hour} className=\"flex flex-col items-center flex-1\">\r\n              <div\r\n                className=\"bg-gradient-to-t from-blue-600 to-blue-400 rounded-sm w-full\"\r\n                style={{ height: `${Math.max(hour.activity / 2, 8)}px` }}\r\n                title={`${hour.hour}:00 - ${hour.activity}% activity`}\r\n              ></div>\r\n              <div className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">\r\n                {hour.hour}h\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-2 text-center\">\r\n          Current hour activity: {trends.studyPatterns.peakHours[new Date().getHours()]?.activity || 0}%\r\n        </div>\r\n      </div>\r\n\r\n      {/* Last Updated */}\r\n      <div className=\"text-xs text-gray-500 dark:text-gray-400 text-center mt-4\">\r\n        Last updated: {new Date(trends.lastUpdated).toLocaleTimeString()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TrendingTopics","import { useMarketInsights } from '../../hooks/useRealTimeData'\r\n\r\ninterface MarketInsightsProps {\r\n  className?: string\r\n  maxSkills?: number\r\n  maxIndustries?: number\r\n  showCertifications?: boolean\r\n}\r\n\r\nconst MarketInsights: React.FC<MarketInsightsProps> = ({\r\n  className = '',\r\n  maxSkills = 6,\r\n  maxIndustries = 4,\r\n  showCertifications = true\r\n}) => {\r\n  const { data: insights, isLoading, error, refresh } = useMarketInsights()\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`card p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-6 bg-gray-300 dark:bg-gray-600 rounded w-48 mb-4\"></div>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-3\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"flex justify-between items-center\">\r\n                  <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-24\"></div>\r\n                  <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-16\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"space-y-3\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"h-16 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error || !insights) {\r\n    return (\r\n      <div className={`card p-6 border-red-200 dark:border-red-800 ${className}`}>\r\n        <h3 className=\"text-lg font-semibold text-red-600 dark:text-red-400 mb-4\">\r\n          💼 Market Insights\r\n        </h3>\r\n        <div className=\"text-sm text-red-600 dark:text-red-400 mb-2\">\r\n          Failed to load market data\r\n        </div>\r\n        <button\r\n          onClick={refresh}\r\n          className=\"text-sm text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 underline\"\r\n        >\r\n          Try again\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const getDemandColor = (demand: number): string => {\r\n    if (demand >= 90) return 'text-red-600 dark:text-red-400'\r\n    if (demand >= 80) return 'text-orange-600 dark:text-orange-400'\r\n    if (demand >= 70) return 'text-yellow-600 dark:text-yellow-400'\r\n    return 'text-green-600 dark:text-green-400'\r\n  }\r\n\r\n  const getDemandLabel = (demand: number): string => {\r\n    if (demand >= 90) return 'Very High'\r\n    if (demand >= 80) return 'High'\r\n    if (demand >= 70) return 'Medium'\r\n    return 'Growing'\r\n  }\r\n\r\n  const getGrowthIcon = (growth: number): string => {\r\n    if (growth >= 150) return '🚀'\r\n    if (growth >= 100) return '📈'\r\n    if (growth >= 50) return '⬆️'\r\n    return '➡️'\r\n  }\r\n\r\n  return (\r\n    <div className={`card p-6 ${className}`}>\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <h3 className=\"text-lg font-semibold flex items-center gap-2\">\r\n          💼 Market Insights\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n        </h3>\r\n        <button\r\n          onClick={refresh}\r\n          className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n          title=\"Refresh market data\"\r\n        >\r\n          🔄\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Skills in Demand */}\r\n        <div>\r\n          <h4 className=\"text-md font-semibold mb-4 text-gray-800 dark:text-gray-200 flex items-center gap-2\">\r\n            🎯 Skills in High Demand\r\n          </h4>\r\n          <div className=\"space-y-3\">\r\n            {insights.skillDemand.slice(0, maxSkills).map((skill, index) => (\r\n              <div\r\n                key={skill.skill}\r\n                className=\"bg-gray-50 dark:bg-gray-700 p-3 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-xs\">\r\n                      {index + 1}\r\n                    </div>\r\n                    <span className=\"font-semibold text-gray-800 dark:text-gray-200\">\r\n                      {skill.skill}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"text-lg\">{getGrowthIcon(skill.growth)}</span>\r\n                    <span className=\"text-sm font-bold text-green-600 dark:text-green-400\">\r\n                      +{skill.growth.toFixed(0)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex-1 mr-3\">\r\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\r\n                      <div\r\n                        className=\"bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-300\"\r\n                        style={{ width: `${skill.demand}%` }}\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n                  <span className={`text-sm font-semibold ${getDemandColor(skill.demand)}`}>\r\n                    {getDemandLabel(skill.demand)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Industry Trends */}\r\n        <div>\r\n          <h4 className=\"text-md font-semibold mb-4 text-gray-800 dark:text-gray-200 flex items-center gap-2\">\r\n            🏭 Growing Industries\r\n          </h4>\r\n          <div className=\"space-y-3\">\r\n            {insights.industryTrends.slice(0, maxIndustries).map((industry, index) => (\r\n              <div\r\n                key={industry.industry}\r\n                className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <h5 className=\"font-semibold text-gray-800 dark:text-gray-200 flex items-center gap-2\">\r\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-green-500 to-blue-600 rounded-full flex items-center justify-center text-white font-bold text-xs\">\r\n                      {index + 1}\r\n                    </div>\r\n                    {industry.industry}\r\n                  </h5>\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <span className=\"text-lg\">{getGrowthIcon(industry.growth)}</span>\r\n                    <span className=\"text-sm font-bold text-green-600 dark:text-green-400\">\r\n                      +{industry.growth.toFixed(0)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  <span className=\"font-medium\">Key Skills: </span>\r\n                  {industry.skills.join(', ')}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Certifications Section */}\r\n      {showCertifications && (\r\n        <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n          <h4 className=\"text-md font-semibold mb-4 text-gray-800 dark:text-gray-200 flex items-center gap-2\">\r\n            🏆 Most Valuable Certifications\r\n          </h4>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n            {insights.certificationValue.slice(0, 4).map((cert, index) => (\r\n              <div\r\n                key={cert.cert}\r\n                className=\"bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 p-3 rounded-lg border border-yellow-200 dark:border-yellow-800\"\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-yellow-500 to-orange-600 rounded-full flex items-center justify-center text-white font-bold text-xs\">\r\n                      {index + 1}\r\n                    </div>\r\n                    <span className=\"font-semibold text-gray-800 dark:text-gray-200 text-sm\">\r\n                      {cert.cert}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center justify-between text-xs\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"text-gray-600 dark:text-gray-400\">Value:</span>\r\n                    <div className=\"w-12 bg-gray-200 dark:bg-gray-600 rounded-full h-1.5\">\r\n                      <div\r\n                        className=\"bg-yellow-500 h-1.5 rounded-full\"\r\n                        style={{ width: `${cert.value}%` }}\r\n                      ></div>\r\n                    </div>\r\n                    <span className=\"font-semibold text-yellow-600 dark:text-yellow-400\">\r\n                      {cert.value.toFixed(0)}%\r\n                    </span>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center gap-1\">\r\n                    <span className=\"text-gray-600 dark:text-gray-400\">Popular:</span>\r\n                    <span className=\"font-semibold text-orange-600 dark:text-orange-400\">\r\n                      {cert.popularity.toFixed(0)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Market Summary */}\r\n      <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\r\n          <h5 className=\"font-semibold text-blue-800 dark:text-blue-200 mb-2 flex items-center gap-2\">\r\n            💡 Market Summary\r\n          </h5>\r\n          <div className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\r\n            <p>• AI/ML skills show the highest demand with {insights.skillDemand[0]?.growth.toFixed(0)}% growth</p>\r\n            <p>• Technology sector leads with {insights.industryTrends[0]?.growth.toFixed(0)}% industry growth</p>\r\n            <p>• Cloud certifications offer the best ROI for career advancement</p>\r\n            <p>• Remote learning skills are becoming increasingly valuable</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Last Updated */}\r\n      <div className=\"text-xs text-gray-500 dark:text-gray-400 text-center mt-4\">\r\n        Market data updated: {new Date(insights.lastUpdated).toLocaleTimeString()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MarketInsights"],"names":["XPBar","currentXP","level","className","getXPForNextLevel","lvl","Math","pow","currentLevelXP","getXPForLevel","nextLevelXP","xpInCurrentLevel","xpNeededForNextLevel","progressPercentage","max","min","jsxs","children","toLocaleString","jsx","style","width","Fragment","StreakCounter","currentStreak","longestStreak","lastStudyDate","isStreakActive","lastStudy","Date","today","diffTime","abs","getTime","ceil","status","getStreakStatus","getStreakColor","getStreakIcon","getStreakMessage","toLocaleDateString","Array","from","length","_","i","MonthlyChallenge","challenge","participation","claimMilestoneReward","useGamificationStore","progress","milestoneProgress","weeklyProgress","bestWeek","totalTarget","requirements","reduce","sum","req","target","totalCurrent","key","type","milestones","id","name","reward","storyChapters","week","title","unlocked","some","w","storyUnlocked","handleClaimMilestone","milestoneId","getWeekProgress","find","getDifficultyColor","getDifficultyLabel","description","endDate","now","toFixed","map","weekData","isCompleted","completed","isCurrentWeek","startDate","Object","values","a","b","chapter","milestone","isClaimed","canClaim","onClick","CommunityLeaderboard","challengeName","selectedTier","setSelectedTier","useState","timeFilter","setTimeFilter","currentLeaderboard","bronze","userId","username","score","rank","change","seasonalRewards","silver","gold","diamond","getTierColor","tier","colors","getTierIcon","icons","getRankIcon","getChangeIcon","getTierRequirement","getTierRewards","filter","charAt","toUpperCase","slice","entry","includes","keys","useRealTimeData","options","autoRefresh","refreshInterval","enableSubscriptions","state","setState","globalStats","educationalTrends","liveMetrics","marketInsights","isLoading","error","lastUpdated","loadData","useCallback","async","prev","Promise","all","realTimeDataService","getGlobalLearningStats","getEducationalTrends","getLiveUserMetrics","getMarketInsights","Error","message","refreshGlobalStats","console","refreshEducationalTrends","refreshLiveMetrics","refreshMarketInsights","refresh","useEffect","refreshTimer","unsubscribeFunctions","stopRealTimeUpdates","isCleanedUp","cleanup","forEach","unsubscribe","warn","clearInterval","unsubscribeGlobal","subscribe","data","unsubscribeTrends","unsubscribeLive","unsubscribeMarket","push","startRealTimeUpdates","setInterval","formatNumber","num","toString","formatTime","minutes","hours","floor","mins","getTimeSinceUpdate","diff","seconds","useEducationalTrends","useMarketInsights","RealTimeStatsCard","icon","showRefreshButton","compact","isRefreshing","setIsRefreshing","handleRefresh","setTimeout","disabled","activeStudySessions","onlineUsers","cardsStudiedToday","averageAccuracy","studyTimeToday","TrendingTopics","maxItems","showGrowth","trends","getGrowthColor","growth","getGrowthIcon","popularSubjects","subject","index","learners","learningMethods","method","effectiveness","studyPatterns","peakHours","hour","height","activity","getHours","toLocaleTimeString","MarketInsights","maxSkills","maxIndustries","showCertifications","insights","getDemandColor","demand","getDemandLabel","skillDemand","skill","industryTrends","industry","skills","join","certificationValue","cert","value","popularity"],"mappings":"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"}