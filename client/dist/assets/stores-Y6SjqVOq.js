const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/zip-vendor-CjLimuGR.js","assets/react-vendor-BjtfGs5D.js","assets/vendor-CfVaRPIS.js","assets/ui-vendor-B-dksMZM.js","assets/sql-vendor-BuM0JLyb.js"])))=>i.map(i=>d[i]);
import{c as D,d,p as k,a as U}from"./data-vendor-DvmbASBZ.js";const E={required:(t="This field is required")=>({test:n=>n.trim().length>0,message:t}),minLength:(t,n)=>({test:e=>e.length>=t,message:n||`Must be at least ${t} characters long`}),maxLength:(t,n)=>({test:e=>e.length<=t,message:n||`Must be no more than ${t} characters long`}),email:(t="Please enter a valid email address")=>({test:n=>/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(n),message:t}),password:(t="Password must be at least 8 characters with uppercase, lowercase, number, and special character")=>({test:n=>/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(n),message:t}),username:(t="Username must be 3-50 characters and contain only letters, numbers, and underscores")=>({test:n=>/^[a-zA-Z0-9_]{3,50}$/.test(n),message:t}),noXSS:(t="Invalid characters detected")=>({test:n=>!/<script|javascript:|data:|vbscript:|onload=|onerror=/i.test(n),message:t}),noSQLInjection:(t="Invalid characters detected")=>({test:n=>![/'/,/\\'/,/;/,/--/,/\/\*/,/(union|select|insert|delete|update|drop|create|alter|exec|execute)\s/i].some(a=>a.test(n)),message:t})};function N(t,n){const e=[];for(const r of n)r.test(t)||e.push(r.message);return{isValid:e.length===0,errors:e}}function M(t,n){const e={};for(const[r,a]of Object.entries(n)){const s=t[r]||"";e[r]=N(s,a)}return e}function L(t){return t.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/\//g,"&#x2F;").trim()}const q={signUp:{email:[E.required(),E.email()],password:[E.required(),E.password()],username:[E.required(),E.username()]},signIn:{email:[E.required()],password:[E.required(),E.minLength(6)]}},O=async t=>{d.log("[POCKETBASE_AUTH_STORE]","START - convertPocketbaseUser",{userId:t.id,email:t.email,username:t.username});try{const n={id:t.id,email:t.email,username:t.username||t.email?.split("@")[0]||"User",level:t.level||1,totalXp:t.total_xp||0,coins:t.coins||100,gems:t.gems||10,createdAt:t.created||new Date().toISOString(),lastActive:t.last_active||new Date().toISOString(),preferences:t.preferences||{theme:"system",language:"en",notifications:!0,soundEffects:!0,dailyGoal:50,timezone:"UTC"}};return d.log("[POCKETBASE_AUTH_STORE]","END - convertPocketbaseUser",n),n}catch(n){d.error("[POCKETBASE_AUTH_STORE]","Error in convertPocketbaseUser",{error:n,stack:n instanceof Error?n.stack:void 0,userId:t.id});const e={id:t.id,email:t.email||"unknown@example.com",username:t.username||t.email?.split("@")[0]||"User",level:1,totalXp:0,coins:100,gems:10,createdAt:t.created||new Date().toISOString(),lastActive:new Date().toISOString(),preferences:{theme:"system",language:"en",notifications:!0,soundEffects:!0,dailyGoal:50,timezone:"UTC"}};return d.log("[POCKETBASE_AUTH_STORE]","END - convertPocketbaseUser (fallback)",e),e}},W=(t,n,e)=>{const r=M({email:t,password:n,username:e},q.signUp),a=Object.entries(r).filter(([s,o])=>!o.isValid).map(([s,o])=>`${s}: ${o.errors.join(", ")}`);if(a.length>0)throw new Error(a.join("; "))},j=(t,n)=>{const e=M({email:t,password:n},q.signIn),r=Object.entries(e).filter(([a,s])=>!s.isValid).map(([a,s])=>`${a}: ${s.errors.join(", ")}`);if(r.length>0)throw new Error(r.join("; "))},G=(t,n,e)=>({username:L(n),email:L(t),password:e,passwordConfirm:e,level:1,total_xp:0,coins:100,gems:10,last_active:new Date().toISOString(),preferences:{theme:"system",language:"en",notifications:!0,soundEffects:!0,dailyGoal:50,timezone:"UTC"}});const X=t=>t instanceof Error?t.message.includes("username")?"Username already exists or is invalid":t.message.includes("email")?"Email already exists or is invalid":t.message:"Registration failed",J=t=>t instanceof Error?t.message.includes("Failed to authenticate")?"Invalid email/username or password. Please check your credentials and try again.":t.message.includes("Too many requests")?"Too many login attempts. Please wait a moment and try again.":t.message:"Login failed",V=(t,n)=>!1,Q=async(t,n)=>{const e=L(t);try{return await k.collection("users").authWithPassword(e,n)}catch{return d.log("[POCKETBASE_AUTH_STORE]","Email login failed, trying username"),await k.collection("users").authWithPassword(e,n)}},Z=async t=>{try{await k.collection("users").update(t,{last_active:new Date().toISOString()}),d.log("[POCKETBASE_AUTH_STORE]","Updated last active time")}catch(n){d.warn("[POCKETBASE_AUTH_STORE]","Could not update last active time",{error:n})}},$=D()((t,n)=>({user:null,session:null,isAuthenticated:!1,isLoading:!1,error:null,signUp:async(e,r,a)=>{d.log("[POCKETBASE_AUTH_STORE]","START - signUp",{email:e,username:a,passwordLength:r.length}),t({isLoading:!0,error:null});try{W(e,r,a);const s=G(e,a,r);d.log("[POCKETBASE_AUTH_STORE]","Creating user in PocketBase",{email:s.email,username:s.username});const o=await k.collection("users").create(s);d.log("[POCKETBASE_AUTH_STORE]","User created successfully",{userId:o.id});const c=await k.collection("users").authWithPassword(s.email,r);d.log("[POCKETBASE_AUTH_STORE]","SignUp with auth successful",{userId:c.record.id,hasToken:!!c.token});const l=await O(c.record);t({user:l,session:c,isAuthenticated:!0,isLoading:!1,error:null})}catch(s){d.error("[POCKETBASE_AUTH_STORE]","SignUp error",{error:s,stack:s instanceof Error?s.stack:void 0}),t({error:X(s),isLoading:!1})}d.log("[POCKETBASE_AUTH_STORE]","END - signUp")},signIn:async(e,r)=>{d.log("[POCKETBASE_AUTH_STORE]","START - signIn",{email:e,passwordLength:r.length,isDemoLogin:e==="demo"}),t({isLoading:!0,error:null});const a=setTimeout(()=>{d.warn("[POCKETBASE_AUTH_STORE]","SignIn timeout reached"),t({isLoading:!1,error:"Login timed out. Please try again."})},1e4);try{V(e,r),j(e,r),d.log("[POCKETBASE_AUTH_STORE]","Attempting PocketBase authentication");const s=await Q(e,r);if(d.log("[POCKETBASE_AUTH_STORE]","SignIn response",{hasRecord:!!s.record,hasToken:!!s.token,userId:s.record?.id}),s.record&&s.token){d.log("[POCKETBASE_AUTH_STORE]","SignIn successful, converting user profile");const o=await O(s.record);await Z(s.record.id),clearTimeout(a),t({user:o,session:s,isAuthenticated:!0,isLoading:!1,error:null}),d.log("[POCKETBASE_AUTH_STORE]","END - signIn (success)")}else d.warn("[POCKETBASE_AUTH_STORE]","No user or token in response"),clearTimeout(a),t({error:"Invalid login response - no user or token",isLoading:!1})}catch(s){d.error("[POCKETBASE_AUTH_STORE]","SignIn error",{error:s,stack:s instanceof Error?s.stack:void 0}),clearTimeout(a),t({error:J(s),isLoading:!1})}d.log("[POCKETBASE_AUTH_STORE]","END - signIn")},signOut:async()=>{d.log("[POCKETBASE_AUTH_STORE]","START - signOut");try{d.log("[POCKETBASE_AUTH_STORE]","Calling PocketBase authStore.clear"),k.authStore.clear(),d.log("[POCKETBASE_AUTH_STORE]","Clearing auth state"),t({user:null,session:null,isAuthenticated:!1,error:null}),d.log("[POCKETBASE_AUTH_STORE]","END - signOut (success)")}catch(e){d.error("[POCKETBASE_AUTH_STORE]","SignOut error",{error:e,stack:e instanceof Error?e.stack:void 0}),t({error:e instanceof Error?e.message:"Logout failed"})}},resetPassword:async e=>{d.log("[POCKETBASE_AUTH_STORE]","START - resetPassword",{email:e}),t({isLoading:!0,error:null});try{await k.collection("users").requestPasswordReset(e),t({isLoading:!1,error:null}),d.log("[POCKETBASE_AUTH_STORE]","END - resetPassword (success)")}catch(r){d.error("[POCKETBASE_AUTH_STORE]","Reset password error",{error:r,stack:r instanceof Error?r.stack:void 0});let a="Password reset failed";r instanceof Error&&(r.message.includes("Invalid email")?a="Please enter a valid email address.":r.message.includes("not found")?a="No account found with this email address.":a=r.message),t({error:a,isLoading:!1})}},updatePassword:async e=>{d.log("[POCKETBASE_AUTH_STORE]","START - updatePassword",{passwordLength:e.length});const r=n();d.log("[POCKETBASE_AUTH_STORE]","Current auth state",{hasUser:!!r.user,hasSession:!!r.session,isAuthenticated:r.isAuthenticated}),t({isLoading:!0,error:null});try{if(!e||e.length<6)throw new Error("Password must be at least 6 characters long.");if(!r.user?.id)throw new Error("No authenticated user found");d.log("[POCKETBASE_AUTH_STORE]","Calling pb.collection.update"),await k.collection("users").update(r.user.id,{password:e,passwordConfirm:e}),d.log("[POCKETBASE_AUTH_STORE]","Password update successful"),t({isLoading:!1,error:null}),d.log("[POCKETBASE_AUTH_STORE]","END - updatePassword (success)")}catch(a){const s=a instanceof Error?a.message:"An unknown error occurred during password update.";throw d.error("[POCKETBASE_AUTH_STORE]","UpdatePassword failed",{error:s,errorType:a?.constructor?.name,stack:a instanceof Error?a.stack:void 0}),t({isLoading:!1,error:s}),new Error(s)}},updateProfile:async e=>{const{user:r}=n();if(d.log("[POCKETBASE_AUTH_STORE]","START - updateProfile",{userId:r?.id,updates:Object.keys(e)}),!r){d.warn("[POCKETBASE_AUTH_STORE]","No user found for profile update");return}try{const a={username:e.username,level:e.level,total_xp:e.totalXp,coins:e.coins,gems:e.gems,preferences:e.preferences,last_active:new Date().toISOString()};d.log("[POCKETBASE_AUTH_STORE]","Updating profile in database",a),await k.collection("users").update(r.id,a),d.log("[POCKETBASE_AUTH_STORE]","Updating local user state"),t({user:{...r,...e}}),d.log("[POCKETBASE_AUTH_STORE]","END - updateProfile (success)")}catch(a){d.error("[POCKETBASE_AUTH_STORE]","Profile update error",{error:a,stack:a instanceof Error?a.stack:void 0}),t({error:a instanceof Error?a.message:"Profile update failed"})}},clearError:()=>{d.log("[POCKETBASE_AUTH_STORE]","Clearing error state"),t({error:null})},initializeAuth:async()=>{d.log("[POCKETBASE_AUTH_STORE]","START - initializeAuth");try{if(k.authStore.isValid&&k.authStore.model){d.log("[POCKETBASE_AUTH_STORE]","Valid auth store found, converting user",{userId:k.authStore.model.id,email:k.authStore.model.email});const e=await O(k.authStore.model);d.log("[POCKETBASE_AUTH_STORE]","Setting authenticated state from initialization"),t({user:e,session:{record:k.authStore.model,token:k.authStore.token},isAuthenticated:!0})}else d.info("[POCKETBASE_AUTH_STORE]","No valid auth store found during initialization");d.log("[POCKETBASE_AUTH_STORE]","END - initializeAuth")}catch(e){d.error("[POCKETBASE_AUTH_STORE]","Auth initialization error",{error:e,stack:e instanceof Error?e.stack:void 0}),t({user:null,session:null,isAuthenticated:!1})}},login:async(e,r)=>{const{signIn:a}=n();await a(e,r)},register:async(e,r,a)=>{const{signUp:s}=n();await s(e,a,r)},logout:()=>{const{signOut:e}=n();e()},updateUser:e=>{const{user:r}=n();r&&t({user:{...r,...e}})}}));k.authStore.onChange((t,n)=>{d.info("[POCKETBASE_AUTH_STORE]","Auth state change detected",{hasToken:!!t,hasRecord:!!n,userId:n?.id,timestamp:new Date().toISOString()}),t&&n?(d.log("[POCKETBASE_AUTH_STORE]","Processing auth state change - user logged in"),O(n).then(e=>{d.log("[POCKETBASE_AUTH_STORE]","Updating auth store for logged in user"),$.setState({user:e,session:{record:n,token:t},isAuthenticated:!0})}).catch(e=>{d.error("[POCKETBASE_AUTH_STORE]","Failed to convert user during auth change",{error:e,userId:n.id})})):(d.log("[POCKETBASE_AUTH_STORE]","Processing auth state change - user logged out"),$.setState({user:null,session:null,isAuthenticated:!1}))});const ne=D()(U((t,n)=>({theme:"system",systemTheme:"light",setTheme:e=>{t({theme:e});const{systemTheme:r}=n();(e==="system"?r:e)==="dark"?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")},toggleTheme:()=>{const{theme:e}=n(),r=e==="light"?"dark":"light";n().setTheme(r)},initializeTheme:()=>{const e=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";t({systemTheme:e}),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",s=>{const o=s.matches?"dark":"light";t({systemTheme:o});const{theme:c}=n();c==="system"&&(o==="dark"?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark"))});const{theme:r}=n();(r==="system"?e:r)==="dark"?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")}}),{name:"theme-storage",partialize:t=>({theme:t.theme})})),x=[{id:"1",name:"First Steps",description:"Complete your first study session",icon:"🎯",category:"study_milestones",requirements:[{type:"sessions_completed",value:1,operator:"gte"}],xpReward:50,coinReward:10,isSecret:!1,rarity:"common"},{id:"2",name:"Streak Master",description:"Maintain a 7-day study streak",icon:"🔥",category:"streaks",requirements:[{type:"current_streak",value:7,operator:"gte"}],xpReward:200,coinReward:50,isSecret:!1,rarity:"rare"},{id:"3",name:"Perfect Score",description:"Get 100% accuracy in a 20+ card session",icon:"💯",category:"accuracy",requirements:[{type:"session_accuracy",value:100,operator:"eq"},{type:"session_cards",value:20,operator:"gte"}],xpReward:150,coinReward:30,isSecret:!1,rarity:"rare"},{id:"4",name:"Speed Demon",description:"Complete 50 cards in under 10 minutes",icon:"⚡",category:"special",requirements:[{type:"cards_in_session",value:50,operator:"gte"},{type:"session_time",value:600,operator:"lte"}],xpReward:300,coinReward:75,isSecret:!1,rarity:"epic"},{id:"5",name:"Scholar",description:"Study 1000 cards total",icon:"📚",category:"study_milestones",requirements:[{type:"total_cards",value:1e3,operator:"gte"}],xpReward:500,coinReward:100,isSecret:!1,rarity:"epic"},{id:"6",name:"Legend",description:"Reach level 20",icon:"👑",category:"special",requirements:[{type:"user_level",value:20,operator:"gte"}],xpReward:1e3,coinReward:500,isSecret:!1,rarity:"legendary"}],b=[{id:"1",title:"Daily Grind",description:"Study 25 cards today",type:"daily",requirements:[{type:"cards_studied_today",target:25,description:"Study 25 cards"}],rewards:[{type:"xp",amount:50},{type:"coins",amount:10}],startDate:new Date().toISOString(),endDate:new Date(Date.now()+1440*60*1e3).toISOString(),isActive:!0,participantCount:1247},{id:"2",title:"Weekly Warrior",description:"Complete 200 cards this week",type:"weekly",requirements:[{type:"cards_studied_week",target:200,description:"Study 200 cards this week"}],rewards:[{type:"xp",amount:200},{type:"coins",amount:50},{type:"gems",amount:5}],startDate:new Date(Date.now()-4320*60*1e3).toISOString(),endDate:new Date(Date.now()+5760*60*1e3).toISOString(),isActive:!0,participantCount:892},{id:"3",title:"Accuracy Master",description:"Maintain 90%+ accuracy for 5 sessions",type:"weekly",requirements:[{type:"accuracy_sessions",target:5,description:"Complete 5 sessions with 90%+ accuracy"}],rewards:[{type:"xp",amount:300},{type:"coins",amount:75},{type:"badge",itemId:"accuracy_master"}],startDate:new Date(Date.now()-2880*60*1e3).toISOString(),endDate:new Date(Date.now()+7200*60*1e3).toISOString(),isActive:!0,participantCount:456}],R={xp_weekly:{id:"xp_weekly",type:"xp",period:"weekly",entries:[{userId:"1",username:"DemoUser",score:2500,rank:1,change:0},{userId:"2",username:"StudyMaster",score:2350,rank:2,change:1},{userId:"3",username:"FlashcardPro",score:2200,rank:3,change:-1},{userId:"4",username:"LearnFast",score:2100,rank:4,change:2},{userId:"5",username:"MemoryKing",score:2050,rank:5,change:-1},{userId:"6",username:"QuizWhiz",score:1980,rank:6,change:0},{userId:"7",username:"CardShark",score:1920,rank:7,change:3},{userId:"8",username:"BrainBoost",score:1850,rank:8,change:-2},{userId:"9",username:"StudyBuddy",score:1800,rank:9,change:1},{userId:"10",username:"FlashGenius",score:1750,rank:10,change:-1}],updatedAt:new Date().toISOString()},streak_all_time:{id:"streak_all_time",type:"streak",period:"all_time",entries:[{userId:"2",username:"StudyMaster",score:45,rank:1,change:0},{userId:"3",username:"FlashcardPro",score:38,rank:2,change:0},{userId:"4",username:"LearnFast",score:32,rank:3,change:1},{userId:"1",username:"DemoUser",score:28,rank:4,change:-1},{userId:"5",username:"MemoryKing",score:25,rank:5,change:0},{userId:"6",username:"QuizWhiz",score:22,rank:6,change:2},{userId:"7",username:"CardShark",score:20,rank:7,change:-1},{userId:"8",username:"BrainBoost",score:18,rank:8,change:-1},{userId:"9",username:"StudyBuddy",score:15,rank:9,change:0},{userId:"10",username:"FlashGenius",score:12,rank:10,change:0}],updatedAt:new Date().toISOString()}},B=t=>Math.floor(Math.sqrt(t/100))+1,F=t=>Math.pow(t,2)*100,v=()=>({totalCards:0,cardsStudiedToday:0,cardsStudiedThisWeek:0,cardsStudiedThisMonth:0,averageAccuracy:0,totalStudyTime:0,studyTimeToday:0,studyTimeThisWeek:0,decksCreated:0,decksCompleted:0,longestStreak:0,currentStreak:0,gold:0,diamonds:0,level:1,xp:0,xpToNextLevel:100}),K=()=>({totalCards:1250,cardsStudiedToday:45,cardsStudiedThisWeek:180,cardsStudiedThisMonth:720,averageAccuracy:87.5,totalStudyTime:2400,studyTimeToday:35,studyTimeThisWeek:240,decksCreated:8,decksCompleted:3,longestStreak:28,currentStreak:12,gold:100,diamonds:10,level:8,xp:6400,xpToNextLevel:8100}),oe=D()(U((t,n)=>({userStats:v(),isFirstTimeUser:!0,isInitialized:!1,achievements:x,userAchievements:[],userStreak:null,activeChallenges:b,userChallengeParticipations:[],leaderboards:R,updateUserStats:e=>{t(r=>{const a={...r.userStats,...e};return e.xp!==void 0&&(a.level=B(a.xp),a.xpToNextLevel=F(a.level)),{userStats:a,isFirstTimeUser:!1,isInitialized:!0}})},addUserAchievement:e=>{const{userAchievements:r}=n();r.find(a=>a.achievementId===e)||t(a=>({userAchievements:[...a.userAchievements,{id:Date.now().toString(),userId:"1",achievementId:e,earnedAt:new Date().toISOString()}]}))},updateStreak:e=>{t(r=>({userStreak:r.userStreak?{...r.userStreak,...e}:null}))},joinChallenge:e=>{const{userChallengeParticipations:r}=n();r.find(a=>a.challengeId===e)||t(a=>({userChallengeParticipations:[...a.userChallengeParticipations,{id:Date.now().toString(),userId:"1",challengeId:e,progress:{},completed:!1,joinedAt:new Date().toISOString(),milestoneProgress:{},weeklyProgress:[],currentStreak:0,bestWeek:0}]}))},updateChallengeProgress:(e,r)=>{t(a=>({userChallengeParticipations:a.userChallengeParticipations.map(s=>s.challengeId===e?{...s,progress:{...s.progress,...r}}:s)}))},claimChallengeReward:e=>{const{activeChallenges:r,userChallengeParticipations:a}=n(),s=r.find(c=>c.id===e),o=a.find(c=>c.challengeId===e);if(s&&o&&o.completed){let c=0,l=0;s.rewards.forEach(i=>{i.type==="xp"&&i.amount?c+=i.amount:i.type==="coins"&&i.amount&&(l+=i.amount)}),t(i=>({userStats:{...i.userStats,totalCards:i.userStats.totalCards+c/10},userChallengeParticipations:i.userChallengeParticipations.filter(m=>m.challengeId!==e)}))}},initializeMockData:()=>{t({userStats:K(),achievements:x,activeChallenges:b,leaderboards:R,userAchievements:[{id:"1",userId:"1",achievementId:"1",earnedAt:new Date(Date.now()-14400*60*1e3).toISOString()},{id:"2",userId:"1",achievementId:"2",earnedAt:new Date(Date.now()-7200*60*1e3).toISOString()}],userStreak:{id:"1",userId:"1",currentStreak:12,longestStreak:28,lastStudyDate:new Date().toISOString(),freezeCount:2,createdAt:new Date(Date.now()-720*60*60*1e3).toISOString()},userChallengeParticipations:[{id:"1",userId:"1",challengeId:"1",progress:{cards_studied_today:45},completed:!0,joinedAt:new Date().toISOString(),completedAt:new Date().toISOString(),milestoneProgress:{milestone_1:!0},weeklyProgress:[],currentStreak:5,bestWeek:1},{id:"2",userId:"1",challengeId:"2",progress:{cards_studied_week:180},completed:!1,joinedAt:new Date(Date.now()-4320*60*1e3).toISOString(),milestoneProgress:{milestone_1:!0,milestone_2:!1},weeklyProgress:[{week:1,startDate:new Date(Date.now()-10080*60*1e3).toISOString(),endDate:new Date().toISOString(),progress:{cards_studied_week:180},completed:!0,completedAt:new Date().toISOString(),storyUnlocked:!0}],currentStreak:3,bestWeek:1}],isFirstTimeUser:!1,isInitialized:!0})},initializeNewUser:()=>{t({userStats:v(),userAchievements:[],userStreak:null,userChallengeParticipations:[],isFirstTimeUser:!1,isInitialized:!0})},resetAllUserData:()=>{t({userStats:v(),userAchievements:[],userStreak:null,userChallengeParticipations:[],isFirstTimeUser:!0,isInitialized:!0})},addCurrency:(e,r)=>{t(a=>({userStats:{...a.userStats,gold:a.userStats.gold+e,diamonds:a.userStats.diamonds+r}}))},spendCurrency:(e,r)=>{const{userStats:a}=n();return a.gold>=e&&a.diamonds>=r?(t(s=>({userStats:{...s.userStats,gold:s.userStats.gold-e,diamonds:s.userStats.diamonds-r}})),!0):!1},initializeUserData:(e=!1)=>{n().isInitialized||t(e?{userStats:K(),achievements:x,activeChallenges:b,leaderboards:R,userAchievements:[{id:"1",userId:"1",achievementId:"1",earnedAt:new Date(Date.now()-14400*60*1e3).toISOString()},{id:"2",userId:"1",achievementId:"2",earnedAt:new Date(Date.now()-7200*60*1e3).toISOString()}],userStreak:{id:"1",userId:"1",currentStreak:12,longestStreak:28,lastStudyDate:new Date().toISOString(),freezeCount:2,createdAt:new Date(Date.now()-720*60*60*1e3).toISOString()},userChallengeParticipations:[{id:"1",userId:"1",challengeId:"1",progress:{cards_studied_today:45},completed:!0,joinedAt:new Date().toISOString(),completedAt:new Date().toISOString()},{id:"2",userId:"1",challengeId:"2",progress:{cards_studied_week:180},completed:!1,joinedAt:new Date(Date.now()-4320*60*1e3).toISOString()}],isFirstTimeUser:!1,isInitialized:!0}:{userStats:v(),userAchievements:[],userStreak:null,userChallengeParticipations:[],isFirstTimeUser:!1,isInitialized:!0})},updateMilestoneProgress:(e,r,a)=>{t(s=>({userChallengeParticipations:s.userChallengeParticipations.map(o=>o.challengeId===e?{...o,milestoneProgress:{...o.milestoneProgress,[r]:a}}:o)}))},updateWeeklyProgress:(e,r)=>{t(a=>({userChallengeParticipations:a.userChallengeParticipations.map(s=>s.challengeId===e?{...s,weeklyProgress:s.weeklyProgress?[...s.weeklyProgress.filter(o=>o.week!==r.week),r]:[r]}:s)}))},updateChallengeStreak:(e,r)=>{t(a=>({userChallengeParticipations:a.userChallengeParticipations.map(s=>s.challengeId===e?{...s,currentStreak:r}:s)}))},unlockStoryChapter:(e,r)=>{t(a=>({userChallengeParticipations:a.userChallengeParticipations.map(s=>s.challengeId===e?{...s,weeklyProgress:s.weeklyProgress?.map(o=>o.week===r?{...o,storyUnlocked:!0}:o)||[]}:s)}))},claimMilestoneReward:(e,r)=>{const{activeChallenges:a}=n();a.find(o=>o.id===e)&&t(o=>({userChallengeParticipations:o.userChallengeParticipations.map(c=>c.challengeId===e?{...c,milestoneProgress:{...c.milestoneProgress,[`${r}_claimed`]:!0}}:c)}))},contributeToCommunityGoal:(e,r)=>{console.log(`Contributing ${r} to community goal ${e}`),t(a=>({userStats:{...a.userStats}}))},awardStudyXP:(e,r)=>{let a=e;a+=r;const s=Math.floor(r/10)*10;a+=s,a>0&&t(o=>{const c=o.userStats.xp+a,l=B(c),i=F(l);return console.log(`🎉 XP Awarded: +${a} XP (${e} cards, ${r} correct, ${s} milestone bonus)`),console.log(`📊 Total XP: ${o.userStats.xp} → ${c} (Level ${o.userStats.level} → ${l})`),{userStats:{...o.userStats,xp:c,level:l,xpToNextLevel:i,totalCards:o.userStats.totalCards+e,cardsStudiedToday:o.userStats.cardsStudiedToday+e}}})}}),{name:"gamification-storage",partialize:t=>({userStats:t.userStats,userAchievements:t.userAchievements,userStreak:t.userStreak,userChallengeParticipations:t.userChallengeParticipations,isFirstTimeUser:t.isFirstTimeUser,isInitialized:t.isInitialized})})),Y="modulepreload",ee=function(t){return"/"+t},H={},z=function(n,e,r){let a=Promise.resolve();if(e&&e.length>0){let l=function(i){return Promise.all(i.map(m=>Promise.resolve(m).then(f=>({status:"fulfilled",value:f}),f=>({status:"rejected",reason:f}))))};document.getElementsByTagName("link");const o=document.querySelector("meta[property=csp-nonce]"),c=o?.nonce||o?.getAttribute("nonce");a=l(e.map(i=>{if(i=ee(i),i in H)return;H[i]=!0;const m=i.endsWith(".css"),f=m?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${i}"]${f}`))return;const u=document.createElement("link");if(u.rel=m?"stylesheet":Y,m||(u.as="script"),u.crossOrigin="",u.href=i,c&&u.setAttribute("nonce",c),document.head.appendChild(u),m)return new Promise((T,h)=>{u.addEventListener("load",T),u.addEventListener("error",()=>h(new Error(`Unable to preload CSS for ${i}`)))})}))}function s(o){const c=new Event("vite:preloadError",{cancelable:!0});if(c.payload=o,window.dispatchEvent(c),!c.defaultPrevented)throw o}return a.then(o=>{for(const c of o||[])c.status==="rejected"&&s(c.reason);return n().catch(s)})};function P(t,n,e={type:"basic"},r=[]){return{frontContent:t,backContent:n,cardType:e,mediaRefs:r,state:"new",queue:0,due:0,ivl:0,factor:2500,reps:0,lapses:0,left:0,learningStep:0,graduationInterval:1,easyInterval:4,totalStudyTime:0,averageAnswerTime:0,flags:0,originalDue:0,originalDeck:"",xpAwarded:0,difficultyRating:3}}const I={newCardsPerDay:20,maxReviewsPerDay:100,easyBonus:1.3,intervalModifier:1,maximumInterval:36500,minimumInterval:1},_=t=>t.replace(/<[^>]*>/g,"").replace(/&nbsp;/g," ").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&").replace(/\[sound:[^\]]*\]/g,"").trim(),te=t=>{if(t.length===0)return{frontIndex:0,backIndex:1};const n=t[0].length,e=[];for(let r=0;r<n;r++)for(let a=r+1;a<n;a++){let s=0,o=0;for(const l of t){const i=_(l[r]||""),m=_(l[a]||"");i&&m&&(o++,i.length>2&&m.length>2&&(s+=10),i!==m&&(s+=5),!i.match(/^\[sound:/)&&!m.match(/^\[sound:/)&&(s+=3),!i.match(/^\d+$/)&&!m.match(/^\d+$/)&&(s+=2))}const c=o>0?s/o:0;e.push({frontIndex:r,backIndex:a,score:c})}return e.sort((r,a)=>a.score-r.score),e.length>0&&e[0].score>0?(console.log(`Best field combination: ${e[0].frontIndex} -> ${e[0].backIndex} (score: ${e[0].score})`),{frontIndex:e[0].frontIndex,backIndex:e[0].backIndex}):n>=3?{frontIndex:0,backIndex:2}:{frontIndex:0,backIndex:1}},re=async t=>{try{const[{default:n},{default:e}]=await Promise.all([z(()=>import("./zip-vendor-CjLimuGR.js").then(h=>h.j),__vite__mapDeps([0,1,2,3])),z(()=>import("./sql-vendor-BuM0JLyb.js").then(h=>h.s),__vite__mapDeps([4,1,2,3]))]),r=await e({locateFile:h=>h.endsWith(".wasm")?"/sql-wasm.wasm":`/${h}`}),a=await t.arrayBuffer(),c=(await new n().loadAsync(a)).file("collection.anki2");if(!c)throw new Error("Invalid .apkg file: collection.anki2 not found");const l=await c.async("arraybuffer"),i=new r.Database(new Uint8Array(l)),m=i.exec("SELECT decks FROM col LIMIT 1");let f=t.name.replace(/\.apkg$/,"");if(m.length>0&&m[0].values.length>0)try{const h=m[0].values[0][0],p=JSON.parse(h),g=Object.keys(p).filter(y=>y!=="1");g.length>0&&(f=p[g[0]].name||f)}catch{console.warn("Could not parse deck names from .apkg file, using filename")}const u=i.exec(`
      SELECT n.flds, n.tags, c.type
      FROM notes n
      JOIN cards c ON n.id = c.nid
      WHERE c.type >= 0
      ORDER BY n.id
    `),T=[];if(u.length>0){const h=Math.min(10,u[0].values.length),p=[];for(let S=0;S<h;S++){const w=u[0].values[S][0].split("");p.push(w)}const{frontIndex:g,backIndex:y}=te(p);console.log(`Using field combination: ${g} (front) -> ${y} (back)`);for(const S of u[0].values){const w=S[0].split("");if(w.length>Math.max(g,y)){const C=_(w[g]||""),A=_(w[y]||"");C&&A&&C!==A&&T.push({front:C,back:A})}}}if(i.close(),T.length===0)throw new Error("No valid cards found in the .apkg file");return console.log(`Successfully parsed ${T.length} cards from .apkg file`),{name:f,cards:T}}catch(n){throw console.error("Error parsing .apkg file:",n),new Error(`Failed to parse .apkg file: ${n instanceof Error?n.message:"Unknown error"}`)}},ae=D()(U((t,n)=>({decks:[],cards:{},currentStudySession:null,isLoading:!1,error:null,importProgress:0,importStatus:null,createDeck:async e=>{t({isLoading:!0,error:null});try{const r={...e,id:crypto.randomUUID(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),settings:{...I,...e.settings}};return t(a=>({decks:[...a.decks,r],cards:{...a.cards,[r.id]:[]},isLoading:!1})),r}catch(r){throw t({error:"Failed to create deck",isLoading:!1}),r}},updateDeck:async(e,r)=>{t({isLoading:!0,error:null});try{t(a=>({decks:a.decks.map(s=>s.id===e?{...s,...r,updatedAt:new Date().toISOString()}:s),isLoading:!1}))}catch(a){throw t({error:"Failed to update deck",isLoading:!1}),a}},deleteDeck:async e=>{t({isLoading:!0,error:null});try{t(r=>{const{[e]:a,...s}=r.cards;return{decks:r.decks.filter(o=>o.id!==e),cards:s,isLoading:!1}})}catch(r){throw t({error:"Failed to delete deck",isLoading:!1}),r}},getDeck:e=>n().decks.find(r=>r.id===e),addCard:async(e,r)=>{t({isLoading:!0,error:null});try{const a={...r,id:crypto.randomUUID(),deckId:e,createdAt:new Date().toISOString(),easeFactor:2.5,intervalDays:0,nextReview:new Date().toISOString(),reviewCount:0,lapseCount:0};return t(s=>{const c=[...s.cards[e]||[],a];return{cards:{...s.cards,[e]:c},decks:s.decks.map(l=>l.id===e?{...l,cardCount:c.length,updatedAt:new Date().toISOString()}:l),isLoading:!1}}),a}catch(a){throw t({error:"Failed to add card",isLoading:!1}),a}},addCardBulk:async(e,r)=>{try{const s=n().cards[e]||[],o=`${r.frontContent.trim().toLowerCase()}|${r.backContent.trim().toLowerCase()}`;if(s.some(i=>`${i.frontContent.trim().toLowerCase()}|${i.backContent.trim().toLowerCase()}`===o))return console.log("Skipping duplicate card:",r.frontContent),{...r,id:"duplicate-skipped",deckId:e,createdAt:new Date().toISOString(),easeFactor:2.5,intervalDays:0,nextReview:new Date().toISOString(),reviewCount:0,lapseCount:0};const l={...r,id:crypto.randomUUID(),deckId:e,createdAt:new Date().toISOString(),easeFactor:2.5,intervalDays:0,nextReview:new Date().toISOString(),reviewCount:0,lapseCount:0};return t(i=>{const f=[...i.cards[e]||[],l];return{cards:{...i.cards,[e]:f},decks:i.decks.map(u=>u.id===e?{...u,cardCount:f.length,updatedAt:new Date().toISOString()}:u)}}),l}catch(a){throw console.error("Failed to add card during bulk import:",a),a}},createDeckBulk:async e=>{try{const r={...e,id:crypto.randomUUID(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),settings:{...I,...e.settings}};return t(a=>({decks:[...a.decks,r],cards:{...a.cards,[r.id]:[]}})),r}catch(r){throw console.error("Failed to create deck during bulk import:",r),r}},addCardsBatch:async(e,r)=>{try{const s=n().cards[e]||[],o=new Set(s.map(i=>`${i.frontContent.trim().toLowerCase()}|${i.backContent.trim().toLowerCase()}`)),c=r.filter(i=>{const m=`${i.frontContent.trim().toLowerCase()}|${i.backContent.trim().toLowerCase()}`;return!o.has(m)});if(console.log(`Batch processing: ${r.length} cards submitted, ${c.length} unique cards to add`),c.length===0)return console.log("No new unique cards to add in this batch"),[];const l=c.map(i=>({...i,id:crypto.randomUUID(),deckId:e,createdAt:new Date().toISOString(),easeFactor:2.5,intervalDays:0,nextReview:new Date().toISOString(),reviewCount:0,lapseCount:0}));return t(i=>{const f=[...i.cards[e]||[],...l];return{cards:{...i.cards,[e]:f},decks:i.decks.map(u=>u.id===e?{...u,cardCount:f.length,updatedAt:new Date().toISOString()}:u)}}),l}catch(a){throw console.error("Failed to add cards during batch import:",a),a}},updateCard:async(e,r)=>{t({isLoading:!0,error:null});try{t(a=>{const s={...a.cards};for(const o in s)s[o]=s[o].map(c=>c.id===e?{...c,...r}:c);return{cards:s,isLoading:!1}})}catch(a){throw t({error:"Failed to update card",isLoading:!1}),a}},deleteCard:async e=>{t({isLoading:!0,error:null});try{t(r=>{const a={...r.cards};let s="";for(const o in a)if(a[o].findIndex(l=>l.id===e)!==-1){a[o]=a[o].filter(l=>l.id!==e),s=o;break}return{cards:a,decks:r.decks.map(o=>o.id===s?{...o,cardCount:a[s].length,updatedAt:new Date().toISOString()}:o),isLoading:!1}})}catch(r){throw t({error:"Failed to delete card",isLoading:!1}),r}},getCards:e=>n().cards[e]||[],importAnkiDeck:async e=>{const{setImportProgress:r,resetImportProgress:a}=n();t({isLoading:!0,error:null}),a();try{const s=e.name.toLowerCase();if(s.endsWith(".apkg")){r(10,"Reading file...");const{name:o,cards:c}=await re(e);if(n().decks.find(p=>p.title===o))throw new Error(`A deck named "${o}" already exists. Please rename the deck or the file before importing.`);r(30,"Creating deck...");const i=await n().createDeckBulk({userId:"current-user",title:o,description:`Imported Anki deck with ${c.length} cards`,cardCount:0,isPublic:!1,settings:I,category:"imported"});r(40,`Importing ${c.length} cards...`);const m=[],f=new Set;for(const p of c){const g=`${p.front.trim().toLowerCase()}|${p.back.trim().toLowerCase()}`;f.has(g)||(f.add(g),m.push(p))}console.log(`Removed ${c.length-m.length} duplicates from Anki cards. Processing ${m.length} unique cards.`);const u=100;let T=0;const h=m.length;console.log(`Starting batch import of ${h} unique cards`);for(let p=0;p<h;p+=u){const g=m.slice(p,p+u),y=g.map(S=>P(S.front,S.back,{type:"basic"},[]));try{console.log(`Processing batch ${Math.floor(p/u)+1}/${Math.ceil(h/u)} (${g.length} cards)`),await n().addCardsBatch(i.id,y),T+=g.length;const S=40+50*Math.min(p+u,h)/h;r(S,`Imported ${T}/${h} cards...`),console.log(`Batch completed. Progress: ${S.toFixed(1)}%`),await new Promise(w=>setTimeout(w,50))}catch(S){console.error("Failed to import batch:",S);for(const C of g)try{await n().addCardBulk(i.id,P(C.front,C.back,{type:"basic"},[])),T++}catch(A){console.warn("Failed to import individual card:",C,A)}const w=40+50*Math.min(p+u,h)/h;r(w,`Imported ${T}/${h} cards...`)}}return console.log(`Batch import completed. Total successful: ${T}`),r(95,"Finalizing import..."),await n().updateDeck(i.id,{description:`Imported Anki deck with ${T} cards`}),r(100,"Import completed!"),setTimeout(()=>{a()},1e3),t({isLoading:!1}),i}else if(s.endsWith(".txt")||s.endsWith(".tsv")||s.endsWith(".csv")){r(10,"Reading text file...");const o=await e.text();let c="	";s.endsWith(".csv")&&(c=","),r(20,"Processing text content...");const l=o.replace(/\r\n/g,`
`).replace(/\r/g,`
`).trim(),i=await n().importFromText(e.name.replace(/\.[^/.]+$/,""),l,c);return t({isLoading:!1}),i}else{r(10,"Reading file as text...");const o=await e.text();r(20,"Processing content...");const c=o.replace(/\r\n/g,`
`).replace(/\r/g,`
`).trim(),l=await n().importFromText(e.name.replace(/\.[^/.]+$/,""),c,"	");return t({isLoading:!1}),l}}catch(s){const o=s instanceof Error?s.message:"Failed to import Anki deck";throw t({error:o,isLoading:!1}),a(),s}},importFromText:async(e,r,a="	")=>{const{setImportProgress:s,resetImportProgress:o}=n();t({isLoading:!0,error:null});try{s(30,"Processing text content...");const l=r.replace(/\r\n/g,`
`).replace(/\r/g,`
`).replace(/\\u0000/g,"").replace(/[\\u0001-\\u0008\\u000B\\u000C\\u000E-\\u001F\\u007F]/g,"").trim().split(`
`).map(g=>g.trim()).filter(g=>g.length>0);if(l.length===0)throw new Error("No valid content found in the file");s(40,"Creating deck...");const i=await n().createDeckBulk({userId:"current-user",title:e,description:`Imported deck with ${l.length} cards`,cardCount:0,isPublic:!1,settings:I,category:"imported"});s(50,`Importing ${l.length} cards...`);const m=[];let f=0;for(let g=0;g<l.length;g++){const y=l[g];try{let S;if(a===","&&y.includes('"')?S=y.split(",").map(w=>w.replace(/^"(.*)"$/,"$1").trim()):S=y.split(a),S.length>=2){const w=S[0].trim(),C=S[1].trim();w&&C?m.push(P(w,C,{type:"basic"},[])):f++}else f++}catch(S){console.warn("Failed to parse line:",y,S),f++}}const u=[],T=new Set;for(const g of m){const y=`${g.frontContent.trim().toLowerCase()}|${g.backContent.trim().toLowerCase()}`;T.has(y)||(T.add(y),u.push(g))}console.log(`Removed ${m.length-u.length} duplicates from parsed cards. Processing ${u.length} unique cards.`);const h=100;let p=0;console.log(`Starting text import batch processing of ${u.length} unique cards`);for(let g=0;g<u.length;g+=h){const y=u.slice(g,g+h);try{console.log(`Processing text batch ${Math.floor(g/h)+1}/${Math.ceil(u.length/h)} (${y.length} cards)`);const S=await n().addCardsBatch(i.id,y);p+=S.length;const w=50+40*Math.min(g+h,u.length)/u.length;s(w,`Imported ${p}/${u.length} cards...`),console.log(`Text batch completed. Progress: ${w.toFixed(1)}%, Added: ${S.length} cards`),await new Promise(C=>setTimeout(C,50))}catch(S){console.error("Failed to import text batch:",S);for(const C of y)try{(await n().addCardBulk(i.id,C)).id!=="duplicate-skipped"&&p++}catch(A){console.warn("Failed to import individual text card:",C,A)}const w=50+40*Math.min(g+h,u.length)/u.length;s(w,`Imported ${p}/${u.length} cards...`)}}if(console.log(`Text import batch processing completed. Total successful: ${p}`),s(95,"Finalizing import..."),await n().updateDeck(i.id,{description:`Imported deck with ${p} cards${f>0?` (${f} lines skipped)`:""}`}),p===0)throw new Error("No valid cards could be imported. Please check the file format.");return s(100,"Import completed!"),setTimeout(()=>{o()},1e3),t({isLoading:!1}),i}catch(c){throw t({error:"Failed to import from text",isLoading:!1}),o(),c}},loadExampleDecks:async()=>{t({isLoading:!0,error:null});try{const e=n(),r=new Set(e.decks.map(o=>o.title));if(["Spanish Vocabulary","JavaScript Concepts","World Capitals"].some(o=>r.has(o))){console.log("Example decks already exist, skipping load"),t({isLoading:!1});return}const s=[{title:"Spanish Vocabulary",description:"Essential Spanish words for beginners",category:"language",cards:[{front:"Hello",back:"Hola"},{front:"Goodbye",back:"Adiós"},{front:"Thank you",back:"Gracias"},{front:"Please",back:"Por favor"},{front:"Yes",back:"Sí"},{front:"No",back:"No"},{front:"Water",back:"Agua"},{front:"Food",back:"Comida"},{front:"House",back:"Casa"},{front:"Car",back:"Coche"}]},{title:"JavaScript Concepts",description:"Important JavaScript programming concepts",category:"programming",cards:[{front:"What is a closure?",back:"A closure is a function that has access to variables in its outer (enclosing) scope even after the outer function has returned."},{front:"What is hoisting?",back:"Hoisting is JavaScript's default behavior of moving declarations to the top of their scope."},{front:"What is the difference between let and var?",back:"let has block scope and cannot be redeclared, while var has function scope and can be redeclared."},{front:"What is a Promise?",back:"A Promise is an object representing the eventual completion or failure of an asynchronous operation."},{front:"What is async/await?",back:"async/await is syntactic sugar for working with Promises, making asynchronous code look more like synchronous code."}]},{title:"World Capitals",description:"Capital cities of countries around the world",category:"geography",cards:[{front:"France",back:"Paris"},{front:"Germany",back:"Berlin"},{front:"Italy",back:"Rome"},{front:"Spain",back:"Madrid"},{front:"United Kingdom",back:"London"},{front:"Japan",back:"Tokyo"},{front:"China",back:"Beijing"},{front:"Australia",back:"Canberra"},{front:"Brazil",back:"Brasília"},{front:"Canada",back:"Ottawa"}]}];console.log("Loading example decks...");for(const o of s){const c=await n().createDeck({userId:"current-user",title:o.title,description:o.description,cardCount:0,isPublic:!1,settings:I,category:o.category,tags:[o.category]});for(const l of o.cards)await n().addCard(c.id,P(l.front,l.back,{type:"basic"},[]))}console.log("Example decks loaded successfully"),t({isLoading:!1})}catch(e){throw t({error:"Failed to load example decks",isLoading:!1}),e}},clearError:()=>t({error:null}),setLoading:e=>t({isLoading:e}),removeDuplicateCards:async e=>{try{const a=n().cards[e]||[];if(a.length===0)return 0;const s=new Map;let o=0;for(const l of a){const i=`${l.frontContent.trim().toLowerCase()}|${l.backContent.trim().toLowerCase()}`;s.has(i)?(o++,console.log(`Removing duplicate card: ${l.frontContent}`)):s.set(i,l)}const c=Array.from(s.values());return o>0&&(t(l=>({cards:{...l.cards,[e]:c},decks:l.decks.map(i=>i.id===e?{...i,cardCount:c.length,updatedAt:new Date().toISOString()}:i)})),console.log(`Removed ${o} duplicate cards from deck. ${c.length} unique cards remaining.`)),o}catch(r){throw console.error("Failed to remove duplicate cards:",r),r}},setImportProgress:(e,r)=>t({importProgress:e,importStatus:r}),resetImportProgress:()=>t({importProgress:0,importStatus:null}),startStudySession:(e,r)=>{const a=r.map(s=>s.id);t({currentStudySession:{deckId:e,currentCardIndex:0,studyCards:r,studyCardIds:a,sessionStats:{total:r.length,correct:0,incorrect:0},startedAt:new Date().toISOString()}})},updateStudySession:(e,r)=>{t(a=>({currentStudySession:a.currentStudySession?{...a.currentStudySession,currentCardIndex:e,sessionStats:r}:null}))},clearStudySession:()=>{t({currentStudySession:null})},getStudySession:e=>{const r=n();return r.currentStudySession?.deckId===e?r.currentStudySession:null},resetAllStudyData:()=>{t(e=>{const r={};for(const[a,s]of Object.entries(e.cards))r[a]=s.map(o=>({...o,easeFactor:2.5,intervalDays:0,nextReview:new Date().toISOString(),reviewCount:0,lapseCount:0}));return{cards:r,currentStudySession:null}})}}),{name:"deck-storage",partialize:t=>{const{cards:n,currentStudySession:e,...r}=t,a=e?{deckId:e.deckId,currentCardIndex:e.currentCardIndex,studyCardIds:e.studyCardIds,sessionStats:e.sessionStats,startedAt:e.startedAt}:null;return{...r,currentStudySession:a}}})),ie=()=>{const t=ae(),n=t.currentStudySession;if(!n||!n.studyCardIds||n.studyCardIds.length===0)return null;const e=n.studyCardIds[n.currentCardIndex];return e&&(t.cards[n.deckId]||[]).find(a=>a.id===e)||null};export{ne as a,$ as b,ae as c,ie as d,P as e,oe as u};
//# sourceMappingURL=stores-Y6SjqVOq.js.map
